@startuml
skinparam {
    ClassBackgroundColor White
    ClassBorderColor Black
    shadowing true
    RoundCorner 0
    LineColor DarkRed
    ArrowColor DarkRed
    ArrowThickness 1
}

class ProductCategory {

    id*: string
    href: uri
    name*: string
    description*: string
    lastUpdate*: date-time
}

ProductCategory *--> ProductCategoryRef : parentCategory
ProductCategory *-->"*" ProductCategoryRef : subCategory
ProductCategory *-->"*" ProductOfferingRef : productOffering


class ProductCategoryRef {

    id*: string
    href: uri
}



class ProductOfferingRef {

    id*: string
    href: uri
}



class ProductOffering_Common {

    id: string
    href: uri
    name: string
    description: string
    lastUpdate: date-time
    lifecycleStatus: ProductOfferingLifecycleStatusType
    agreement: string
    channel: string[]
    marketSegment: string[]
}

ProductOffering_Common *-->"*" Region : region
ProductOffering_Common *-->"*" ProductCategoryRef : category
ProductOffering_Common *--> ProductSpecificationRef : productSpecification


class ProductOffering_Find {

}
ProductOffering_Common <|-- ProductOffering_Find



class ProductOffering {

    statusReason: string
}
ProductOffering_Common <|-- ProductOffering

ProductOffering *-->"*" ProductOfferingLifecycleStatusTransition : statusTransition
ProductOffering *-->"*" AttachmentValue : attachment
ProductOffering *--> RelatedContactInformation : relatedContactInformation
ProductOffering *-->"*" MEFItemTerm : productOfferingTerm
ProductOffering *-->"*" ProductMilestoneDefinition : milestone
ProductOffering *-->"*" Note : note
ProductOffering *--> SchemaRefOrValue : productOfferingSpecification
ProductOffering *-->"*" ProductOfferingContextualInfo : productOfferingContextualInfo
ProductOffering *-->"*" ProductRelationshipConstraint : productRelationship
ProductOffering *-->"*" PlaceRelationshipConstraint : placeRelationship


enum ProductOfferingLifecycleStatusType {

    announced
    endOfSale
    endOfSupport
    inTest
    obsolete
    onHold
    orderable
    rejected
}
class PlaceRelationshipConstraint {

    relationshipRole*: string
    minCardinality*: integer
    maxCardinality*: integer
}



class ProductRelationshipConstraint {

    id*: string
    relationshipType*: string
    minCardinality*: integer
    maxCardinality*: integer
}



enum ProductSpecificationLifecycleStatusType {

    obsolete
    published
}
class ProductOfferingLifecycleStatusTransition {

    transitionDate*: date-time
    transitionLifecycleStatus*: ProductOfferingLifecycleStatusType
}



class AttachmentValue {

    attachmentId: string
    author*: string
    content: string
    creationDate*: date-time
    description: string
    mimeType: string
    name*: string
    source*: MEFBuyerSellerType
    url: string
}

AttachmentValue *--> MEFByteSize : size


enum DataSizeUnit {

    BYTES
    KBYTES
    MBYTES
    GBYTES
    TBYTES
    PBYTES
    EBYTES
    ZBYTES
    YBYTES
}
enum MEFBuyerSellerType {

    buyer
    seller
}
class MEFByteSize {

    amount*: float
    units*: DataSizeUnit
}



class RelatedContactInformation {

    emailAddress*: string
    name*: string
    number*: string
    numberExtension: string
    organization: string
    role*: string
}

RelatedContactInformation *--> FieldedAddress : postalAddress


class FieldedAddress {

    country*: string
    streetType: string
    postcodeExtension: string
    city*: string
    streetNr: string
    locality: string
    postcode: string
    streetNrLast: string
    streetNrSuffix: string
    streetName*: string
    stateOrProvince: string
    streetNrLastSuffix: string
    streetSuffix: string
}

FieldedAddress *--> GeographicSubAddress : geographicSubAddress


class GeographicSubAddress {

    buildingName: string
    id: string
    levelNumber: string
    levelType: string
    privateStreetName: string
    privateStreetNumber: string
}

GeographicSubAddress *-->"*" MEFSubUnit : subUnit


class MEFSubUnit {

    subUnitNumber*: string
    subUnitType*: string
}



class Region {

    locality: string
    stateOrProvince: string
    country*: string
}



class MEFItemTerm {

    name*: string
    description: string
    endOfTermAction*: MEFEndOfTermAction
}

MEFItemTerm *-->"1" Duration : duration
MEFItemTerm *--> Duration : rollInterval


class Duration {

    amount*: integer
    units*: TimeUnit
}



enum MEFEndOfTermAction {

    roll
    autoDisconnect
    autoRenew
}
class ProductMilestoneDefinition {

    name*: string
    description*: string
}



enum TimeUnit {

    calendarMonths
    calendarDays
    calendarHours
    calendarMinutes
    businessDays
    businessHours
    businessMinutes
}
class Note {

    author*: string
    date*: date-time
    id*: string
    source*: MEFBuyerSellerType
    text*: string
}



class ProductSpecificationRef {

    id*: string
    href: uri
}



class ProductOfferingContextualInfo {

}

ProductOfferingContextualInfo *-->"1" SchemaRefOrValue : contextSchema
ProductOfferingContextualInfo *-->"1" Context : context


class SchemaRefOrValue {

    schema: string
    schemaLocation: uri
}



class Context {

    productAction: ProductActionMask
    businessFunction: BusinessFunctionMask
}



enum ProductActionMask {

    add
    modify
    all
}
enum BusinessFunctionMask {

    poq
    quote
    productOrder
    productInventory
    all
}
class ProductSpecification_Common {

    id: string
    href: uri
    name: string
    lifecycleStatus: ProductSpecificationLifecycleStatusType
    lastUpdate: date-time
}



class ProductSpecification_Find {

}
ProductSpecification_Common <|-- ProductSpecification_Find



class ProductSpecification {

    description*: string
}
ProductSpecification_Common <|-- ProductSpecification

ProductSpecification *-->"*" AttachmentValue : attachment
ProductSpecification *-->"*" ProductRelationshipConstraint : productRelationship
ProductSpecification *-->"*" PlaceRelationshipConstraint : placeRelationship
ProductSpecification *-->"*" ProductMilestoneDefinition : milestone
ProductSpecification *-->"*" Note : note
ProductSpecification *-->"1" SchemaRefOrValue : sourceSchema


@enduml
