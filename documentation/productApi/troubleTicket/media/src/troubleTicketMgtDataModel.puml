@startuml
skinparam {
    ClassBackgroundColor White
    ClassBorderColor Black
}

class AppointmentRef {

    href: string
    id*: string
}



class AttachmentValue {

    attachmentId: string
    author*: string
    content: string
    creationDate: date-time
    description: string
    mimeType: string
    name*: string
    source*: MEFBuyerSellerType
    url: string
}

AttachmentValue *--> MEFByteSize : size


enum DataSizeUnit {

    BYTES
    KBYTES
    MBYTES
    GBYTES
    TBYTES
    PBYTES
    EBYTES
    ZBYTES
    YBYTES
}
class Error400 {

    code*: Error400Code
}
Error <|-- Error400



class Error401 {

    code*: Error401Code
}
Error <|-- Error401



class Error403 {

    code*: Error403Code
}
Error <|-- Error403



class Error404 {

    code*: string
}
Error <|-- Error404



class Error409 {

    code*: string
}
Error <|-- Error409



class Error {

    message: string
    reason*: string
    referenceError: uri
}



class EventSubscription {

    callback*: string
    id*: string
    query: string
}



class EventSubscriptionInput {

    callback*: string
    query: string
}



class FieldedAddress {

    city*: string
    country*: string
    locality: string
    postcode: string
    postcodeExtension: string
    stateOrProvince: string
    streetName*: string
    streetNr: string
    streetNrLast: string
    streetNrLastSuffix: string
    streetNrSuffix: string
    streetSuffix: string
    streetType: string
}
RelatedPlaceRefOrValue <|-- FieldedAddress

FieldedAddress *--> GeographicSubAddress : geographicSubAddress


class GeographicAddressRef {

    href: string
    id*: string
}
RelatedPlaceRefOrValue <|-- GeographicAddressRef



class GeographicSubAddress {

    buildingName: string
    id: string
    levelNumber: string
    levelType: string
    privateStreetName: string
    privateStreetNumber: string
}

GeographicSubAddress *-->"*" MEFSubUnit : subUnit


class Incident {

    closedDate: date-time
    creationDate*: date-time
    description*: string
    expectedClosedDate: date-time
    href: string
    id*: string
    incidentType*: IncidentType
    issueStartDate: date-time
    priority*: TroubleTicketPriorityType
    severity*: TroubleTicketSeverityType
    status*: IncidentStatusType
}

Incident *-->"*" AttachmentValue : attachment
Incident *-->"*" Note : note
Incident *-->"1..*" RelatedContactInformation : relatedContactInformation
Incident *-->"1..*" RelatedEntity : relatedEntity
Incident *-->"*" IssueRelationship : relatedIssue
Incident *-->"*" IncidentStatusChange : statusChange


class IssueRelationship {

    @referredType*: string
    creationDate*: date-time
    description*: string
    href: string
    id*: string
    relationshipType*: string
    source*: MEFBuyerSellerType
}



class TroubleTicket {

    creationDate*: date-time
    expectedResolutionDate: date-time
    href: string
    id*: string
    resolutionDate: date-time
    sellerPriority*: TroubleTicketPriorityType
    sellerSeverity*: TroubleTicketSeverityType
    status*: TroubleTicketStatusType
}
TroubleTicket_Common <|-- TroubleTicket

TroubleTicket *-->"*" TroubleTicketStatusChange : statusChange
TroubleTicket *-->"*" WorkOrderRef : workOrder


enum Error403Code {

    accessDenied
    forbiddenRequester
    tooManyUsers
}
class Error422 {

    code*: Error422Code
    propertyPath: string
}
Error <|-- Error422



class Error500 {

    code*: string
}
Error <|-- Error500



class FormattedAddress {

    addrLine1*: string
    addrLine2: string
    city*: string
    country*: string
    locality: string
    postcode: string
    postcodeExtension: string
    stateOrProvince: string
}
RelatedPlaceRefOrValue <|-- FormattedAddress



class GeographicAddressLabel {

    externalReferenceId*: string
    externalReferenceType*: string
}
RelatedPlaceRefOrValue <|-- GeographicAddressLabel



class GeographicSiteRef {

    href: string
    id*: string
}
RelatedPlaceRefOrValue <|-- GeographicSiteRef



class IncidentStatusChange {

    changeDate: date-time
    changeReason: string
    status: IncidentStatusType
}



enum IncidentStatusType {

    closed
    created
    inProgress
}
class MEFByteSize {

    amount: float
    units: DataSizeUnit
}

enum MEFObservedImpactType {

    degraded
    intermittent
    down
}


class Note {

    author*: string
    date*: date-time
    id*: string
    source*: MEFBuyerSellerType
    text*: string
}



enum IncidentType {

    degraded
    down
    intermittent
    maintenance
}
class Incident_Find {

    closedDate: date-time
    creationDate*: date-time
    description*: string
    expectedClosedDate: date-time
    href: string
    id*: string
    incidentType*: IncidentType
    issueStartDate: date-time
    priority*: TroubleTicketPriorityType
    severity*: TroubleTicketSeverityType
    status*: IncidentStatusType
}

Incident_Find *-->"1..*" RelatedEntity : relatedEntity


class MEFGeographicPoint {

    spatialRef*: string
    x*: string
    y*: string
    z: string
}
RelatedPlaceRefOrValue <|-- MEFGeographicPoint


enum MEFBuyerSellerType {

    buyer
    seller
}

class MEFSubUnit {

    subUnitNumber*: string
    subUnitType*: string
}



class RelatedContactInformation {

    emailAddress*: string
    name*: string
    number*: string
    numberExtension: string
    organization: string
    role*: string
}

RelatedContactInformation *--> FieldedAddress : postalAddress


class RelatedPlaceRefOrValue {

    @schemaLocation: uri
    @type*: string
    role*: string
}



class IssueRelationship {

    @referredType*: string
    creationDate*: date-time
    description*: string
    href: string
    id*: string
    relationshipType*: string
    source*: MEFBuyerSellerType
}



class TroubleTicket {

    creationDate*: date-time
    expectedResolutionDate: date-time
    href: string
    id*: string
    resolutionDate: date-time
    sellerPriority*: TroubleTicketPriorityType
    sellerSeverity*: TroubleTicketSeverityType
    status*: TroubleTicketStatusType
}
TroubleTicket_Common <|-- TroubleTicket

TroubleTicket *-->"*" TroubleTicketStatusChange : statusChange
TroubleTicket *-->"*" WorkOrderRef : workOrder

class IssueRelationship {

    @referredType*: string
    creationDate*: date-time
    description*: string
    href: string
    id*: string
    relationshipType*: string
    source*: MEFBuyerSellerType
}


class TroubleTicketStatusChange {

    changeDate: date-time
    changeReason: string
    status: TroubleTicketStatusType
}



enum TroubleTicketType {

    assistance
    information
    installation
    maintenance
}
class TroubleTicket_Create {

}
TroubleTicket_Common <|-- TroubleTicket_Create



class WorkOrder {

    appointmentRequired*: boolean
    href: string
    id*: string
    state*: WorkOrderStateType
    tasks*: string
}

WorkOrder *-->"*" AppointmentRef : appointments
WorkOrder *-->"*" Note : note
WorkOrder *-->"*" RelatedPlaceRefOrValue : place
WorkOrder *-->"1..*" RelatedContactInformation : relatedContactInformation
WorkOrder *-->"1..*" RelatedEntity : relatedEntity


class WorkOrderRef {

    href: string
    id*: string
}




enum Error401Code {

    missingCredentials
    invalidCredentials
}
class RelatedEntity {

    @referredType*: string
    href: string
    id*: string
    role*: string
}



class TroubleTicket_Common {

    description*: string
    externalId: string
    issueStartDate: date-time
    observedImpact*: MEFObservedImpactType
    priority*: TroubleTicketPriorityType
    severity*: TroubleTicketSeverityType
    ticketType*: TroubleTicketType
}

TroubleTicket_Common *-->"*" AttachmentValue : attachment
TroubleTicket_Common *-->"*" Note : note
TroubleTicket_Common *-->"1..*" RelatedContactInformation : relatedContactInformation
TroubleTicket_Common *-->"1..*" RelatedEntity : relatedEntity
TroubleTicket_Common *-->"*" IssueRelationship : relatedIssue


enum Error400Code {

    missingQueryParameter
    missingQueryValue
    invalidQuery
    invalidBody
}
enum Error422Code {

    missingProperty
    invalidValue
    invalidFormat
    referenceNotFound
    unexpectedProperty
    tooManyRecords
    otherIssue
}

class Reason {

    reason*: string
}



class TroubleTicket_Find {

    creationDate*: date-time
    description*: string
    expectedResolutionDate*: date-time
    externalId*: string
    id*: string
    priority*: TroubleTicketPriorityType
    resolutionDate*: date-time
    sellerPriority*: TroubleTicketPriorityType
    sellerSeverity*: TroubleTicketSeverityType
    severity*: TroubleTicketSeverityType
    status*: TroubleTicketStatusType
    ticketType*: TroubleTicketType
}

TroubleTicket_Find *-->"1..*" RelatedEntity : relatedEntity


enum TroubleTicketSeverityType {

    minor
    moderate
    significant
    extensive
}
enum TroubleTicketStatusType {

    acknowledged
    assessingCancellation
    cancelled
    closed
    inProgress
    pending
    resolved
    reopened
}
class TroubleTicket_Update {

    externalId: string
    issueStartDate: date-time
    priority: TroubleTicketPriorityType
    severity: TroubleTicketSeverityType
}

TroubleTicket_Update *-->"*" AttachmentValue : attachment
TroubleTicket_Update *-->"*" Note : note
TroubleTicket_Update *-->"*" RelatedContactInformation : relatedContactInformation
TroubleTicket_Update *-->"*" IssueRelationship : relatedIssue


enum WorkOrderStateType {

    cancelled
    completed
    inProgress
    open
    planned
    unableToComplete
}
enum TroubleTicketPriorityType {

    low
    medium
    high
    critical
}
@enduml
