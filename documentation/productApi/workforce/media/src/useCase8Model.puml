@startuml
skinparam {
    ClassBackgroundColor White
    ClassBorderColor Black
}

class Appointment {

    id*: string
    href: string
    status*: AppointmentStateType
}

Appointment *-->"*" AttachmentValue : attachment
Appointment *-->"*" Note : note
Appointment *-->"1" RelatedPlaceRefOrValue : relatedPlace
Appointment *-->"1" TimePeriod : validFor
Appointment *-->"1..*" RelatedContactInformation : relatedContactInformation
Appointment *-->"1" WorkOrderRef : workOrder


class Appointment_Create {

}


Appointment_Create *-->"*" AttachmentValue : attachment
Appointment_Create *-->"*" Note : note
Appointment_Create *-->"1..*" RelatedContactInformation : relatedContactInformation
Appointment_Create *-->"1" TimePeriod : validFor
Appointment_Create *-->"1" WorkOrderRef : workOrder


class AttachmentValue {

    attachmentId: string
    author*: string
    content: string
    creationDate: date-time
    description: string
    mimeType: string
    name*: string
    source*: MEFBuyerSellerType
    url: string
}

AttachmentValue *--> MEFByteSize : size

class FormattedAddress {

    addrLine1*: string
    addrLine2: string
    city*: string
    country*: string
    locality: string
    postcode: string
    postcodeExtension: string
    stateOrProvince: string
}
RelatedPlaceRefOrValue <|-- FormattedAddress

class GeographicAddressRef {

    href: string
    id*: string
}
RelatedPlaceRefOrValue <|-- GeographicAddressRef


class GeographicSiteRef {

    href: string
    id*: string
}
RelatedPlaceRefOrValue <|-- GeographicSiteRef



class GeographicSubAddress {

    buildingName: string
    id: string
    levelNumber: string
    levelType: string
    privateStreetName: string
    privateStreetNumber: string
}

GeographicSubAddress *-->"*" MEFSubUnit : subUnit


class MEFByteSize {

    amount: float
    units: DataSizeUnit
}



class MEFSubUnit {

    subUnitNumber*: string
    subUnitType*: string
}



class Note {

    author*: string
    date*: date-time
    id*: string
    source*: MEFBuyerSellerType
    text*: string
}





class FieldedAddress {

    city*: string
    country*: string
    locality: string
    postcode: string
    postcodeExtension: string
    stateOrProvince: string
    streetName*: string
    streetNr: string
    streetNrLast: string
    streetNrLastSuffix: string
    streetNrSuffix: string
    streetSuffix: string
    streetType: string
}
RelatedPlaceRefOrValue <|-- FieldedAddress

FieldedAddress *--> GeographicSubAddress : geographicSubAddress


class GeographicAddressLabel {

    externalReferenceId*: string
    externalReferenceType*: string
}
RelatedPlaceRefOrValue <|-- GeographicAddressLabel



class RelatedContactInformation {

    emailAddress*: string
    name*: string
    number*: string
    numberExtension: string
    organization: string
    role*: string
}

RelatedContactInformation *--> FieldedAddress : postalAddress

class RelatedPlaceRefOrValue {

    @schemaLocation: uri
    @type*: string
    role*: string
}


class TimePeriod {

    endDateTime: date-time
    startDateTime: date-time
}
class MEFGeographicPoint {

    spatialRef*: string
    x*: string
    y*: string
    z: string
}
RelatedPlaceRefOrValue <|-- MEFGeographicPoint

class WorkOrderRef {

    href: string
    id*: string
}


@enduml
