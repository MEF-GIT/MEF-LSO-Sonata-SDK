@startuml
skinparam {
    ClassBackgroundColor White
    ClassBorderColor Black
}

class WorkOrder {

    appointmentRequired*: boolean
    href: string
    id*: string
    state*: WorkOrderStateType
    tasks*: string
}

WorkOrder *-->"*" AppointmentRef : appointments
WorkOrder *-->"*" Note : note
WorkOrder *-->"*" RelatedPlaceRefOrValue : place
WorkOrder *-->"1..*" RelatedContactInformation : relatedContactInformation
WorkOrder *-->"1..*" RelatedEntity : relatedEntity

enum WorkOrderStateType {

    cancelled
    completed
    inProgress
    open
    planned
    unableToComplete
}


class AppointmentRef {

    href: string
    id*: string
}

class FieldedAddress {

    city*: string
    country*: string
    locality: string
    postcode: string
    postcodeExtension: string
    stateOrProvince: string
    streetName*: string
    streetNr: string
    streetNrLast: string
    streetNrLastSuffix: string
    streetNrSuffix: string
    streetSuffix: string
    streetType: string
}
RelatedPlaceRefOrValue <|-- FieldedAddress

FieldedAddress *--> GeographicSubAddress : geographicSubAddress

class GeographicSubAddress {

    buildingName: string
    id: string
    levelNumber: string
    levelType: string
    privateStreetName: string
    privateStreetNumber: string
}

GeographicSubAddress *-->"*" MEFSubUnit : subUnit


class RelatedContactInformation {

    emailAddress*: string
    name*: string
    number*: string
    numberExtension: string
    organization: string
    role*: string
}

RelatedContactInformation *--> FieldedAddress : postalAddress

class RelatedEntity {

    @referredType*: string
    href: string
    id*: string
    role*: string
}


class GeographicAddressRef {

    href: string
    id*: string
}
RelatedPlaceRefOrValue <|-- GeographicAddressRef
class FormattedAddress {

    addrLine1*: string
    addrLine2: string
    city*: string
    country*: string
    locality: string
    postcode: string
    postcodeExtension: string
    stateOrProvince: string
}
RelatedPlaceRefOrValue <|-- FormattedAddress


class GeographicAddressLabel {

    externalReferenceId*: string
    externalReferenceType*: string
}
RelatedPlaceRefOrValue <|-- GeographicAddressLabel


class GeographicSiteRef {

    href: string
    id*: string
}
RelatedPlaceRefOrValue <|-- GeographicSiteRef



class Note {

    author*: string
    date*: date-time
    id*: string
    source*: MEFBuyerSellerType
    text*: string
}


class MEFGeographicPoint {

    spatialRef*: string
    x*: string
    y*: string
    z: string
}
RelatedPlaceRefOrValue <|-- MEFGeographicPoint


class MEFSubUnit {

    subUnitNumber*: string
    subUnitType*: string
}

class RelatedPlaceRefOrValue {

    @schemaLocation: uri
    @type*: string
    role*: string
}






@enduml
