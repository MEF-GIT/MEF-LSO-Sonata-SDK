
    {
    "swagger": "2.0",
    "info": {
    "description": "**ProductOfferingQualification Management**\n\nMEF-LSO SonataProductOfferingQualification API allows to determine whether it is feasible for the Seller to deliver a particular Product to a particular geographic location. \n\nFollowing operations are managed:\n- Register for POQ Notifications\n- Create Product Offering Qualification\n- Retrieve POQ List\n- Retrieve POQ by Identifier\n(note: POQ Notification are described in a separate swagger)\n\nProductOfferingQualification  API has been designed by MEF Sonata team and used TMF 679 as template.\n\n\n",
    "version": "3.0.1",
    "title": "API ProductOfferingQualificationManagement",
    "x-logo": {
    "url": "/redoc/logo.png",
    "backgroundColor": "#FFFFFF"
    }
    },
    
    
    "host": "serverRoot",
    "basePath": "/api/mef/productOfferingQualificationManagement/v3/",
    "schemes": [
      "https"
      ],
    "produces": [
    "application/json;charset=utf-8"
    ],
    "tags": [
    
      {
      "name": "ProductOfferingQualification",
      "description": "ProductOfferingQualification (POQ) resource is use in the Serviceability process.  The POQ provides a means to determine whether it is feasible for the Seller to deliver a particular Product to a particular geographic location."
      },
      {
      "name": "Hub",
      "description": "HUB resource is used to manage notification subscription for POQ."
      }
    ],
    "paths": {
      "/productOfferingQualification": {
    "post": {
    "tags": [
    "ProductOfferingQualification"   
    ],
        "consumes": [
	    "application/json;charset=utf-8"
    ],
        "produces": [
	    "application/json;charset=utf-8"
      ],
    "operationId": "productOfferingQualificationCreate",
    "summary": "Create a ProductOfferingQualification",
    "description": "A request initiated by the Buyer to determine whether the Seller can feasibly deliver a particular Product (or Products) to a specific set of geographic locations specified by a set of Site/Address filter criteria. The Seller also provides estimated time intervals to complete these deliveries. ",
    "deprecated": false,
    
      "parameters": [
      
    {
    "name": "ProductOfferingQualification",
    "required": true,
    "in": "body",
    "description": "",
    "schema": {
    "$ref": "#/definitions/ProductOfferingQualification_Create"
      }
    }
      ],
    "responses": {
    "201": {
    "description": "Created",
    "schema": {
    "$ref": "#/definitions/ProductOfferingQualification"
    }
    
    },
      "400": {
      
          "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "401": {
      
          "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "403": {
      
          "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "404": {
      
          "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "408": {
      
          "description": "Request Time-out\n\nList of supported error codes:\n- 63: Request time-out",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "422": {
      
          "description": "Unprocessable entity\n\nFunctional error\n\n\n \n\n\n - code: 100\nmessage: A relatedParty - at productOfferingQualification level - with a role 'Buyer' must be provided (including contact information)\ndescription: \n\n\n - code: 101\nmessage: A least a productOffering OR a productSpecification OR a Product must be provided for a POQItem\ndescription: \n\n\n - code: 102\nmessage: Provided Product Offering Identifier is unknown\ndescription: \n\n\n - code: 103\nmessage: Provided Product Specification Identifier is unknown\ndescription: \n\n\n - code: 104\nmessage: Provided Product Identifier is unknown\ndescription: \n\n\n - code: 105\nmessage: The place information provided are invalid\ndescription: \n\n\n - code: 106\nmessage: A least one date provided is invalid\ndescription: \n\n\n - code: 107\nmessage: Incorrect related party role provided\ndescription: ",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "503": {
      
          "description": "Service Unavailable\n\n",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      }
    }
    },
    "get": {
    "tags": [
    "ProductOfferingQualification"   
    ],
        "produces": [
	    "application/json;charset=utf-8"
      ],
    "operationId": "productOfferingQualificationFind",
    "summary": "Retrieve a list of ProductOfferingQualifications based on a set of criteria",
    "description": "The Buyer requests a list of POQs (in any state) from the Seller based on a set of POQ filter criteria.  For each POQ returned, the Seller also provides a POQ Identifier that uniquely identifies this POQ within the Seller. ",
    "deprecated": false,
    
      "parameters": [
      
    {
    "name": "state",
    "required": false,
    "in": "query",
    "description": "State of the POQ to be retrieeved",
    
    "type": "string"
    },
    {
    "name": "projectId",
    "required": false,
    "in": "query",
    "description": "Identifier of buyer project associated to POQ",
    
    "type": "string"
    },
    {
    "name": "requestedResponseDate.gt",
    "required": false,
    "in": "query",
    "description": "POQ expected response date is after this date",
    
    "type": "string",
    "format": "date-time"
    },
    {
    "name": "requestedResponseDate.lt",
    "required": false,
    "in": "query",
    "description": "POQ expected response date is before this date",
    
    "type": "string",
    "format": "date-time"
    },
    {
    "name": "offset",
    "required": false,
    "in": "query",
    "description": "Requested index for start of resources to be provided in response requested by client",
    
    "type": "string"
    },
    {
    "name": "limit",
    "required": false,
    "in": "query",
    "description": "Requested number of resources to be provided in response requested by client",
    
    "type": "string"
    }
      ],
    "responses": {
    "200": {
    "description": "Ok",
    "schema": {
      "type": "array",
      "items": {
    "$ref": "#/definitions/ProductOfferingQualification_Find"
      }
    },
    "headers": {
    "X-Total-Count": {
    "description": "The total number of matching resources",
    "type": "integer",
    "format": "int32"
    },
    "X-Result-Count": {
    "description": "The number of resources retrieved in the response",
    "type": "integer",
    "format": "int32"
    }
    }
    
    },
      "400": {
      
          "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "401": {
      
          "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "403": {
      
          "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "404": {
      
          "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "408": {
      
          "description": "Request Time-out\n\nList of supported error codes:\n- 63: Request time-out",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "422": {
      
          "description": "Unprocessable entity\n\nFunctional error\n\n\n \n\n\n - code: 100\nmessage: Too many records retrieved - please restrict requested parameter value(s)\ndescription: ",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "503": {
      
          "description": "Service Unavailable\n\n",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      }
    }
    }
      },
      "/productOfferingQualification/{ProductOfferingQualificationId}": {
    "get": {
    "tags": [
    "ProductOfferingQualification"   
    ],
        "produces": [
	    "application/json;charset=utf-8"
      ],
    "operationId": "productOfferingQualificationGet",
    "summary": "Get a ProductOfferingQualification based on its id",
    "description": "The Buyer requests the full details of a single Product Offering Qualification based on a POQ identifier. ",
    "deprecated": false,
    
      "parameters": [
      
    {
    "name": "ProductOfferingQualificationId",
    "required": true,
    "in": "path",   
    "description": "",
    "type": "string"
    }     
    
      ],
    "responses": {
    "200": {
    "description": "Ok",
    "schema": {
    "$ref": "#/definitions/ProductOfferingQualification"
    }
    
    },
      "400": {
      
          "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "401": {
      
          "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "403": {
      
          "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "404": {
      
          "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "408": {
      
          "description": "Request Time-out\n\nList of supported error codes:\n- 63: Request time-out",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "422": {
      
          "description": "Unprocessable entity\n\nFunctional error",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "503": {
      
          "description": "Service Unavailable\n\n",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      }
    }
    }
      },
      "/hub": {
    "post": {
    "tags": [
    "Hub"   
    ],
        "consumes": [
	    "application/json;charset=utf-8"
    ],
        "produces": [
	    "application/json;charset=utf-8"
      ],
    "operationId": "hubCreate",
    "summary": "hubCreate",
    "description": "A request initiated by the Buyer to instruct the Seller to send notifications of POQ state changes in the event the Seller uses the Deferred Response pattern to respond to a Create Product Offering Qualifica-tion request.",
    "deprecated": false,
    
      "parameters": [
      
    {
    "name": "Hub",
    "required": true,
    "in": "body",
    "description": "",
    "schema": {
    "$ref": "#/definitions/HubInput"
      }
    }
      ],
    "responses": {
    "201": {
    "description": "Created",
    "schema": {
    "$ref": "#/definitions/Hub"
    }
    
    },
      "400": {
      
          "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "401": {
      
          "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "403": {
      
          "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "404": {
      
          "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "408": {
      
          "description": "Request Time-out\n\nList of supported error codes:\n- 63: Request time-out",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "422": {
      
          "description": "Unprocessable entity\n\nFunctional error",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "503": {
      
          "description": "Service Unavailable\n\n",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      }
    }
    },
    "get": {
    "tags": [
    "Hub"   
    ],
        "produces": [
	    "application/json;charset=utf-8"
      ],
    "operationId": "hubFind",
    "summary": "hubFind",
    "description": "This operation retrieves a set of hubs.",
    "deprecated": false,
    
    "responses": {
    "200": {
    "description": "Ok",
    "schema": {
      "type": "array",
      "items": {
    "$ref": "#/definitions/Hub"
      }
    }
    
    },
      "400": {
      
          "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "401": {
      
          "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "403": {
      
          "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "404": {
      
          "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "408": {
      
          "description": "Request Time-out\n\nList of supported error codes:\n- 63: Request time-out",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "422": {
      
          "description": "Unprocessable entity\n\nFunctional error",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "503": {
      
          "description": "Service Unavailable\n\n",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      }
    }
    }
      },
      "/hub/{HubId}": {
    "delete": {
    "tags": [
    "Hub"   
    ],
    "operationId": "hubDelete",
    "summary": "hubDelete",
    "description": "This operation is used to delete a hub.",
    "deprecated": false,
    
      "parameters": [
      
    {
    "name": "HubId",
    "required": true,
    "in": "path",   
    "description": "",
    "type": "string"
    }     
    
      ],
    "responses": {
    "204": {
    "description": "No Content"
    
    },
      "400": {
      
          "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "401": {
      
          "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "403": {
      
          "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "404": {
      
          "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "408": {
      
          "description": "Request Time-out\n\nList of supported error codes:\n- 63: Request time-out",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "422": {
      
          "description": "Unprocessable entity\n\nFunctional error",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      },
      "503": {
      
          "description": "Service Unavailable\n\n",
      "schema": {
      
    "$ref": "#/definitions/ErrorRepresentation"
      }
      }
    }
    }
      }
    },
    "definitions": {
    
    "ServiceabilityColor": {
    "description": "A color that indicates confidence to service the request.",
    
      "type": "string",
      "enum": [
        "green",
        "red",
        "yellow"]
    
    },
    "ProductOfferingQualificationStateType": {
    "description": "These values represent the valid states through which the product offering qualification can transition",
    
      "type": "string",
      "enum": [
        "done",
        "terminatedWithError.unableToProvide",
        "terminatedWithError.insufficientInformationProvided",
        "inProgress"]
    
    },
    "TimeUnit": {
    "description": "Represents a unit of time.",
    
      "type": "string",
      "enum": [
        "calendarDays",
        "calendarHours",
        "calendarMinutes",
        "businessDays",
        "businessHours",
        "businessMinutes"]
    
    },
    "RelationshipType": {
    "description": "Relationship type to be used between POQ item or product",
    
      "type": "string",
      "enum": [
        "reliesOn",
        "bundled",
        "comesFrom"]
    
    },
    "ProductActionType": {
    "description": "Action to be performed on the Product",
    
      "type": "string",
      "enum": [
        "add",
        "change",
        "remove",
        "noChange"]
    
    },
    "ProductOfferingQualificationItemStateType": {
    "description": "POQ item states - The specific states are managed by the Seller based on its processing and/or based on Buyer's action.",
    
      "type": "string",
      "enum": [
        "done",
        "terminatedWithError.unableToProvide",
        "terminatedWithError.insufficientInformationProvided",
        "inProgress"]
    
    },    

    "ErrorRepresentation": {
    "description": "Standard Class used to describe API response error",

    
    "required": [
    
      "code",
      "message"
    ],
    "type": "object",
    "properties": {
    "code": {
    "description": "Application related code (as defined in the API or from a common list)",
    "type": "integer",
    "format": "int32"
    },
    "reason": {
    "description": "Text that explains the reason for error. This can be shown to a client user.",
    "type": "string"
    },
    "message": {
    "description": "Text that provide mode details and corrective actions related to the error. This can be shown to a client user.",
    "type": "string"
    },
    "status": {
    "description": "Http error code extension like 400-2 for example",
    "type": "string"
    },
    "referenceError": {
    "description": "url pointing to documentation describing the error",
    "type": "string"
    },
    "@type": {
    "description": "When sub-classing, this defines the sub-class entity name",
    "type": "string"
    },
    "@schemaLocation": {
    "description": "Link to the schema describing the REST resource Used to extend Error class",
    "type": "string"
    }
    }
    
    },    

    "TerminationError": {
    "description": "Termination error may be provided if seller is unable to perform qualification",

    
    "type": "object",
    "properties": {
    "id": {
    "description": "Id of the termination error",
    "type": "string"
    },
    "value": {
    "description": "Value (text) for the termination error",
    "type": "string"
    }
    }
    
    },    

    "RelatedParty": {
    "description": "An entity or organization that is involved in the product offering qualification. It may be the \"Buyer\", the \"Seller\", or other related party",

    
    "required": [
    
      "name",
      "role",
      "number"
    ],
    "type": "object",
    "properties": {
    "id": {
    "description": "Id of the party",
    "type": "string",
    "maxLength": 45
    },
    "name": {
    "description": "Name of the party",
    "type": "string"
    },
    "role": {
    "description": "Role for this party for this product offering qualification  (as “Technical contact” or “Implementation Contact” for example)",
    "type": "array",
    "items": {
    "type": "string"
    }
    },
    "number": {
    "description": "Party phone number",
    "type": "string"
    },
    "numberExtension": {
    "description": "Party phone number extension",
    "type": "string"
    },
    "emailAddress": {
    "description": "Party email address",
    "type": "string"
    },
    "@type": {
    "description": "When sub-classing, this defines the sub-class entity name",
    "type": "string"
    },
    "@referredType": {
    "description": "The actual type of the target instance when needed for disambiguation.",
    "type": "string"
    }
    }
    
    },    

    "ProductOfferingRef": {
    "description": "The commercial and technical details of a Product sold by a particular Seller.  A Product Offering defines all of the commercial terms and, through association with a particular Product Specification, defines all the technical attributes and behaviors of the Product. A Product Offering may constrain the allowable set of configurable technical attributes and/or behaviors specified in the associated Product Specification.",

    
    "type": "object",
    "properties": {
    "id": {
    "description": "id of a productOffering",
    "type": "string"
    },
    "@referredType": {
    "description": "The actual type of the target instance when needed for disambiguation.",
    "type": "string"
    }
    }
    
    },    

    "Describing": {
    "description": "Target to the schema describing the product spec resource (and type)",

    
    "type": "object",
    "properties": {
    "@type": {
    "description": "Indicates the (class) type of resource",
    "type": "string"
    },
    "@schemaLocation": {
    "description": "This field provided a link to the schema describing this REST resource.",
    "type": "string"
    }
    }
    
    },    

    "AlternateProductProposal": {
    "description": "If in the request the buyer has requested to have alternate product proposals, then this class represents these proposals.",

    
    "required": [
    
      "id"
    ],
    "type": "object",
    "properties": {
    "id": {
    "description": "Identifier of the Product Offering Qualification alternate proposal",
    "type": "string"
    },
    "productSpecification": {
    
    "$ref": "#/definitions/ProductSpecificationRef"
    },
    "eligibleProductOffering": {
    
    "type": "array",
    "items": {
    "$ref": "#/definitions/ProductOfferingRef"
    }
    },
    "installationInterval": {
    
    "$ref": "#/definitions/TimeInterval"
    },
    "@type": {
    "description": "Technical attribute to extend the class.",
    "type": "string"
    }
    }
    
    },    

    "ProductRelationship": {
    "description": "Indicates a relationship between products.",

    
    "required": [
    
      "type",
      "product"
    ],
    "type": "object",
    "properties": {
    "type": {
    
    "$ref": "#/definitions/RelationshipType"
    },
    "product": {
    
    "$ref": "#/definitions/ProductRef"
    }
    }
    
    },    

    "ProductSpecificationRef": {
    "description": "A structured set of well-defined technical attributes and/or behaviors that are used to construct a Product Offering for sale to a market.",

    
    "type": "object",
    "properties": {
    "id": {
    "description": "Unique identifier of the product specification",
    "type": "string"
    },
    "describing": {
    
    "$ref": "#/definitions/Describing"
    },
    "@referredType": {
    "description": "The actual type of the target instance when needed for disambiguation.",
    "type": "string"
    }
    }
    
    },    

    "Product": {
    "description": "One or more services sold to a Buyer by a Seller.  A particular Product Offering defines the technical and commercial attributes and behaviors of a Product.",

    
    "type": "object",
    "properties": {
    "id": {
    "description": "Unique identifier of the product",
    "type": "string"
    },
    "href": {
    "description": "Link to product",
    "type": "string"
    },
    "productRelationship": {
    
    "type": "array",
    "items": {
    "$ref": "#/definitions/ProductRelationship"
    }
    },
    "productSpecification": {
    
    "$ref": "#/definitions/ProductSpecificationRef"
    },
    "place": {
    
    "type": "array",
    "items": {
    "$ref": "#/definitions/RelatedPlaceReforValue"
    }
    },
    "characteristics": {
      "$ref": "#/definitions/ProductCharacteristics"
    },
    "@type": {
      "description": "When sub-classing, this defines the sub-class entity name",
      "type": "string"
    }
    }
    },
    "ProductCharacteristics": {
      "title": "ProductCharacteristics",
      "type": "object",
      "discriminator": "@type",
      "properties": {
        "@type": {
          "type": "string"
        },
        "@schemaLocation": {
          "type": "string"
        }
      },
      "required": [
        "@type"
      ]
    },

    "ProductOfferingQualificationItem": {
    "description": "An individual article included in a POQ that describes a Product of a particular type (Product Offering) being delivered to a specific geographical location.  The objective is to determine if it is feasible for the Seller to deliver this item as described and for the Seller to inform the Buyer of the estimated time interval to complete this delivery.",

    
    "required": [
    
      "id",
      "state",
      "action"
    ],
    "type": "object",
    "properties": {
    "id": {
    "description": "Id of this POQ item",
    "type": "string"
    },
    "state": {
    
    "$ref": "#/definitions/ProductOfferingQualificationItemStateType"
    },
    "action": {
    
    "$ref": "#/definitions/ProductActionType"
    },
    "serviceabilityConfidence": {
    
    "$ref": "#/definitions/ServiceabilityColor"
    },
    "serviceConfidenceReason": {
    "description": "A description of the reason a particular color is being provided. This may include a specific standard reason codes and descriptions.",
    "type": "string"
    },
    "installationInterval": {
    
    "$ref": "#/definitions/TimeInterval"
    },
    "guaranteedUntilDate": {
    "description": "Date until seller is guaranted the qualification result.",
    "type": "string",
    "format": "date-time"
    },
    "product": {
    
    "$ref": "#/definitions/Product"
    },
    "productOffering": {
    
    "$ref": "#/definitions/ProductOfferingRef"
    },
    "relatedParty": {
    
    "type": "array",
    "items": {
    "$ref": "#/definitions/RelatedParty"
    }
    },
    "eligibleProductOffering": {
    
    "type": "array",
    "items": {
    "$ref": "#/definitions/ProductOfferingRef"
    }
    },
    "productOfferingQualificationItemRelationship": {
    
    "type": "array",
    "items": {
    "$ref": "#/definitions/ProductOfferingQualificationItemRelationship"
    }
    },
    "alternateProductProposal": {
    
    "type": "array",
    "items": {
    "$ref": "#/definitions/AlternateProductProposal"
    }
    },
    "terminationError": {
    
    "type": "array",
    "items": {
    "$ref": "#/definitions/TerminationError"
    }
    },
    "stateChange": {
    
    "type": "array",
    "items": {
    "$ref": "#/definitions/StateChange"
    }
    },
    "@type": {
    "description": "When sub-classing, this defines the sub-class entity name",
    "type": "string"
    }
    }
    
    },    

    "ProductOfferingQualification": {
    "description": "A grouping of POQ Items formulated into a request made by a Buyer to a Seller",

    
    "required": [
    
      "id",
      "state",
      "relatedParty",
      "productOfferingQualificationItem"
    ],
    "type": "object",
    "properties": {
    "id": {
    "description": "The Serviceability Request's unique identifier.",
    "type": "string"
    },
    "href": {
    "description": "Link to this POQ resource",
    "type": "string"
    },
    "instantSyncQualification": {
    "description": "If this flag is set to Yes, Buyer requests to have instant qualificationto be provided in operation POST response",
    "type": "boolean",
    
        "default": false
    },
    "state": {
    
    "$ref": "#/definitions/ProductOfferingQualificationStateType"
    },
    "projectId": {
    "description": "This value MAY be assigned by the Buyer/Seller to identify a project the serviceability request is associated with.",
    "type": "string"
    },
    "provideAlternative": {
    "description": "This Boolean allows requester (buyer) to indicate if he is willing to get alternate proposal if requested product not available.",
    "type": "boolean"
    },
    "requestedResponseDate": {
    "description": "Corresponds to desiredResponseDate - The date a response for the service request is desired.",
    "type": "string",
    "format": "date-time"
    },
    "expectedResponseDate": {
    "description": "The date the seller is expected to provide qualification result.",
    "type": "string",
    "format": "date-time"
    },
    "effectiveQualificationCompletionDate": {
    "description": "Effective date seller provides qualification result.",
    "type": "string",
    "format": "date-time"
    },
    "relatedParty": {
    
    "type": "array",
    "items": {
    "$ref": "#/definitions/RelatedParty"
    }
    },
    "productOfferingQualificationItem": {
    
    "type": "array",
    "items": {
    "$ref": "#/definitions/ProductOfferingQualificationItem"
    },
    "minItems": 1
    },
    "stateChange": {
    
    "type": "array",
    "items": {
    "$ref": "#/definitions/StateChange"
    }
    },
    "@type": {
    "description": "When sub-classing, this defines the sub-class entity name",
    "type": "string"
    },
    "@schemaLocation": {
    "description": "Technical attribute to extend the class",
    "type": "string"
    }
    }
    
    },    

    "ProductOfferingQualificationItemRelationship": {
    "description": "The relationship between product offering qualification items that can be used to validate business rules between POQ Items",

    
    "required": [
    
      "type",
      "id"
    ],
    "type": "object",
    "properties": {
    "type": {
    
    "$ref": "#/definitions/RelationshipType"
    },
    "id": {
    "description": "id of the targeted POQ item",
    "type": "string"
    }
    }
    
    },    

    "ProductOfferingQualificationItem_Create": {
    "description": "This structure serves as a request for a product offering qualification item\nAn individual article included in a POQ that describes a Product of a particular type (Product Offering) being delivered to a specific geographical location.  The objective is to determine if it is feasible for the Seller to deliver this item as described and for the Seller to inform the Buyer of the estimated time interval to complete this delivery.",

    
    "required": [
    
      "id",
      "product"
    ],
    "type": "object",
    "properties": {
    "id": {
    "description": "Id of the productOfferingQualification item.\nThis id must be unique within POQ create request",
    "type": "string"
    },
    "action": {
    
    "$ref": "#/definitions/ProductActionType"
    },
    "product": {
    
    "$ref": "#/definitions/Product"
    },
    "productOffering": {
    
    "$ref": "#/definitions/ProductOfferingRef"
    },
    "productOfferingQualificationItemRelationship": {
    
    "type": "array",
    "items": {
    "$ref": "#/definitions/ProductOfferingQualificationItemRelationship"
    }
    },
    "relatedParty": {
    
    "type": "array",
    "items": {
    "$ref": "#/definitions/RelatedParty"
    }
    },
    "@type": {
    "description": "When sub-classing, this defines the sub-class entity name",
    "type": "string"
    }
    }
    
    },    

    "ProductOfferingQualification_Create": {
    "description": "This structure serves as a request for a product offering qualification.\nA POQ is a grouping of POQ Items formulated into a request made by a Buyer to a Seller",

    
    "required": [
    
      "relatedParty",
      "productOfferingQualificationItem"
    ],
    "type": "object",
    "properties": {
    "provideAlternative": {
    "description": "This Boolean allows requester (buyer) to indicate if he is willing to get alternate proposal if requested product not available.",
    "type": "boolean",
    
        "default": false
    },
    "requestedResponseDate": {
    "description": "Corresponds to desiredResponseDate - The date a response for the service request is desired.",
    "type": "string",
    "format": "date"
    },
    "instantSyncQualification": {
    "description": "If this flag is set to Yes, Buyer requests to have instant qualification to be provided in operation POST response",
    "type": "boolean",
    
        "default": false
    },
    "projectId": {
    "description": "This value MAY be assigned by the Buyer/Seller to identify a project the qualification request is associated with.",
    "type": "string"
    },
    "relatedParty": {
    
    "type": "array",
    "items": {
    "$ref": "#/definitions/RelatedParty"
    }
    },
    "productOfferingQualificationItem": {
    
    "type": "array",
    "items": {
    "$ref": "#/definitions/ProductOfferingQualificationItem_Create"
    },
    "minItems": 1
    },
    "@type": {
    "description": "When sub-classing, this defines the sub-class entity name",
    "type": "string"
    },
    "@schemaLocation": {
    "description": "Technical attribute to extend this class",
    "type": "string"
    }
    }
    
    },    

    "TimeInterval": {
    "description": "A time interval, e.g.  3 hours, or 5 days.",

    
    "required": [
    
      "amount",
      "timeUnit"
    ],
    "type": "object",
    "properties": {
    "amount": {
    "description": "Amount",
    "type": "integer",
    "format": "int32"
    },
    "timeUnit": {
    
    "$ref": "#/definitions/TimeUnit"
    }
    }
    
    },    

    "ProductOfferingQualification_Find": {
    "description": "This class is used to describe attribute to be used for requesting POQ list (used in the GET by list)",

    
    "type": "object",
    "properties": {
    "id": {
    "description": "The Serviceability Request's unique identifier.",
    "type": "string"
    },
    "state": {
    
    "$ref": "#/definitions/ProductOfferingQualificationStateType"
    },
    "requestedResponseDate": {
    "description": "Corresponds to desiredResponseDate - The date a response for the service request is desired.",
    "type": "string",
    "format": "date"
    },
    "projectId": {
    "description": "This value MAY be assigned by the Buyer/Seller to identify a project the serviceability request is associated with.",
    "type": "string"
    }
    }
    
    },    

    "RelatedPlaceReforValue": {
    "description": "Place defines the places where the products qualification must be done.",

    
      "discriminator": "@type",
    
    "required": [
    
      "role"
    ],
    "type": "object",
    "properties": {
    "id": {
    "description": "id of this place",
    "type": "string",
    "maxLength": 45
    },
    "href": {
    "description": "href to this place resource",
    "type": "string"
    },
    "role": {
    "description": "Role of this place",
    "type": "string"
    },
    "@type": {
    "description": "When sub-classing, this defines the sub-class entity name.\nUsed when place is described by value (litterally)\nCould be valued to FormattedAddress, FieldedAddress,  GeographicLocation or ReferencedAddress",
    "type": "string"
    },
    "@referredType": {
    "description": "The actual type of the target instance when needed for disambiguation.\nUsed when place is described by reference\n@referredType could be valued to FormattedAddress, FieldedAddress, GeographicSite, GeographicLocation or ReferencedAddress",
    "type": "string"
    }
    }
    
    },    

    "Hub": {
    "description": "This resource is used to manage notification subscription.",

    
    "required": [
    
      "id",
      "callback",
      "query"
    ],
    "type": "object",
    "properties": {
    "id": {
    "description": "id of the Hub",
    "type": "string"
    },
    "callback": {
    "description": "This callback address is an url. the norification will be sent to this url address",
    "type": "string"
    },
    "query": {
    "description": "This attribute is used to define notification type. Example: \",\"query\":”eventType = ProductOfferingQualificationStateChangeNotification”}",
    "type": "string"
    }
    }
    
    },    

    "HubInput": {
    "description": "This class is used to request a HUB creation - Used in the POST operation.",

    
    "required": [
    
      "callback",
      "query"
    ],
    "type": "object",
    "properties": {
    "callback": {
    "description": "This attribute is the callback url where event will be sent when occurs, for instance an url http://yourdomain/listener/api/v1/event",
    "type": "string"
    },
    "query": {
    "description": "This attribute is used to define notification type. Example: \",\"query\":”eventType = ProductOfferingQualificationStateChangeNotification”}",
    "type": "string"
    }
    }
    
    },    

    "ProductRef": {
    "description": "Reference to an existing product in the inventory",

    
    "required": [
    
      "id"
    ],
    "type": "object",
    "properties": {
    "id": {
    "description": "id of the product (provided by the seller)",
    "type": "string"
    },
    "href": {
    "description": "hyerplink to the product in the inventory",
    "type": "string"
    },
    "buyerProductId": {
    "description": "Targeted Buyer product id - Informative",
    "type": "string"
    },
    "@referredType": {
    "description": "The actual type of the target instance when needed for disambiguation.",
    "type": "string"
    }
    }
    
    },    

    "SubUnit": {
    "description": "",

    
    "required": [
    
      "subUnitType",
      "subUnitIdentifier"
    ],
    "type": "object",
    "properties": {
    "subUnitType": {
    "description": "The type of subunit e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF.",
    "type": "string",
    "maxLength": 25
    },
    "subUnitIdentifier": {
    "description": "The discriminator used for the subunit, often just a simple number but may also be a range.",
    "type": "string",
    "maxLength": 10
    }
    }
    
    },    

    "GeographicSubAddress": {
    "description": "It is used for addressing within a property in an urban area (country properties are often defined differently). It may refer to a building, a building cluster, or a floor of a multistory building.",

    
    "type": "object",
    "properties": {
    "id": {
    "description": "Unique Identifier of the subAddress",
    "type": "string"
    },
    "subUnit": {
    
    "type": "array",
    "items": {
    "$ref": "#/definitions/SubUnit"
    }
    },
    "levelType": {
    "description": "Describes level types within a building",
    "type": "string",
    "maxLength": 25
    },
    "levelNumber": {
    "description": "Used where a level type may be repeated e.g. BASEMENT 1, BASEMENT 2",
    "type": "string",
    "maxLength": 25
    },
    "buildingName": {
    "description": "Allows for buildings that have well-known names",
    "type": "string",
    "maxLength": 60
    },
    "privateStreetNumber": {
    "description": "Private streets numbers internal to a private street",
    "type": "string",
    "maxLength": 10
    },
    "privateStreetName": {
    "description": "\"Private streets internal to a property (e.g. a university) may have internal names that are not recorded by the land title office",
    "type": "string",
    "maxLength": 60
    },
    "@type": {
    "description": "When sub-classing, this defines the sub-class entity name",
    "type": "string"
    },
    "@schemaLocation": {
    "description": "Technical attribute to exend this class if needed (JSON schema locator)",
    "type": "string"
    }
    }
    
    },    

    "FieldedAddress": {
    "description": "A type of Address that has a discrete field and value for each type of boundary or identifier down to the lowest level of detail. For example “street number” is one field, “street name” is another field, etc.",

    
      "allOf": [
      {
      "$ref": "#/definitions/RelatedPlaceReforValue"
      },
      {
    
    "required": [
    
      "streetType",
      "city",
      "stateOrProvince",
      "postcode",
      "country"
    ],
    "type": "object",
    "properties": {
    "streetNr": {
    "description": "Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses",
    "type": "string",
    "maxLength": 10
    },
    "streetNrSuffix": {
    "description": "The first street number suffix",
    "type": "string",
    "maxLength": 10
    },
    "streetNrLast": {
    "description": "Last number in a range of street numbers allocated to a property",
    "type": "string",
    "maxLength": 10
    },
    "streetNrLastSuffix": {
    "description": "Last street number suffix for a ranged address",
    "type": "string",
    "maxLength": 10
    },
    "streetName": {
    "description": "Name of the street or other street type",
    "type": "string",
    "maxLength": 60
    },
    "streetType": {
    "description": "Alley, avenue, boulevard, brae, crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf",
    "type": "string",
    "maxLength": 25
    },
    "streetSuffix": {
    "description": "A modifier denoting a relative direction",
    "type": "string",
    "maxLength": 2
    },
    "locality": {
    "description": "The locality that the address is in",
    "type": "string",
    "maxLength": 50
    },
    "city": {
    "description": "The city that the address is in",
    "type": "string",
    "maxLength": 50
    },
    "stateOrProvince": {
    "description": "The State or Province that the address is in",
    "type": "string",
    "maxLength": 50
    },
    "postcode": {
    "description": "Descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also known as zipcode)",
    "type": "string",
    "maxLength": 6
    },
    "postcodeExtension": {
    "description": "An extension of a postal code. E.g. the part following the dash in an american urban property address",
    "type": "string",
    "maxLength": 4
    },
    "country": {
    "description": "Country that the address is in",
    "type": "string",
    "maxLength": 50
    },
    "geographicSubAddress": {
    
    "$ref": "#/definitions/GeographicSubAddress"
    }
    }
    
      }
      ]
    },    

    "FormattedAddress": {
    "description": "A type of Address that has discrete fields for each type of boundary or identifier with the exception of street and more specific location details, which are combined into a maximum of two strings based on local postal addressing conventions.",

    
      "allOf": [
      {
      "$ref": "#/definitions/RelatedPlaceReforValue"
      },
      {
    
    "required": [
    
      "addrLine1",
      "city",
      "stateOrProvince",
      "postcode",
      "country"
    ],
    "type": "object",
    "properties": {
    "addrLine1": {
    "description": "The first address line in a formatted address",
    "type": "string",
    "maxLength": 25
    },
    "addrLine2": {
    "description": "The second address line in a formatted address",
    "type": "string",
    "maxLength": 25
    },
    "locality": {
    "description": "An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi rural in nature",
    "type": "string",
    "maxLength": 50
    },
    "city": {
    "description": "The city that the address is in",
    "type": "string",
    "maxLength": 50
    },
    "stateOrProvince": {
    "description": "The State or Province that the address is in",
    "type": "string",
    "maxLength": 50
    },
    "postcode": {
    "description": "Descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also known as ZIP code)",
    "type": "string",
    "maxLength": 6
    },
    "postcodeExtension": {
    "description": "An extension of a postal code. E.g. the part following the dash in an American urban property address",
    "type": "string",
    "maxLength": 4
    },
    "country": {
    "description": "Country that the address is in",
    "type": "string",
    "maxLength": 50
    }
    }
    
      }
      ]
    },    

    "ReferencedAddress": {
    "description": "A globally unique identifier controlled by a generally accepted independent administrative authority that specifies a fixed geographical location.",

    
      "allOf": [
      {
      "$ref": "#/definitions/RelatedPlaceReforValue"
      },
      {
    
    "required": [
    
      "referenceType",
      "referenceId"
    ],
    "type": "object",
    "properties": {
    "referenceType": {
    "description": "The type of the reference. For North American providers this would normally be CLLI",
    "type": "string"
    },
    "referenceId": {
    "description": "A reference to an address by id; this would include such things as CLLI Codes, or Seller-assigned address identifiers",
    "type": "string"
    }
    }
    
      }
      ]
    },    

    "GeographicPoint": {
    "description": "",

    
    "required": [
    
      "latitude",
      "longitude"
    ],
    "type": "object",
    "properties": {
    "latitude": {
    "description": "The latitude expressed in decimal degrees format",
    "type": "string"
    },
    "longitude": {
    "description": "The longitude expressed in decimal degrees format",
    "type": "string"
    }
    }
    
    },    

    "GeographicLocation": {
    "description": "A set of coordinates (typically including latitude and longitude) that describes a particular loca-tion on earth.",

    
      "allOf": [
      {
      "$ref": "#/definitions/RelatedPlaceReforValue"
      },
      {
    
    "required": [
    
      "spatialRef",
      "geographicPoint"
    ],
    "type": "object",
    "properties": {
    "spatialRef": {
    "description": "The spatial reference system used to determine the coordinates",
    "type": "string"
    },
    "geographicPoint": {
    
    "$ref": "#/definitions/GeographicPoint"
    }
    }
    
      }
      ]
    },    

    "StateChange": {
    "description": "Holds the state notification reasons and associated date the state changed, populated by the server",

    
    "type": "object",
    "properties": {
    "changeDate": {
    "description": "",
    "type": "string",
    "format": "date-time"
    },
    "changeReason": {
    "description": "",
    "type": "string"
    },
    "state": {
    
    "$ref": "#/definitions/ProductOfferingQualificationStateType"
    }
    }
    
    }
    }
    }
  