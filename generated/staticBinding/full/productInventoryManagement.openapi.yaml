openapi: 3.0.1
info:
  description: >
    **This file forms part of MEF W116**


    **This specification represents MEF work in progress and is subject to
    change.** 


    The scope of this MEF API is to provide the ability for a Service Provider's
    (Buyer)

    operational support system to retrieve from a Partner's (Seller) Inventory
    management

    system a set of product instances based upon a filter of product inventory
    attributes,

    or a specific product instance based upon a product identifier.


    Copyright 2021 MEF Forum and its contributors.


    This file includes content based on the TM Forum Product Inventory
    Management API (TMF637 v4.0.0) available at
    https://github.com/tmforum-apis/TMF637_ProductInventory, which is licensed
    by the TM Forum under the Apache License version 2.0. Such content has been
    modified by the MEF Forum and its contributors.
  title: Product Inventory Management
  version: 7.0.0-RC
servers:
  - url: "https://serverRoot/mefApi/sonata/productInventory/v7/"
tags:
  - name: product
  - name: events subscription
paths:
  /product:
    get:
      description: This operation list or find Product entities
      operationId: listProduct
      parameters:
        - description: The status of the product
          explode: true
          in: query
          name: status
          required: false
          schema:
            enum:
              - active
              - active.pendingChange
              - cancelled
              - pendingActive
              - pendingTerminate
              - suspended
              - suspendedPendingTerminate
              - terminated
            type: string
          style: form
        - description: A reference to a product spec by id
          explode: true
          in: query
          name: productSpecificationId
          required: false
          schema:
            type: string
          style: form
        - description: A reference to a product offering by id
          explode: true
          in: query
          name: productOfferingId
          required: false
          schema:
            type: string
          style: form
        - description: A reference to the externalId provided in the order
          explode: true
          in: query
          name: externalId
          required: false
          schema:
            type: string
          style: form
        - description: A site identifier which is associated to the product
          explode: true
          in: query
          name: geographicalSiteId
          required: false
          schema:
            type: string
          style: form
        - description: >-
            This criteria allows to retrieve all Product records with a Product
            Relationship to a specified Product.

            E.g. All Products related to Product with ID 5
          explode: true
          in: query
          name: relatedProductId
          required: false
          schema:
            type: string
          style: form
        - description: The Billing Account associated with the Product.
          explode: true
          in: query
          name: billingAccountId
          required: false
          schema:
            type: string
          style: form
        - description: Identifies Product Order associated with the Product
          explode: true
          in: query
          name: productOrderId
          required: false
          schema:
            type: string
          style: form
        - description:
            Less than the date that is the initial install date for the Product
          explode: true
          in: query
          name: startDate.lt
          required: false
          schema:
            format: date-time
            type: string
          style: form
        - description: >-
            Greater than the date that is the initial install date for the
            Product
          explode: true
          in: query
          name: startDate.gt
          required: false
          schema:
            format: date-time
            type: string
          style: form
        - description: >-
            Less than date that the last change affecting this Product was
            completed
          explode: true
          in: query
          name: lastUpdateDate.lt
          required: false
          schema:
            format: date-time
            type: string
          style: form
        - description: >-
            Greater than the date that the last change affecting this Product
            was completed
          explode: true
          in: query
          name: lastUpdateDate.gt
          required: false
          schema:
            format: date-time
            type: string
          style: form
        - description: >-
            The unique identifier of the organization that is acting as the a
            Buyer. MUST be specified in the request only when the requester
            represents more than one Buyer.

            Reference: MEF 81 (Sn 8.3)
          explode: true
          in: query
          name: buyerId
          required: false
          schema:
            type: string
          style: form
        - description: >-
            The unique identifier of the organization that is acting as the
            Seller. MUST be specified in the request only when responding
            entity  represents more than one Seller.

            Reference: MEF 81 (Sn 8.3)
          explode: true
          in: query
          name: sellerId
          required: false
          schema:
            type: string
          style: form
        - description: >-
            Requested index for start of item to be provided in response
            requested by client. Note that the index starts with "0".
          explode: true
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
          style: form
        - description: >-
            Requested number of items to be provided in response requested by
            client
          explode: true
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
          style: form
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                items:
                  $ref: "#/components/schemas/MEFProduct_Find"
                type: array
          description: "OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)"
          headers:
            X-Pagination-Throttled:
              description: >
                Used to indicate that result page was throttled to maximum
                possible size  and there are additional results that can be
                fetched
              explode: false
              schema:
                type: boolean
              style: simple
            X-Total-Count:
              description: >
                The total number of matching items. E.g. if there are 50
                matching items in total, but the request has offset=10 and
                limit=10, then the X-Total-Count is 50.
              explode: false
              schema:
                type: integer
              style: simple
            X-Result-Count:
              description: The number of items included in the response
              explode: false
              schema:
                type: integer
              style: simple
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error400"
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error401"
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error403"
          description: Forbidden
        "422":
          content:
            application/json;charset=utf-8:
              schema:
                items:
                  $ref: "#/components/schemas/Error422"
                type: array
          description:
            Unprocessable entity due to the business validation problems
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error500"
          description: Internal Server Error
      summary: List or find Product objects
      tags:
        - product
  "/product/{id}":
    get:
      description: >-
        This operation retrieves a Product entity. Attribute selection is
        enabled for all first level attributes.
      operationId: retrieveProduct
      parameters:
        - description: Identifier of the Product
          explode: false
          in: path
          name: id
          required: true
          schema:
            type: string
          style: simple
        - description: Comma-separated properties to provide in response
          explode: true
          in: query
          name: fields
          required: false
          schema:
            type: string
          style: form
        - description: >-
            The unique identifier of the organization that is acting as the a
            Buyer. MUST be specified in the request only when the requester
            represents more than one Buyer.

            Reference: MEF 81 (Sn 8.3)
          explode: true
          in: query
          name: buyerId
          required: false
          schema:
            type: string
          style: form
        - description: >-
            The unique identifier of the organization that is acting as the
            Seller. MUST be specified in the request only when responding
            entity  represents more than one Seller.

            Reference: MEF 81 (Sn 8.3)
          explode: true
          in: query
          name: sellerId
          required: false
          schema:
            type: string
          style: form
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/MEFProduct"
          description: "OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)"
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error400"
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error401"
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error403"
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error404"
          description: Not Found
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error500"
          description: Internal Server Error
      summary: Retrieves a Product by ID
      tags:
        - product
components:
  schemas:
    AccessEline:
      allOf:
        - $ref: "#/components/schemas/MEFProductConfiguration"
        - $ref: "#/components/schemas/AccessElineOvcCommon"
        - properties:
            enniEp:
              description:
                MEF 26.2 sec. 16 - The OVC EP object for the OVC EP at the ENNI
              $ref: "#/components/schemas/AccessElineOvcEndPoint"
            uniEp:
              description:
                MEF 26.2 sec. 16 - The OVC EP object for the OVC EP at the UNI
              $ref: "#/components/schemas/AccessElineOvcEndPoint"
          required:
            - availableMegLevel
            - cTagDeiPreservation
            - cTagPcpPreservation
            - carrierEthernetSls
            - ceVlanIdPreservation
            - enniEp
            - frameDisposition
            - listOfClassOfServiceNames
            - maximumFrameSize
            - ovcL2cpAddressSet
            - uniEp
          type: object
      x-discriminator-value: "urn:mef:lso:spec:sonata:access-eline:v2.0.0:inventory"
    AccessElineOvcCommon:
      description: >-
        This class contains all of the Access E-Line OVC Services Attributes
        that are used in all four Business Functions (POQ, Quote, Order,
        Inventory). At this time, this includes all of the Access Eline OVC
        Service Attributes. This class is used to compose the AccessElineOvc
        class which has one file for each Business Function that differ in terms
        of the Service Attributes that are "Required" for the Business Function
        (rather than "Optional").
      properties:
        ceVlanIdPreservation:
          description: >-
            MEF 26.2 sec. 12.7 - Determines whether the C-tag in the Ingress
            Frame is Stripped or Preserved in the Egress Frame. Per MEF 51.1,
            the Operator must support PRESERVE and should support STRIP.
          $ref: "#/components/schemas/CeVlanIdPreservation"
        cTagPcpPreservation:
          $ref: "#/components/schemas/EnabledDisabled"
        cTagDeiPreservation:
          $ref: "#/components/schemas/EnabledDisabled"
        ovcL2cpAddressSet:
          description: >-
            MEF 45 sec. 8.1 and MEF 26.2 sec. 12.16 - The subset of the Bridge
            Reserved Addresses that are Peered or Discarded (i.e. not Passed).
            The value CTB or CTB2 must be used for port-based (private) services
            and CTA for vlan-based (virtual private) services.
          $ref: "#/components/schemas/OvcL2cpAddressSet"
        frameDisposition:
          $ref: "#/components/schemas/FrameDisposition"
        listOfClassOfServiceNames:
          description: >-
            MEF 26.2 sec. 12.12 - The OVC List of Class of Service Names Service
            Attribute is used to specify all of the Class of Service Names
            supported by an OVC. The value of the OVC List of Class of Service
            Names Service Attribute is a non-empty list of Class of Service
            Names (which may include one or more of the CoS Labels defined in
            MEF 23.2).
          items:
            type: string
          minItems: 1
          type: array
          uniqueItems: true
        availableMegLevel:
          description: >-
            MEF 26.2 sec. 12.15 - The lowest MEG level for which SOAM Frames are
            not peered or discarded by the Service Provider. If this attribute
            is NONE there is no such level (that is, SOAM frames at all MEG
            levels may be peered or discarded by the Service Provider). MEF 51.1
            constrains it to 0-6 for Access E-Line.
          $ref: "#/components/schemas/AccessElineOvcCommonAvailableMegLevel"
        carrierEthernetSls:
          description: >-
            MEF 26.2 sec. 12.13 - Technical details of the service level in
            terms of Performance Objectives, agreed between the SP/SO and the
            Operator as part of the Service Level Agreement. For each
            Performance Metric included in the SLS, a Performance Objective must
            be included as well as the parameter values needed for the
            Performance Metric.
          items:
            $ref: "#/components/schemas/CarrierEthernetSls"
          maxItems: 1
          minItems: 0
          type: array
          uniqueItems: true
        maximumFrameSize:
          description: >-
            MEF 26.2 sec. 12.6 - The max length in bytes allowed in a frame
            mapped to an OVC EP associated by the OVC. The length of the frame
            includes all bytes from the start of the destination MAC address
            through the Frame Check Sequence. This must be at least 1526
            (1518+C-tag+S-tag)
          minimum: 1526
          type: integer
      type: object
    AccessElineOvcCommonAvailableMegLevel:
      description: >-
        MEF 26.2 sec. 12.15 - The lowest MEG level for which SOAM Frames are not
        peered or discarded by the Service Provider. If this attribute is NONE
        there is no such level (that is, SOAM frames at all MEG levels may be
        peered or discarded by the Service Provider). MEF 51.1 constrains it to
        0-6 for Access E-Line.
      enum:
        - "0"
        - "1"
        - "2"
        - "3"
        - "4"
        - "5"
        - "6"
      type: string
    AccessElineOvcEndPoint:
      allOf:
        - $ref: "#/components/schemas/AccessElineOvcEpCommon"
      description: >-
        An OVC End Point is a logical entity at a given External Interface that
        is associated with a distinct set of frames passing over that External
        Interface. The OVC End Point schema is included in the definitions
        section of the OVC schema..
      required:
        - aggregationLinkDepth
        - colorMap
        - egressBandwidthProfilePerEndPoint
        - egressBwpPerEgressEquivalenceClassName
        - egressEquivalenceClassIdentifier
        - identifier
        - ingressBandwidthProfilePerClassOfServiceName
        - ingressClassOfServiceMap
        - maintenanceEndPointList
        - maintenanceIntermediatePoint
        - ovcEndPointEnvelopes
        - ovcEndPointMap
        - ovcEndPointPortConversationToAggregationLinkMap
      type: object
    AccessElineOvcEpCommon:
      description: >-
        This class contains all of the Access E-Line OVC End Point Services
        Attributes that are used in all four Business Functions (POQ, Quote,
        Order, Inventory). At this time, this includes all of the Access Eline
        OVC End Point Service Attributes. This class is used to compose the
        AccessElineOvcEndPoint class which has one file for each Business
        Function that differ in terms of the Service Attributes that are
        "Required" for the Business Function (rather than "Optional").
      properties:
        identifier:
          description: >-
            MEF 26.2 sec. 16.1 - The value of theOVC EP ID Service Attribute is
            a string that is used to allow the Subscriber and Service Provider
            to uniquely identify the OVC EP for operations purposes.
          maxLength: 45
          minLength: 1
          pattern: "[ -\x7F]+"
          type: string
        egressEquivalenceClassIdentifier:
          description: >-
            MEF 26.2 sec. 16.9 - The mechanism that allows an Egress Equivalence
            Class Name to be determined for an egress EI Frame. ?F, M, P? where
            F is a protocol field in the egress EI Frame, M is a map that maps
            each possible value of the field F and the absence of the field F to
            an Egress Equivalence Class Name and P is a map of L2CP type to
            Egress Equivalence Class Name.
          $ref: "#/components/schemas/CosFrom"
        aggregationLinkDepth:
          description: >-
            MEF 26.2 sec. 16.14 - A list of 2-tuples {SVID, Depth} that
            indicates the number of ENNI links that can carry ENNI Frames for
            each S-VLAN ID mapped to the OVC End Point. It indicates the level
            of resiliency to use for the SVID at the ENNI.
          items:
            $ref: "#/components/schemas/AggLinkDepth"
          minItems: 0
          type: array
          uniqueItems: true
        maintenanceIntermediatePoint:
          description: >-
            MEF 26.2 sec. 16.16 - Indicates whether a MIP is instantiated at the
            OVC End Point and the MEG Level of the MIP. When the value is not
            None, several parameter values need to be determined as described in
            MEF 30.1.
          $ref: "#/components/schemas/MaintenanceIntermediatePoint"
        ovcEgressMap:
          description: >-
            MEF 26.2 sec. 16.8 - A set of mappings that determine the content of
            the S-Tag or C-Tag of an egress frame at an ENNI or UNI
            (respectively) based on the Class of Service Name and Frame Color of
            the frame. Three forms: (1) CoSName(CN) -> C/S-Tag PCP or Discard,
            (2) CoSName and Frame Color (CC)--> C/S-Tag DEI or Discard, and (3)
            CoSName and Frame Color (CC)--> C/S-Tag PCP or Discard. A fourth
            form is included which combines (1) and (2) because that is a common
            case.
          items:
            $ref: "#/components/schemas/OvcEgressMap"
          maxItems: 1
          minItems: 0
          type: array
          uniqueItems: true
        egressBandwidthProfilePerEndPoint:
          description: >-
            MEF 26.2 sec. 16.11 - Bandwidth Profile Flow parameters for all
            egress Service Frames mapped to the OVC End Point.
          items:
            $ref: "#/components/schemas/BwpFlow"
          maxItems: 1
          minItems: 0
          type: array
          uniqueItems: true
        egressBwpPerEgressEquivalenceClassName:
          description: >-
            MEF 26.2 sec. 16.13 - For each EEC Name listed, Bandwidth Profile
            Flow parameters, for all egress Service Frames mapped to that EEC
            Name at the OVC End Point.
          items:
            $ref: "#/components/schemas/BandwidthProfilePerClassOfServiceName"
          minItems: 0
          type: array
          uniqueItems: false
        ingressBandwidthProfilePerClassOfServiceName:
          description: >-
            MEF 26.2 sec. 16.12 - For each CoS Name listed, Bandwidth Profile
            Flow parameters for all ingress Service Frames mapped to that CoS
            Name at OVC End Point. This bandwidth profile flow is used to police
            at Ingress each CoS in an OVC individually. List of 2-tuples {cos,
            bwpf}.
          items:
            $ref: "#/components/schemas/BandwidthProfilePerClassOfServiceName"
          minItems: 0
          type: array
          uniqueItems: true
        ovcEndPointEnvelopes:
          description: >-
            The Envelopes and Envelope Coupling Flag values to which Bandwidth
            Profile Flows for this OVC End Point can be mapped. Value is list of
            {envelopeID, couplingFlagForIndexZero}. Envelopes listed in the OVC
            End Point Envelopes Service Attribute can be used when all of the
            Bandwidth Profile Flows contained in the Envelope are specific to a
            given OVC End Point. They are specified using one of the following
            OVC End Point Service Attributes: Ingress Bandwidth Profile Per OVC
            End Point Egress Bandwidth Profile Per OVC End Point Ingress
            Bandwidth Profile Per Class of Service Name Egress Bandwidth Profile
            Per Egress Equivalence Class Name  To create an Envelope containing
            Bandwidth Profile Flows for more than one OVC End Point, the UNI or
            ENNI Envelopes Service Attribute (as appropriate) must be used.
          items:
            $ref: "#/components/schemas/Envelope"
          minItems: 0
          type: array
          uniqueItems: true
        ovcEndPointMap:
          description: >-
            MEF 26.2 sec. 16.5 - The information that determines which UNI/ENNI
            Frames are mapped to the OVC End Point. At the UNI and ENNI, the
            only allowable mapping is a LIST of VLAN IDs (CE-VLAN IDs at the UNI
            and S-VLAN IDs at the ENNI).
          $ref: "#/components/schemas/EndPointMapForm"
        colorMap:
          description: >-
            MEF 26.2 sec. 16.7 - The OVC EP Color Map Service Attribute is the
            mechanism by which the Color for an Ingress External Interface Frame
            that is mapped to an OVC EP is indicated by the content in the frame
            header. The value of the OVC EP Color Map Service Attribute is a
            pair of the form ?F, M? where: F is one of the values ENDPOINT, DEI,
            PCP, or DSCP and M is a map that can be used to assign Color to each
            Ingress Frame. (The form of M depends on the value of F.)
          $ref: "#/components/schemas/ColorFrom"
        ovcEndPointPortConversationToAggregationLinkMap:
          description: >-
            MEF 26.2 sec. 13.2 - A mapping of Port Conversation IDs (i.e., VLAN
            IDs) to an ordered list of physical links if
            EnniService.sVlanIdControl is FULL and there are multiple physical
            links in the ENNI and EnniCommon.linkAggregation is ALL_ACTIVE. Only
            S-VLAN IDs that are listed in the
            AccessElineOvcEndPoint.ovcEndPointMap can be listed in this
            attribute.   If EnniService.sVlanIdControl is PARTIAL then the
            Service Provider does not have full visibility of all the S-VLAN IDs
            mapped to each physical link, and hence cannot pick values that
            avoid overloading certain links. In this case, the ENNI Port
            Conversation to Aggregation Link Map Common Attribute must be agreed
            between the relevant Operators.
          items:
            $ref: "#/components/schemas/ConversationIdToAggregationLinkMap"
          minItems: 0
          type: array
          uniqueItems: true
        ingressClassOfServiceMap:
          description: >-
            MEF 26.2 sec. 16.6 - The value of the OVC EP Ingress Class of
            Service Map Service Attribute is a 3-tuple of the form ?F, M, P?
            where: F is one of the values ENDPOINT, C_TAG_PCP, S_TAG_PCP, or
            DSCP, M is a map that can be used to assign Class of Service Names
            to External Interface Frames. (The form of M depends on the value of
            F.), and P is a map with entries of the form ?Layer 2 Control
            Protocol type ? Class of Service Name? where the Layer 2 Control
            Protocol type is determined by the Protocol Identifier (see Section
            6.2 of MEF 45.1).
          $ref: "#/components/schemas/CosFrom"
        sourceMacAddressLimit:
          description: >-
            MEF 26.2 sec. 16.15 - Specifies a limit on the number of different
            Source MAC address over a time interval for which ingress Service
            Frames at this OVC End Point will be delivered. The absence of this
            attribute corresponds to a Service Attribute value of None. The
            value is {N,t} where N is an integer greater than or equal to 1 and
            t is a time duration.
          items:
            $ref: "#/components/schemas/SourceMacAddressLimit"
          maxItems: 1
          minItems: 0
          type: array
          uniqueItems: true
        maintenanceEndPointList:
          description: >-
            MEF 26.2 sec. 16.17 - A list of the MEPs instantiated at this OVC EP
            and the direction of each MEP, List of 2-tuples ?l, d? where l is
            MEG level and d is direction (Up/Down)
          items:
            $ref: "#/components/schemas/MepLevelAndDirection"
          maxItems: 16
          minItems: 0
          type: array
          uniqueItems: true
      type: object
    AggLinkDepth:
      description: >-
        This is a pair of <VLAN ID, link depth> indicating that a given VLAN ID
        maps to a given number of links in the Port Conversation ID to
        Aggregation Link Map.
      properties:
        vlanID:
          description: The VLAN ID
          maximum: 4094
          minimum: 1
          type: integer
        lagDepth:
          description:
            The number of Link Aggregation links available to the VLAN
          minimum: 1
          type: integer
      required:
        - lagDepth
        - vlanID
      type: object
    AvailableMegLevel:
      description: >-
        MEF 10.4 sec. 8.11 - The lowest MEG level for which SOAM Frames are not
        peered or discarded by the Service Provider. If this attribute is NONE
        there is no such level (that is, SOAM frames at all MEG levels may be
        peered or discarded by the Service Provider). MEF 6.3 constrains it to
        0-6 for all Subscriber Ethernet Services.
      enum:
        - "0"
        - "1"
        - "2"
        - "3"
        - "4"
        - "5"
        - "6"
      type: string
    BandwidthProfilePerClassOfServiceName:
      description: >-
        This Class is used for both the Ingress Bandwidth Profile per Class of
        Service Name (MEF 26.2 §16.12) and Egress Bandwidth Profile per Egress
        Equivalence Class Name (MEF 26.2 §16.13) . The value is a list of pairs
        of the form?x, y? where x is a Class of Service Name that is in the
        value of the OVC List of Class of Service Names Service Attribute
        (Section 12.12) for the OVC that associates the OVC End Point for
        Ingress and an Egress Equvalence Class Name for Egress. And y, if
        specified, is a reference to a Bandwidth Profile Flow. There is at most
        one pair in the list for each CoS or EEC Name (Except Discard).
      properties:
        bwpFlow:
          $ref: "#/components/schemas/BwpFlow"
        classOfServiceName:
          description: >-
            MEF 26.2 sec. 16.12 and 16.13 - For Ingress, this is the Name of the
            Class of Service that this bandwidth profile flow is applied to.
            This should be an item from ovc.listOfClassOfServiceNames. For
            Egress, this is the Egress Equivalence Class (EEC) Name.
          type: string
      required:
        - bwpFlow
        - classOfServiceName
      type: object
    BwpFlow:
      description: >-
        The Bandwidth Profile Flow, BwpFlow, object class represents the
        Bandwidth Profile Flow which includes the bandwidth profile parameter
        CIR, CIRmax, CBS, EIR, EIRmax, EBS, Coupling Flag, Color Mode, Envelope
        and Rank, and Token Request Offset. The BwpFlow is used with Service
        Attributes for CarrierEthernetOperatorUni, CarrierEthernetSubscriberUni,
        CarrierEthernetVuni,, and ENNI as well as OVC and EVC End Points.
        Reference MEF 10.4 Section 12 and MEF 26.2 Section 17.
      properties:
        eirMax:
          $ref: "#/components/schemas/InformationRate"
        envelopeRank:
          description: >-
            MEF 26.2 sec. 17.1.2 and MEF 10.4 sec. 12.1.2 - The rank in the
            envelope of this Bandwidth Profile Flow
          minimum: 1
          type: integer
        cirMax:
          $ref: "#/components/schemas/InformationRate"
        cbs:
          $ref: "#/components/schemas/DataSize"
        couplingFlag:
          description: >-
            MEF 26.2 sec. 17.1.2 and MEF 10.4 sec. 12.1.2 - The couplingFlag
            determines whether unused committed bandwidth for this Bandwidth
            Profile Flow is made available as excess bandwidth for this
            Bandwidth Profile Flow or as committed bandwidth for the next
            lower-ranked Bandwidth Profile Flow. 0/FALSE means overflow green
            tokens are used as green tokens in the next lowest BWP Flow in the
            Envelope. 1/TRUE means they are used as yellow tokens for this BWP
            Flow.
          type: boolean
        envelopeId:
          description: >-
            MEF 26.2 sec. 17.1.2 and MEF 10.4 sec. 12.1.2 - The name of the
            envelope that this Bandwidth Profile Flow resides in.
          maxLength: 45
          minLength: 1
          pattern: "[ -\x7F]+"
          type: string
        tokenRequestOffset:
          description: >-
            MEF 26.2 sec. 17.1.2 and MEF 10.4 sec. 12.1.2 - tokenRequestOffset
            adjusts the bandwidth consumed by each External Interface Frame in
            the Bandwidth Profile Flow by a fixed number of octets.
          type: integer
        ebs:
          $ref: "#/components/schemas/DataSize"
        colorMode:
          description: >-
            MEF 26.2 sec. 17.1.2 and MEF 10.4 sec. 12.1.2 - colorMode indicates
            whether or not External Interface Frames for this Bandwidth Profile
            Flow that are identified as Yellow on input to the Bandwidth Profile
            Algorithm can be declared Green.
          $ref: "#/components/schemas/ColorMode"
        cir:
          $ref: "#/components/schemas/InformationRate"
        eir:
          $ref: "#/components/schemas/InformationRate"
      required:
        - cbs
        - cir
        - cirMax
        - colorMode
        - couplingFlag
        - ebs
        - eir
        - eirMax
        - envelopeId
        - envelopeRank
        - tokenRequestOffset
      type: object
    CarrierEthernetEiReference:
      properties:
        href:
          description: "A reference to an External Interface (UNI, ENNI)."
          format: uri
          type: string
      required:
        - href
      type: object
    CarrierEthernetEnniSpSo:
      allOf:
        - $ref: "#/components/schemas/MEFProductConfiguration"
        - $ref: "#/components/schemas/EnniService"
        - $ref: "#/components/schemas/EnniCommon"
        - $ref: "#/components/schemas/OperatorMultilateral"
      x-discriminator-value: "urn:mef:lso:spec:sonata:carrier-ethernet-enni-sp-so:v2.0.0:inventory"
    CarrierEthernetEvcCommon:
      description: >-
        These are the MEF 10.4 EVC Service Attributes that are common to all
        Subscriber (EVC-based) Ethernet Services defined in MEF 6.3.
      properties:
        listOfCosNames:
          description: >-
            MEF 10.4 sec. 8.7 - The EVC List of Class of Service Names Service
            Attribute is used to specify all of the Class of Service Names
            supported by an EVC. The value of the EVC List of Class of Service
            Names Service Attribute is a non-empty list of Class of Service
            Names (which may include one or more of the CoS Labels defined in
            MEF 23.2).
          items:
            type: string
          minItems: 1
          type: array
          uniqueItems: true
        availableMegLevel:
          description: >-
            MEF 10.4 sec. 8.11 - The lowest MEG level for which SOAM Frames are
            not peered or discarded by the Service Provider. If this attribute
            is NONE  there is no such level (that is, SOAM frames at all MEG
            levels may be peered or discarded by the Service Provider). MEF 6.3
            constrains it to 0-6 for all Subscriber Ethernet Services.
          $ref: "#/components/schemas/AvailableMegLevel"
        carrierEthernetSls:
          description: >-
            MEF 10.4 sec. 8.8 - The SLS includes technical details of the
            service level in terms of Performance Objectives, agreed between the
            Service Provider and the Subscriber or between Service Provider and
            the Operator as part of the Service Level Agreement. A given SLS
            might contain 0,1 or more Performance Objectives for each
            Performance Metric.
          items:
            $ref: "#/components/schemas/CarrierEthernetSls"
          maxItems: 1
          minItems: 0
          type: array
          uniqueItems: true
        maximumFrameSize:
          description: >-
            MEF 10.4 sec. 8.10 - Maximum size of Service frames that can be
            carried over the EVC. This must be at least 1522 (1518+C-tag).
          minimum: 1522
          type: integer
      type: object
    CarrierEthernetEvcEpCommon:
      description: >-
        This set of EVC End Point Service Attributes are applicable to all
        Subscriber (EVC-based) Ethernet Services defined in MEF 6.3 based on the
        Service Attributes in MEF 10.4.
      properties:
        identifier:
          description: >-
            MEF 10.4 sec. 10.1 - The value of the EVC EP ID Service Attribute is
            a string that is used to allow the Subscriber and Service Provider
            to uniquely identify the EVC EP for operations purposes.
          maxLength: 45
          minLength: 1
          pattern: "[ -\x7F]+"
          type: string
        uni:
          $ref: "#/components/schemas/CarrierEthernetEiReference"
        subscriberMegMip:
          description: >-
            MEF 10.4 sec. 10.13 - The value of the EVC EP Subscriber MEG MIP
            Service Attribute is either None or an integer in the range 0 - 7
            that indicates the MEG Level of a Subscriber MEG MIP.
          $ref: "#/components/schemas/SubscriberMegMip"
        egressMap:
          $ref: "#/components/schemas/EvcEgressMap"
        colorMap:
          description: >-
            MEF 10.4 sec. 10.6 - The value of the EVC EP Color Map Service
            Attribute is a pair of the form ?F, M? where: F is one of the values
            ENDPOINT, DEI, PCP, or DSCP and M is a map that can be used to
            assign Color to each Ingress Service Frame. (The form of M depends
            on the value of F.). The EVC EP Color Map Service Attribute is the
            mechanism by which the Color for an Ingress Service Frame that is
            mapped to an EVC EP is indicated by the content in the Service Frame
            header.
          $ref: "#/components/schemas/ColorFrom"
        ingressClassOfServiceMap:
          description: >-
            MEF 10.4 sec. 10.5 and MEF 45.1 sec. 6.2 - The value of the EVC EP
            Ingress Class of Service Map Service Attribute is a 3-tuple of the
            form ?F, M, P? where: F is one of the values ENDPOINT, C_TAG_PCP, or
            DSCP, M is a map that can be used to assign Class of Service Names
            to Service Frames. (The form of M depends on the value of F.), and P
            is a map with entries of the form ?Layer 2 Control Protocol type ?
            Class of Service Name? where the Layer 2 Control Protocol type is
            determined by the Protocol Identifier (see Section 6.2 of MEF 45.1).
          $ref: "#/components/schemas/CosFrom"
        ingressBandwidthProfilePerClassofServiceName:
          $ref: "#/components/schemas/BandwidthProfilePerClassOfServiceName"
      type: object
    CarrierEthernetEvcEpEtree:
      description: >-
        These EVC End Point Service Attributes (only one, actually) are
        applicable to E-TREE Services, i.e., EP-TREE and EVP-TREE
      properties:
        role:
          description: >-
            MEF 10.4 sec. 10.3 - Indicates how EI Frames mapped to the EVC End
            Point can be forwarded
          $ref: "#/components/schemas/Role"
      type: object
    CarrierEthernetEvcEpNotEpl:
      description: >-
        This set of EVC End Point Service Attributes are applicable to all
        Subscriber (EVC-based) Ethernet Services defined in MEF 6.3 based on the
        Service Attributes in MEF 10.4 - except EPL.
      properties:
        sourceAddressMacLimit:
          $ref: "#/components/schemas/SourceMacAddressLimit"
        egressBandwidthProfilePerClassofServiceName:
          $ref: "#/components/schemas/BandwidthProfilePerClassOfServiceName"
      type: object
    CarrierEthernetEvcEpVirtualPrivate:
      properties:
        evcEndPointMap:
          $ref: "#/components/schemas/EndPointMapEvc"
      type: object
    CarrierEthernetEvcNotEpl:
      description: >-
        These are the MEF 10.4 EVC Service Attributes that are common to all
        Subscriber (EVC-based) Ethernet Services defined in MEF 6.3 based on the
        Service Attributes in MEF 10.4 - except EPL.
      properties:
        frameDisposition:
          $ref: "#/components/schemas/FrameDisposition"
      type: object
    CarrierEthernetOperatorUni:
      allOf:
        - $ref: "#/components/schemas/MEFProductConfiguration"
        - $ref: "#/components/schemas/OperatorUniCommon"
        - required:
            - egressBandwidthProfile
            - envelopes
            - ingressBandwidthProfile
            - l2cpAddressSet
            - l2cpPeering
            - linkAggregation
            - linkOam
            - listofPhysicalLinks
            - maximumNumberOfCeVlanIdsPerEndPoint
            - maximumNumberOfEndPoints
            - maximumServiceFrameSize
            - meg
            - tokenShare
          type: object
      x-discriminator-value: "urn:mef:lso:spec:sonata:carrier-ethernet-operator-uni:v2.0.0:inventory"
    CarrierEthernetPhysicalLink:
      description: >-
        A 2-tuple of the form <id, physicalLink>. The value of id is an
        identifier for the physical link. The value of physicalLink is the
        specific Ethernet physical layer type.
      properties:
        physicalLink:
          description: An Ethernet physical layer
          $ref: "#/components/schemas/PhysicalLink"
        id:
          description: An identifier for the physical link.
          maxLength: 45
          minLength: 1
          pattern: "[ -\x7F]+"
          type: string
      required:
        - id
        - physicalLink
      type: object
    CarrierEthernetSls:
      description: >-
        The Service Level Specification Service Attribute (SLS) is the technical
        details of the service level, in terms of Performance Objectives, agreed
        between the Service Provider and the Subscriber as part of the Service
        Level Agreement. A given SLS might contain 0, 1, or more Performance
        Objectives for each Performance Metric. The SLS is described in section
        8.8 (EVC Service Level Specification Service Attribute) of MEF 10.4 for
        EVCs and section 12.13 (OVC Service Level Specification Service
        Attribute) for OVCs. MEF 10.4 defines 10 Performance Metrics (all of
        which are included here). MEF 26.2 defines only 9 Performance Metrics.
        MEF 26.2 does not include the One Way Composite PM. The other 9 are the
        same.
      properties:
        slsCosNameEntry:
          description: >-
            MEF 10.4 sec. 8.8 and MEF 26.2 sec. 12.13 - This is a list of
            Performance Metrics. Each entry contains a set of parameters and
            Performance Metrics one one Class of Service.
          items:
            $ref: "#/components/schemas/SlsCosNameEntry"
          minItems: 1
          type: array
          uniqueItems: true
        timeInterval:
          $ref: "#/components/schemas/LongDuration"
        startTime:
          $ref: "#/components/schemas/Time"
      required:
        - slsCosNameEntry
        - startTime
        - timeInterval
      type: object
    CarrierEthernetSubscriberUni:
      allOf:
        - $ref: "#/components/schemas/MEFProductConfiguration"
        - $ref: "#/components/schemas/SubscriberUniCommon"
        - required:
            - envelopes
            - instantiation
            - l2cpAddressSet
            - l2cpPeering
            - linkAggregation
            - linkOAM
            - listOfPhyLinks
            - maximumNumberOfCtagVlanIdsPerEndPoint
            - maximumNumberOfEndPoints
            - maximumServiceFrameSize
            - meg
            - portConversation
            - tokenShare
          type: object
      x-discriminator-value: >-
        urn:mef:lso:spec:cantata-sonata:carrier-ethernet-subscriber-uni:v0.1.0:inventory
    CarrierEthernetVpEvcCommon:
      description: >-
        These are the MEF 10.4 EVC Service Attributes that are common to all
        Virtual Private Subscriber (EVC-based) Ethernet Services (EVPL, EVP-LAN,
        EVP_TREE) defined in MEF 6.3.
      properties:
        cTagPcpPreservation:
          $ref: "#/components/schemas/EnabledDisabled"
        cTagDeiPreservation:
          $ref: "#/components/schemas/EnabledDisabled"
      type: object
    CcDei:
      description: >-
        One of the possible values for the OVC Egress Map. This indicates that
        the Color is mapped to the DEI field of the Egress Frame. Note that the
        Enums used for the DEI values include DISCARD as a value.
      properties:
        deiGeen:
          $ref: "#/components/schemas/DeiValueAndDiscard"
        deiYellow:
          $ref: "#/components/schemas/DeiValueAndDiscard"
        cosName:
          description:
            The class of service name for the corresponding Ingress EI Frame.
          type: string
      required:
        - cosName
        - deiGeen
        - deiYellow
      type: object
    CcPcp:
      description: >-
        One of the possible values for the OVC Egress Map. This indicates that
        the Class of Service and Color are mapped to the PCP field of the Egress
        Frame. Note that the Enums used for the PCP values include DISCARD as a
        value.
      properties:
        pcpYellow:
          $ref: "#/components/schemas/PcpValueAndDiscard"
        cosName:
          description:
            The class of service name for the corresponding Ingress EI Frame.
          type: string
        pcpGreen:
          $ref: "#/components/schemas/PcpValueAndDiscard"
      required:
        - cosName
        - pcpGreen
        - pcpYellow
      type: object
    CeVlanIdPreservation:
      description: >-
        MEF 26.2 sec. 12.7 - Determines whether the C-tag in the Ingress Frame
        is Stripped or Preserved in the Egress Frame. Per MEF 51.1, the Operator
        must support PRESERVE and should support STRIP.
      enum:
        - PRESERVE
        - STRIP
        - RETAIN
      type: string
    CnPcp:
      description: >-
        This is a 2-tuple ?x,y? where x is a Class of Service Name and y is a
        PCP Value or DISCARD.
      properties:
        pcpValue:
          $ref: "#/components/schemas/PcpValueAndDiscard"
        cosName:
          description:
            The class of service name for the corresponding Ingress EI Frame.
          type: string
      required:
        - cosName
        - pcpValue
      type: object
    ColorFrom:
      discriminator:
        mapping:
          ENDPOINT: "#/components/schemas/ColorFromEp"
          DEI: "#/components/schemas/ColorFromDei"
          DSCP: "#/components/schemas/ColorFromDSCP"
          PCP: "#/components/schemas/ColorFromPCP"
        propertyName: mapType
      properties:
        mapType:
          type: string
      required:
        - mapType
      type: object
    ColorFromDSCP:
      allOf:
        - $ref: "#/components/schemas/ColorFrom"
        - description: >-
            This Class is referenced when the color comes from the DSCP field.
            It is a list of DSCP Entries where each entry has three components:
            (1) A list of DSCP values, (2) a color for IPv4 packets with one of
            those DSCP values, and (3) a color for IPv6 packets with one of
            those DSCP values. Any DSCP value that is not specified and any
            Frame that does not include an IP packet is Green..
          properties:
            colorFromDscpMap:
              items:
                $ref: "#/components/schemas/ColorFromDscpEntry"
              minItems: 1
              type: array
              uniqueItems: true
          required:
            - colorFromDscpMap
            - mapType
          type: object
      x-discriminator-value: DSCP
    ColorFromDei:
      allOf:
        - $ref: "#/components/schemas/ColorFrom"
        - description: >-
            This Class is referenced when the color comes from the S-tag or
            C-tag DEI field. MEF 26.2 requires that DEI=0 means Green and DEI=1
            means Yellow, so no map is needed.
          required:
            - mapType
          type: object
      x-discriminator-value: DEI
    ColorFromDscpEntry:
      properties:
        ipv6Color:
          $ref: "#/components/schemas/Ipv6Color"
        dscpList:
          description: This is a list of DSCP values
          items:
            maximum: 63
            minimum: 0
            type: integer
          minItems: 1
          type: array
          uniqueItems: true
        ipv4Color:
          $ref: "#/components/schemas/Ipv4Color"
      required:
        - dscpList
        - ipv4Color
        - ipv6Color
      type: object
    ColorFromEp:
      allOf:
        - $ref: "#/components/schemas/ColorFrom"
        - description: >-
            The color of each Ingress Frame is determined solely from the EVC or
            OVC End Point. In other words, the EP declares all frames GREEN or
            all frame YELLOW
          properties:
            epColor:
              $ref: "#/components/schemas/EpColor"
          required:
            - epColor
            - mapType
          type: object
      x-discriminator-value: ENDPOINT
    ColorFromPCP:
      allOf:
        - $ref: "#/components/schemas/ColorFrom"
        - description: >-
            This Class is referenced when the color comes from the S-tag or
            C-tag PCP field. Each of the 8 possible PCP values maps to a color.
            If there is no tag, the frame is Green.
          properties:
            colorFromPcpMap:
              description:
                "This is a list of 8 Color mappings, one for each PCP value."
              items:
                $ref: "#/components/schemas/ColorFromPCPMapEntry"
              maxItems: 8
              minItems: 8
              type: array
              uniqueItems: true
          required:
            - colorFromPcpMap
            - mapType
          type: object
      x-discriminator-value: PCP
    ColorFromPCPMapEntry:
      properties:
        pcpValue:
          $ref: "#/components/schemas/PcpValue"
        pcpColor:
          $ref: "#/components/schemas/PcpColor"
      required:
        - pcpColor
        - pcpValue
      type: object
    ColorMode:
      description: >-
        MEF 26.2 sec. 17.1.2 and MEF 10.4 sec. 12.1.2 - colorMode indicates
        whether or not External Interface Frames for this Bandwidth Profile Flow
        that are identified as Yellow on input to the Bandwidth Profile
        Algorithm can be declared Green.
      enum:
        - COLOR_BLIND
        - COLOR_AWARE
      type: string
    ConversationIdRange:
      description: >-
        A range of ConversationID (either a VLAN Id or 0 for untagged frames)
        allowing three forms: start, start ? start, and start ? end
      properties:
        start:
          description: >-
            The starting Conversation ID of the range or the only Conversation
            ID if there is no end value
          maximum: 4094
          minimum: 0
          type: integer
        end:
          description: The final Conversation ID in the range
          maximum: 4094
          minimum: 0
          type: integer
      required:
        - start
      type: object
    ConversationIdToAggregationLinkMap:
      description: >-
        This is a 2-tuple ?x,y? where x is a list of Port Conversation IDs or
        ranges of Port Conversation IDs (a Port Conversation ID is a VLAN ID or
        0 for untagged frames) and y is a list of Link Aggregation Links. This
        is used in the Port Conversation to Aggregation Link Map for the UNI and
        ENNI.
      properties:
        conversationIDs:
          description: >-
            802.1AX-2014 sec. 6.6.2.1 - A Port Conversation ID is a VLAN ID (1
            to 4094) or 0 to represent untagged and priority-tagged frames.
          items:
            $ref: "#/components/schemas/ConversationIdRange"
          minItems: 1
          type: array
          uniqueItems: true
        aggLinkList:
          description: >-
            802.1AX-2014 sec. 6.6.2.1 - An ordered list of Aggregation Link
            Numbers
          items:
            minimum: 1
            type: integer
          minItems: 1
          type: array
          uniqueItems: true
      required:
        - aggLinkList
        - conversationIDs
      type: object
    CosDscpMap:
      description: >-
        This is a list of CoS to DSCP Map Entries followed by items for Not an
        IP Packet and All Other Values.
      properties:
        dscpValueCoSList:
          description: >-
            This is a list of DSCP to CoS Map Entries: {ipv4DSCPs, ipv6DSCPs,
            CoSName}
          items:
            $ref: "#/components/schemas/CosDscpMapEntry"
          minItems: 0
          type: array
          uniqueItems: true
        notIP:
          description: >-
            This is the CoS value for packets that are not IP packets when CoS
            is determined from DSCP
          type: string
        otherIPv6:
          description: >-
            This is the CoS value for IPv6 packets with DSCP values other than
            those listed.
          type: string
        otherIPv4:
          description: >-
            This is the CoS value for IPv4 packets with DSCP values other than
            those listed.
          type: string
      required:
        - dscpValueCoSList
        - notIP
        - otherIPv4
        - otherIPv6
      type: object
    CosDscpMapEntry:
      description: "This is a 3-tuple {ipv4list, ipv6list, cosName}"
      properties:
        ipv4List:
          $ref: "#/components/schemas/DscpValues"
        ipv6List:
          $ref: "#/components/schemas/DscpValues"
        cosName:
          type: string
      required:
        - cosName
      type: object
    CosEnniPcpMapEntry:
      description:
        "2-tuple {PCP, CoSName} that maps a CoS Name or DISCARD to a PCP."
      properties:
        pcpVal:
          $ref: "#/components/schemas/PcpVal"
        pcpCosName:
          type: string
      required:
        - pcpCosName
        - pcpVal
      type: object
    CosFrom:
      discriminator:
        mapping:
          DSCP: "#/components/schemas/CosFromDscp"
          C_TAG_PCP: "#/components/schemas/CosFromCtagPcp"
          ENDPOINT: "#/components/schemas/CosFromEp"
        propertyName: mapType
      properties:
        mapType:
          description: The Field that indicates CoS is DSCP.
          type: string
      required:
        - mapType
      type: object
    CosFromCtagPcp:
      allOf:
        - $ref: "#/components/schemas/CosFrom"
        - description: >-
            Ingress CoS is specified as {F,M,P}. This is when F=C_TAG_PCP. This
            maps each of the 8 PCP values in the C-tag to a Class of Service
            Name. It also maps UNTAGGED frames to a Class of Service Name.
          properties:
            map_M:
              description: >-
                This maps each of the possible C-tag PCP values (0-7) and
                Untagged to a specific Class of Service.
              items:
                $ref: "#/components/schemas/CosUniPcpMapEntry"
              maxItems: 9
              minItems: 9
              type: array
              uniqueItems: true
            l2cp_P:
              $ref: "#/components/schemas/CosL2cp"
          required:
            - l2cp_P
            - mapType
            - map_M
          type: object
      x-discriminator-value: C_TAG_PCP
    CosFromDscp:
      allOf:
        - $ref: "#/components/schemas/CosFrom"
        - description: >-
            Ingress CoS is specified as {F,M,P}. This is when F=DSCP. This maps
            groups of DSCP values (independently for ipV4 and ipV6) to a Class
            of Service. It also provides a Class of Service mapping for DSCP
            values that are not specified and for frames that do not contain IP
            Packets.
          properties:
            map_M:
              $ref: "#/components/schemas/CosDscpMap"
            l2cp_P:
              $ref: "#/components/schemas/CosL2cp"
          required:
            - l2cp_P
            - mapType
            - map_M
          type: object
      x-discriminator-value: DSCP
    CosFromEp:
      allOf:
        - $ref: "#/components/schemas/CosFrom"
        - description: >-
            Ingress CoS is specified as {F,M,P}. This is when F=OVC_EP or EVC_EP
            as appropriate.
          properties:
            map_M:
              description: The single CoS at this EVC/OVC EP
              type: string
            l2cp_P:
              $ref: "#/components/schemas/CosL2cp"
          required:
            - l2cp_P
            - mapType
            - map_M
          type: object
      x-discriminator-value: ENDPOINT
    CosFromStagPcp:
      description: >-
        Ingress CoS is specified as {F,M,P}. This is when F=S_TAG_PCP. This maps
        each of the 8 PCP values in the S-tag to a Class of Service Name.
      properties:
        map_M:
          description: A list of 8 PCP values and their associated CoS Names
          items:
            $ref: "#/components/schemas/CosEnniPcpMapEntry"
          maxItems: 8
          minItems: 8
          type: array
          uniqueItems: true
        mapType:
          description: The Field that indicates CoS is S-Tag PCP.
          enum:
            - S_TAG_PCP
          type: string
        l2cp_P:
          $ref: "#/components/schemas/CosL2cp"
      required:
        - l2cp_P
        - mapType
        - map_M
      type: object
    CosL2cp:
      description: "2-tuple {L2CP Ident, CoS Name}"
      properties:
        l2cpIdentifier:
          $ref: "#/components/schemas/L2cpProtocol"
        l2cpCosName:
          description: CoS Name String to associate with the L2CP
          type: string
      required:
        - l2cpCosName
        - l2cpIdentifier
      type: object
    CosUniPcpMapEntry:
      description:
        "2-tuple {PCP, CoSName} that maps a CoS Name or DISCARD to a PCP."
      properties:
        pcpVal:
          description: A value 0 to 7
          $ref: "#/components/schemas/CosUniPcpMapEntryPcpVal"
        pcpCosName:
          description: A CoS Name or DISCARD
          type: string
      required:
        - pcpCosName
        - pcpVal
      type: object
    CosUniPcpMapEntryPcpVal:
      description: A value 0 to 7
      enum:
        - "0"
        - "1"
        - "2"
        - "3"
        - "4"
        - "5"
        - "6"
        - "7"
        - UNTAGGED
      type: string
    DataSize:
      description: >-
        A value and a unit of measure that specifies a data size for example for
        a buffer or a burst size.
      properties:
        dataSizeUnits:
          description: >-
            The unit of measure in the data size. For example, if a burst size
            is 40 KBYTES, this element is KBYTES.
          $ref: "#/components/schemas/DataSizeUnits"
        dataSizeValue:
          description: >-
            The value in the data size. For example, if a burst size is 40
            KBYTES, this element is 40.
          type: integer
      required:
        - dataSizeUnits
        - dataSizeValue
      type: object
    DataSizeUnits:
      description: >-
        The unit of measure in the data size. For example, if a burst size is 40
        KBYTES, this element is KBYTES.
      enum:
        - BYTES
        - KBYTES
        - MBYTES
        - GBYTES
        - TBYTES
        - PBYTES
        - EBYTES
        - ZBYTES
        - YBYTES
      type: string
    DeiFromCosColor:
      allOf:
        - $ref: "#/components/schemas/OvcEgressMap"
        - description: >-
            The DEI Field in the Egress EI Frame is determined from the Class of
            Service and the Frame Color. This is a list that contains an entry
            for Class of Service Name that includes the CoS Name and the DEI
            value (or DISCARD) to use for Green frames and the DEI value (or
            DISCARD) to use for Yellow Frames. For example CoS=Platinum and
            Color=Green --> DEI = 1 and Color=Yellow --> DEI = 0. This affects
            the C-tag at the UNI and the S-tag at the ENNI.
          properties:
            ccDeiEntries:
              description: >-
                A list of entries, one per CoS, that specifies the DEI value for
                Green frames and Yellow frames.
              items:
                $ref: "#/components/schemas/CcDei"
              minItems: 1
              type: array
              uniqueItems: true
          required:
            - ccDeiEntries
            - mapType
          type: object
      x-discriminator-value: CC_DEI
    DeiValueAndDiscard:
      enum:
        - "0"
        - "1"
        - DISCARD
      type: string
    DscpValues:
      description: A list of 6 bit values
      properties:
        dscpValues:
          description: A list of unique 6-bit (0-63) values
          items:
            maximum: 63
            minimum: 0
            type: integer
          minItems: 1
          type: array
          uniqueItems: true
      type: object
    Duration:
      description: "A Duration in a given unit of time e.g. 3 hours, or 5 days."
      properties:
        amount:
          description: "Duration (number of seconds, minutes, hours, etc.)"
          type: integer
        units:
          $ref: "#/components/schemas/TimeUnit"
      required:
        - amount
        - units
      type: object
    EnabledDisabled:
      description:
        Enumeration to indicate Enabled/Disabled state of an attribute
      enum:
        - ENABLED
        - DISABLED
      type: string
    EndPointMapEvc:
      description: >-
        This is specifications for which Service Frames are mapped to the EVC
        End Point. The allowed values in MEF 10.4 are ALL, LIST, and UT/PT.
        Since Private services must be ALL, the map isn;t needed for those
        services, and therefore the type does not include ALL. If the type is
        LIST there must be a list of VLAN IDs specified.
      properties:
        vlanId:
          description: >-
            A list of VLAN IDs that is interpreted based on the value of
            vlanType.
          items:
            maximum: 4094
            minimum: 1
            type: integer
          maxItems: 4094
          minItems: 1
          type: array
          uniqueItems: true
        vlanType:
          description:
            An indication about how the Vlan List argument is interpreted
          $ref: "#/components/schemas/VlanType"
      required:
        - vlanType
      type: object
    EndPointMapForm:
      discriminator:
        mapping:
          FORM_E: "#/components/schemas/EndPointMapFormE"
          FORM_U: "#/components/schemas/EndPointMapFormU"
        propertyName: mapType
      properties:
        mapType:
          type: string
      required:
        - mapType
      type: object
    EndPointMapFormE:
      allOf:
        - $ref: "#/components/schemas/EndPointMapForm"
        - description: >-
            The value of an End Point Map of Form E (E for ENNI) consists of a
            list of one or more SVLAN ID values. An S-Tagged ENNI Frame whose
            S-VLAN ID value matches an entry in the list maps to the OVC End
            Point.
          properties:
            EndPointMapFormE:
              items:
                maximum: 4094
                minimum: 1
                type: integer
              maxItems: 4094
              minItems: 1
              type: array
              uniqueItems: true
          required:
            - EndPointMapFormE
            - mapType
          type: object
      x-discriminator-value: FORM_E
    EndPointMapFormU:
      allOf:
        - $ref: "#/components/schemas/EndPointMapForm"
        - description: >-
            The EndPointMapFormU object class represents the EVC/OVC End Point
            Map Form U (U for UNI). It is a list of one or more CE-VLAN IDs.
          properties:
            ovcEndPointMapFormU:
              items:
                maximum: 4094
                minimum: 1
                type: integer
              maxItems: 4094
              minItems: 1
              type: array
              uniqueItems: true
          required:
            - mapType
            - ovcEndPointMapFormU
          type: object
      x-discriminator-value: FORM_U
    EnniCommon:
      description: >-
        These are the technical details that need to be agreed to by the Network
        Operators in order for their Carrier Ethernet Networks to be
        interconnected by the ENNI.
      properties:
        portConversation:
          description: >-
            MEF 26.2 sec. 9.6 - A mapping of Port Conversation IDs (i.e., VLAN
            IDs or zero for untagged frames) to an ordered list of physical
            links if there are multiple physical links in the UNI and the link
            aggregation is ALL_ACTIVE. Note: In some cases the Port Conversation
            ID to Aggregation Link Map can be specified at the OVC End Point.
          items:
            $ref: "#/components/schemas/ConversationIdToAggregationLinkMap"
          minItems: 0
          type: array
          uniqueItems: true
        peeringIdentifier:
          description: >-
            MEF 26.2 sec. 9.1 - An identifier for the ENNI intended for
            operations purposes by the interconnecting Operators at the ENNI.
          maxLength: 45
          minLength: 1
          pattern: "[ -\x7F]+"
          type: string
        lagLinkMeg:
          $ref: "#/components/schemas/EnabledDisabled"
        serviceFrameFormat:
          description: >-
            MEF 26.2 sec. 9.3 - The ENNI Frame Format Common Attribute has the
            value Ethernet MAC Frame conforming to Clause 3 of IEEE 802.3-2012.
          enum:
            - 802.3-2012
          type: string
        linkOAM:
          $ref: "#/components/schemas/EnabledDisabled"
        listOfPhysicalLinks:
          description: >-
            MEF 26.2 sec. 9.2 and 9.3 - This Service Attribute combines several
            of the MEF 26.2 Objects into a single n-tuple that is consistent
            with the way this information is described in MEF 10.4. The value of
            the ENNI List of Physical Links Service Attribute is a list of
            5-tuples of the form ??id,pl,fs,pt,cn?, with one list item for each
            physical link. The value of id is an identifier for the physical
            link. The value of pl specifies a physical layer. fs indicates if
            synchronous Ethernet is used on the physical link corresponding to
            the 5-tuple and has the value either Enabled or Disabled. The value
            of pt indicates if the Precision Time Protocol is used on the
            physical link corresponding to the 5-tuple and has the value either
            Enabled or Disabled. The value of cn specifies the type of connector
            used at the ENNI.
          items:
            $ref: "#/components/schemas/EnniPhysicalLink"
          minItems: 1
          type: array
          uniqueItems: true
        meg:
          $ref: "#/components/schemas/EnabledDisabled"
        linkAggregation:
          description: >-
            MEF 26.2 sec. 9.5 - If the ENNI is composed of multiple physical
            links this Service Attribute indicates how they are combined using
            Link Aggregation.
          $ref: "#/components/schemas/EnniCommonLinkAggregation"
      type: object
    EnniCommonLinkAggregation:
      description: >-
        MEF 26.2 sec. 9.5 - If the ENNI is composed of multiple physical links
        this Service Attribute indicates how they are combined using Link
        Aggregation.
      enum:
        - NONE
        - 2_LINK_ACTIVE_STANDBY
        - ALL_ACTIVE
        - OTHER
      type: string
    EnniPhysicalLink:
      allOf:
        - $ref: "#/components/schemas/CarrierEthernetPhysicalLink"
      description: >-
        This class describes the Physical Link attributes at an ENNI. It
        consists of the Carrier Ethernet Physical Links (id and physical link
        type) with no elements.
    EnniService:
      description: >-
        For each instance of an ENNI, there are multiple sets of ENNI Service
        Attributes. The value for each ENNI Service Attribute in a set for an
        Operator CEN is specific to a SP/SO that is using the ENNI per Section
        8.11 of MEF 26.2. Each such value is agreed to by the SP/SO and the
        Operator.
      properties:
        maximumNumberOfOvcs:
          description: >-
            MEF 26.2 sec. 13.3 - The value of the Maximum Number of OVCs Service
            Attribute is a strictly positive integer. It provides an upper bound
            on the number of OVCs that the Operator will support at the ENNI for
            the SP/SO.
          minimum: 1
          type: integer
        maximumNumberOfOvcEndPointsPerOvc:
          description: >-
            MEF 26.2 sec. 13.4 - Usually each OVC has a single End Point at the
            ENNI but with hairpin switching an OVC can have multiple. This
            Service Attribute sets the limit on the number of End Points an OVC
            can have at the ENNI.
          minimum: 1
          type: integer
        sVlanIdControl:
          description: >-
            MEF 26.2 sec. 13.2 - The value of the S-VLAN ID Control Service
            Attribute is FULL or PARTIAL. When the value is FULL, the Operator
            can support only a single SP/SO at the ENNI. In other words, S-VLAN
            IDs at the ENNI can only be mapped to OVC End Points for a single
            SP/SO. When the value is PARTIAL, there can be multiple SP/SOs using
            the ENNI and different S-VLAN IDs can be mapped to OVC End Points
            for different SP/SOs.
          $ref: "#/components/schemas/SVlanIdControl"
        tokenShare:
          $ref: "#/components/schemas/EnabledDisabled"
        envelopes:
          description: >-
            MEF 26.2 sec. 13.6 - The Envelopes and Envelope Coupling Flag values
            to which Bandwidth Profile Flows can be mapped. Value is list of
            {envelopeID, couplingFlagForIndexZero}. Note: Envelopes for the ENNI
            can also be specified at the OVC End Points associated with the
            ENNI.
          items:
            $ref: "#/components/schemas/Envelope"
          minItems: 0
          type: array
          uniqueItems: true
      required:
        - envelopes
        - maximumNumberOfOvcEndPointsPerOvc
        - maximumNumberOfOvcs
        - sVlanIdControl
        - tokenShare
      type: object
    Envelope:
      description: >-
        Bandwidth Profiles are organized into Envelopes. Multiple Bandwidth
        Profiles in an envelope can share bandwidth resources. Each Envelope has
        a name and a Coupling Flag for Index Zero (CF0) that indicates whether
        unused green tokens are discarded or converted to yellow tokens. All
        Bandwidth Profile Flows in the same envelope satisfy the same criterion
        listed in R230 of MEF 26.2.
      properties:
        couplingFlagForIndexZero:
          description: >-
            MEF 10.4 sec. 9.12 and MEF 26.2 sec. 14.19 - This attribute denotes
            the coupling flag for index zero. FALSE for 0 (overflow Green tokens
            are discarded) and TRUE for 1 (overflow Green tokens can be used as
            Yellow tokens).
          type: boolean
        envelopeID:
          description: >-
            MEF 10.4 sec. 9.12 and MEF 26.2 sec. 14.19 - The attribute is a
            string that identifies the Envelope
          maxLength: 45
          minLength: 1
          pattern: "[ -\x7F]+"
          type: string
      required:
        - couplingFlagForIndexZero
        - envelopeID
      type: object
    EpColor:
      enum:
        - GREEN
        - YELLOW
      type: string
    Epl:
      allOf:
        - $ref: "#/components/schemas/MEFProductConfiguration"
        - $ref: "#/components/schemas/CarrierEthernetEvcCommon"
        - properties:
            evcEndPoints:
              description: MEF 10.4 sec. 10 - An array of two EVC End Points.
              items:
                $ref: "#/components/schemas/EplEvcEndPoint"
              maxItems: 2
              minItems: 2
              type: array
              uniqueItems: true
          required:
            - availableMegLevel
            - carrierEthernetSls
            - evcEndPoints
            - listOfCosNames
            - maximumFrameSize
          type: object
      x-discriminator-value: "urn:mef:lso:spec:cantata-sonata:epl:v0.1.0:inventory"
    EplEvcEndPoint:
      allOf:
        - $ref: "#/components/schemas/CarrierEthernetEvcEpCommon"
      description: >-
        An EVC End Point is a logical entity at a given UNI that is associated
        with a distinct set of frames passing over that UNI. EVC End Point
        Service Attributes are the attributes of an EVC that can be different at
        each UNI in the EVC. These are the EVC End Point Service Attributes
        applicable to Ethernet Private Line (EPL) Services defined in MEF 6.3
        based on the Service Attributes in MEF 10.4.
      required:
        - colorMap
        - identifier
        - ingressBandwidthProfilePerClassofServiceName
        - ingressClassOfServiceMap
        - subscriberMegMip
        - uni
    Eplan:
      allOf:
        - $ref: "#/components/schemas/MEFProductConfiguration"
        - $ref: "#/components/schemas/CarrierEthernetEvcCommon"
        - $ref: "#/components/schemas/CarrierEthernetEvcNotEpl"
        - properties:
            evcEndPoints:
              description:
                MEF 10.4 sec. 10 - An array of two or more EVC End Points.
              items:
                $ref: "#/components/schemas/EplanEvcEndPoint"
              minItems: 2
              type: array
              uniqueItems: true
          required:
            - availableMegLevel
            - carrierEthernetSls
            - evcEndPoints
            - frameDisposition
            - listOfCosNames
            - maximumFrameSize
          type: object
      x-discriminator-value: "urn:mef:lso:spec:cantata-sonata:eplan:v0.1.0:inventory"
    EplanEvcEndPoint:
      allOf:
        - $ref: "#/components/schemas/CarrierEthernetEvcEpCommon"
        - $ref: "#/components/schemas/CarrierEthernetEvcEpNotEpl"
      required:
        - colorMap
        - identifier
        - ingressBandwidthProfilePerClassofServiceName
        - ingressClassOfServiceMap
        - subscriberMegMip
        - uni
    Eptree:
      allOf:
        - $ref: "#/components/schemas/MEFProductConfiguration"
        - $ref: "#/components/schemas/CarrierEthernetEvcCommon"
        - $ref: "#/components/schemas/CarrierEthernetEvcNotEpl"
        - properties:
            evcEndPoints:
              description:
                MEF 10.4 sec. 10 - An array of two or more EVC End Points.
              items:
                $ref: "#/components/schemas/EptreeEvcEndPoint"
              minItems: 2
              type: array
              uniqueItems: true
          required:
            - availableMegLevel
            - carrierEthernetSls
            - evcEndPoints
            - frameDisposition
            - listOfCosNames
            - maximumFrameSize
          type: object
      x-discriminator-value: "urn:mef:lso:spec:cantata-sonata:eptree:v0.1.0:inventory"
    EptreeEvcEndPoint:
      allOf:
        - $ref: "#/components/schemas/CarrierEthernetEvcEpCommon"
        - $ref: "#/components/schemas/CarrierEthernetEvcEpEtree"
        - $ref: "#/components/schemas/CarrierEthernetEvcEpNotEpl"
      required:
        - colorMap
        - identifier
        - ingressBandwidthProfilePerClassofServiceName
        - ingressClassOfServiceMap
        - role
        - subscriberMegMip
        - uni
    Error:
      description: >
        Standard Class used to describe API response error Not intended to be
        used directly. The `code` in the HTTP header is used as a discriminator
        for the type of error returned in runtime.
      properties:
        reason:
          description: >-
            Text that explains the reason for the error. This can be shown to a
            client user.
          maxLength: 255
          type: string
        message:
          description: >-
            Text that provides mode details and corrective actions related to
            the error. This can be shown to a client user.
          type: string
        referenceError:
          description: URL pointing to documentation describing the error
          format: uri
          type: string
      required:
        - reason
      type: object
    Error400:
      allOf:
        - $ref: "#/components/schemas/Error"
        - properties:
            code:
              $ref: "#/components/schemas/Error400Code"
          required:
            - code
          type: object
      description:
        "Bad Request. (https://tools.ietf.org/html/rfc7231#section-6.5.1)"
    Error400Code:
      description: >-
        One of the following error codes:

        - missingQueryParameter: The URI is missing a required query-string
        parameter

        - missingQueryValue: The URI is missing a required query-string
        parameter value

        - invalidQuery: The query section of the URI is invalid.

        - invalidBody: The request has an invalid body
      enum:
        - missingQueryParameter
        - missingQueryValue
        - invalidQuery
        - invalidBody
      type: string
    Error401:
      allOf:
        - $ref: "#/components/schemas/Error"
        - properties:
            code:
              $ref: "#/components/schemas/Error401Code"
          required:
            - code
          type: object
      description:
        "Unauthorized.  (https://tools.ietf.org/html/rfc7235#section-3.1)"
    Error401Code:
      description: |-
        One of the following error codes:
        - missingCredentials: No credentials provided.
        - invalidCredentials: Provided credentials are invalid or expired
      enum:
        - missingCredentials
        - invalidCredentials
      type: string
    Error403:
      allOf:
        - $ref: "#/components/schemas/Error"
        - properties:
            code:
              $ref: "#/components/schemas/Error403Code"
          required:
            - code
          type: object
      description: >-
        Forbidden. This code indicates that the server understood the request
        but refuses to authorize it.
        (https://tools.ietf.org/html/rfc7231#section-6.5.3)
    Error403Code:
      description: |-
        This code indicates that the server understood
        the request but refuses to authorize it because
        of one of the following error codes:
        - accessDenied: Access denied
        - forbiddenRequester: Forbidden requester
        - tooManyUsers: Too many users
      enum:
        - accessDenied
        - forbiddenRequester
        - tooManyUsers
      type: string
    Error404:
      allOf:
        - $ref: "#/components/schemas/Error"
        - properties:
            code:
              description: >-
                The following error code:

                - notFound: A current representation for the target resource not
                found
              enum:
                - notFound
              type: string
          required:
            - code
          type: object
      description: >-
        Resource for the requested path not found.
        (https://tools.ietf.org/html/rfc7231#section-6.5.4)
    Error422:
      allOf:
        - $ref: "#/components/schemas/Error"
        - properties:
            code:
              $ref: "#/components/schemas/Error422Code"
            propertyPath:
              description: >
                A pointer to a particular property of the payload that caused
                the validation issue. It is highly recommended that this
                property should be used.

                Defined using JavaScript Object Notation (JSON) Pointer
                (https://tools.ietf.org/html/rfc6901).
              type: string
          required:
            - code
          type: object
      description: >-
        Unprocessable entity due to a business validation problem.
        (https://tools.ietf.org/html/rfc4918#section-11.2)
    Error422Code:
      description: |
        One of the following error codes:
          - missingProperty: The property the Seller has expected is not present in the payload
          - invalidValue: The property has an incorrect value
          - invalidFormat: The property value does not comply with the expected value format
          - referenceNotFound: The object referenced by the property cannot be identified in the Seller system
          - unexpectedProperty: Additional property, not expected by the Seller has been provided
          - tooManyRecords: the number of records to be provided in the response exceeds the Seller's threshold.
          - otherIssue: Other problem was identified (detailed information provided in a reason)
      enum:
        - missingProperty
        - invalidValue
        - invalidFormat
        - referenceNotFound
        - unexpectedProperty
        - tooManyRecords
        - otherIssue
      type: string
    Error500:
      allOf:
        - $ref: "#/components/schemas/Error"
        - properties:
            code:
              description: >-
                The following error code:

                - internalError: Internal server error - the server encountered
                an unexpected condition that prevented it from fulfilling the
                request.
              enum:
                - internalError
              type: string
          required:
            - code
          type: object
      description: >-
        Internal Server Error.
        (https://tools.ietf.org/html/rfc7231#section-6.6.1)
    EvcEgressMap:
      description: >-
        This map is a table with one entries for each CosName, that includes the
        CoSName, a PCP value for green frames, a PCP value for yellow frames, a
        DEI value for green frames and a DEI value for yellow frames. Any of the
        values can be DISCARD (in which case they are all treated as DISCARD).
        This table is used at the UNI for EVCs.
      properties:
        evcEgressMapEntries:
          items:
            $ref: "#/components/schemas/EvcEgressMapEntry"
          minItems: 0
          type: array
          uniqueItems: true
      required:
        - evcEgressMapEntries
      type: object
    EvcEgressMapEntry:
      description: >-
        A row in the EVC Egress Map. Contains a CoSName, PCPGreen, PCPYellow,
        DEIGreen, DEIYellow
      properties:
        pcpYellow:
          $ref: "#/components/schemas/PcpValueAndDiscard"
        deiYellow:
          $ref: "#/components/schemas/DeiValueAndDiscard"
        cosName:
          type: string
        deiGreen:
          $ref: "#/components/schemas/DeiValueAndDiscard"
        pcpGreen:
          $ref: "#/components/schemas/PcpValueAndDiscard"
      required:
        - cosName
        - pcpGreen
      type: object
    Evpl:
      allOf:
        - $ref: "#/components/schemas/MEFProductConfiguration"
        - $ref: "#/components/schemas/CarrierEthernetEvcCommon"
        - $ref: "#/components/schemas/CarrierEthernetVpEvcCommon"
        - $ref: "#/components/schemas/CarrierEthernetEvcNotEpl"
        - properties:
            evcEndPoints:
              description: MEF 10.4 sec. 10 - An array of two EVC End Points.
              items:
                $ref: "#/components/schemas/EvplEvcEndPoint"
              maxItems: 2
              minItems: 2
              type: array
              uniqueItems: true
          required:
            - availableMegLevel
            - cTagDeiPreservation
            - cTagPcpPreservation
            - carrierEthernetSls
            - evcEndPoints
            - frameDisposition
            - listOfCosNames
            - maximumFrameSize
          type: object
      x-discriminator-value: "urn:mef:lso:spec:cantata-sonata:evpl:v0.1.0:inventory"
    EvplEvcEndPoint:
      allOf:
        - $ref: "#/components/schemas/CarrierEthernetEvcEpCommon"
        - $ref: "#/components/schemas/CarrierEthernetEvcEpVirtualPrivate"
        - $ref: "#/components/schemas/CarrierEthernetEvcEpNotEpl"
      required:
        - colorMap
        - evcEndPointMap
        - identifier
        - ingressBandwidthProfilePerClassofServiceName
        - ingressClassOfServiceMap
        - subscriberMegMip
        - uni
    Evplan:
      allOf:
        - $ref: "#/components/schemas/MEFProductConfiguration"
        - $ref: "#/components/schemas/CarrierEthernetEvcCommon"
        - $ref: "#/components/schemas/CarrierEthernetVpEvcCommon"
        - $ref: "#/components/schemas/CarrierEthernetEvcNotEpl"
        - properties:
            evcEndPoints:
              description:
                MEF 10.4 sec. 10 - An array of two or more EVC End Points.
              items:
                $ref: "#/components/schemas/EvplanEvcEndPoint"
              minItems: 2
              type: array
              uniqueItems: true
          required:
            - availableMegLevel
            - cTagDeiPreservation
            - cTagPcpPreservation
            - carrierEthernetSls
            - evcEndPoints
            - frameDisposition
            - listOfCosNames
            - maximumFrameSize
          type: object
      x-discriminator-value: "urn:mef:lso:spec:cantata-sonata:evplan:v0.1.0:inventory"
    EvplanEvcEndPoint:
      allOf:
        - $ref: "#/components/schemas/CarrierEthernetEvcEpCommon"
        - $ref: "#/components/schemas/CarrierEthernetEvcEpVirtualPrivate"
        - $ref: "#/components/schemas/CarrierEthernetEvcEpNotEpl"
      required:
        - colorMap
        - evcEndPointMap
        - identifier
        - ingressBandwidthProfilePerClassofServiceName
        - ingressClassOfServiceMap
        - subscriberMegMip
        - uni
    Evptree:
      allOf:
        - $ref: "#/components/schemas/MEFProductConfiguration"
        - $ref: "#/components/schemas/CarrierEthernetEvcCommon"
        - $ref: "#/components/schemas/CarrierEthernetVpEvcCommon"
        - $ref: "#/components/schemas/CarrierEthernetEvcNotEpl"
        - properties:
            evcEndPoints:
              description:
                MEF 10.4 sec. 10 - An array of two or more EVC End Points.
              items:
                $ref: "#/components/schemas/EvptreeEvcEndPoint"
              minItems: 2
              type: array
              uniqueItems: true
          required:
            - availableMegLevel
            - cTagDeiPreservation
            - cTagPcpPreservation
            - carrierEthernetSls
            - evcEndPoints
            - frameDisposition
            - listOfCosNames
            - maximumFrameSize
          type: object
      x-discriminator-value: "urn:mef:lso:spec:cantata-sonata:evptree:v0.1.0:inventory"
    EvptreeEvcEndPoint:
      allOf:
        - $ref: "#/components/schemas/CarrierEthernetEvcEpCommon"
        - $ref: "#/components/schemas/CarrierEthernetEvcEpVirtualPrivate"
        - $ref: "#/components/schemas/CarrierEthernetEvcEpEtree"
        - $ref: "#/components/schemas/CarrierEthernetEvcEpNotEpl"
      required:
        - colorMap
        - evcEndPointMap
        - identifier
        - ingressBandwidthProfilePerClassofServiceName
        - ingressClassOfServiceMap
        - role
        - subscriberMegMip
        - uni
    FieldedAddress:
      description: >-
        A type of Address that has a discrete field and value for each type of
        boundary or identifier down to the lowest level of detail. For example
        "street number" is one field, "street name" is another field, etc.
        Reference: MEF 79 (Sn 8.9.2)
      properties:
        country:
          description: Country that the address is in
          type: string
        streetType:
          description: >-
            The type of street (e.g., alley, avenue, boulevard, brae, crescent,
            drive, highway, lane, terrace, parade, place, tarn, way, wharf)
          type: string
        postcodeExtension:
          description: >-
            An extension of a postal code. E.g. the part following the dash in a
            US urban property address
          type: string
        city:
          description: The city that the address is in
          type: string
        streetNr:
          description: >-
            Number identifying a specific property on a public street. It may be
            combined with streetNrLast for ranged addresses. MEF 79 defines it
            as required however as in certain countries it is not used we make
            it optional in API.
          type: string
        locality:
          description: The locality that the address is in
          type: string
        postcode:
          description: >-
            Descriptor for a postal delivery area, used to speed and simplify
            the delivery of mail (also known as zip code)
          type: string
        streetNrLast:
          description:
            Last number in a range of street numbers allocated to a property
          type: string
        streetNrSuffix:
          description: The first street number suffix
          type: string
        streetName:
          description: Name of the street or other street type
          type: string
        stateOrProvince:
          description: The State or Province that the address is in
          type: string
        streetNrLastSuffix:
          description: Last street number suffix for a ranged address
          type: string
        geographicSubAddress:
          $ref: "#/components/schemas/GeographicSubAddress"
        streetSuffix:
          description: A modifier denoting a relative direction
          type: string
      required:
        - city
        - country
        - streetName
      type: object
    FrameDispEnum:
      enum:
        - DISCARD
        - DELIVER_UNCONDITIONALLY
        - DELIVER_CONDITIONALLY
      type: string
    FrameDisposition:
      description: >-
        A 3-tuple that indicates how Unicast, Multicast, and Broadcast Frames
        are delivered by the service. For each, the value can be UNCONDITIONAL,
        the frames are delivered without condition, CONDITIONAL, the frames are
        delivered based on conditions agreed to between buyer and seller (e.g.,
        based on learned addresses), and DISCARD.
      properties:
        broadcast:
          $ref: "#/components/schemas/FrameDispEnum"
        unicast:
          $ref: "#/components/schemas/FrameDispEnum"
        multicast:
          $ref: "#/components/schemas/FrameDispEnum"
      required:
        - broadcast
        - multicast
        - unicast
      type: object
    GeographicSubAddress:
      description:
        "Additional fields used to specify an address, as detailed as possible."
      properties:
        buildingName:
          description: >
            Allows for identification of places that require building name  as
            part of addressing information
          type: string
        subUnit:
          description: >-
            Representation of a MEFSubUnit It is used for describing subunit
            within a subAddress e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER,
            UNIT, WHARF.
          items:
            $ref: "#/components/schemas/MEFSubUnit"
          type: array
        levelType:
          description: Describes level types within a building
          type: string
        levelNumber:
          description:
            "Used where a level type may be repeated e.g. BASEMENT 1, BASEMENT 2"
          type: string
        privateStreetNumber:
          description: Private streets numbers internal to a private street
          type: string
        privateStreetName:
          description: >-
            "Private streets internal to a property (e.g. a university) may have
            internal names that are not recorded by the land title office
          type: string
      type: object
    InformationRate:
      description:
        A value and a unit of measure that specifies an Information Rate.
      properties:
        irValue:
          description: >-
            The value in the information rate. For example if the information
            rate is 70 kbps this element is 70.
          minimum: 0
          type: number
        irUnits:
          description: >-
            The unit of measure for the Information Rate. For example if the
            Information Rate is 70 kbps this element is kbps.
          $ref: "#/components/schemas/IrUnits"
      required:
        - irUnits
        - irValue
      type: object
    Instantiation:
      description: >-
        MEF 10.4 sec. 9.2 - When the value is Physical, the UNI is implemented
        using one or more instances of a standard Physical Layer. When the value
        is Virtual, the physical layer is not specified.
      enum:
        - PHYSICAL
        - VIRTUAL
      type: string
    Ipv4Color:
      enum:
        - GREEN
        - YELLOW
      type: string
    Ipv6Color:
      enum:
        - GREEN
        - YELLOW
      type: string
    IrUnits:
      description: >-
        The unit of measure for the Information Rate. For example if the
        Information Rate is 70 kbps this element is kbps.
      enum:
        - BPS
        - KBPS
        - MBPS
        - GBPS
        - TBPS
        - PBPS
        - EBPS
        - ZBPS
        - YBPS
      type: string
    L2cpAddressSet:
      description: >-
        MEF 10.4 sec. 9.16 and MEF 45.1 sec. 8.1 - L2CP Address Set Service
        Attribute is defined in MEF 45.1. CTA CEVLAN Tag Aware for VLAN-based
        services where the CE-VLAN ID is used to map a frame to a service. CTB
        CVLAN Tag Blind for Port-based services where the CE-VLAN ID not used to
        map a frame to a service. CTB2 CVLAN Tag Blind Option 2 for
        point-to-point Port-based services that support the EPL Option 2 L2CP
        processing.
      enum:
        - CTA
        - CTB
        - CTB2
      type: string
    L2cpPeering:
      description: >-
        This specifies the L2CP Protocol Identifier and the Destination Address
        in use by the protocol entity. Reference MEF 45.1 Section 8.2 L2CP
        Peering Service Attribute
      properties:
        protocolID:
          $ref: "#/components/schemas/L2cpProtocol"
        destinationAddress:
          description: >-
            The Destination MAC Address of the L2CP to be peered in the standard
            format of 6 hex bytes separated either by colon (:) or hyphen (-).
          pattern: "[0-9a-fA-F][0-9a-fA-F]([-][0-9a-fA-F][0-9a-fA-F]){5}"
          type: string
        linkIdList:
          description: >-
            Identifiers for the links on which the specified protocol will be
            peered. If no links are specified the protocol is peered on all
            links.
          items:
            maxLength: 45
            minLength: 1
            pattern: "[ -\x7F]+"
            type: string
          minItems: 0
          type: array
          uniqueItems: false
      required:
        - destinationAddress
        - protocolID
      type: object
    L2cpProtocol:
      description: >-
        Defines a L2CP protocol LLC address type or EtherType with possible
        subtype. Reference MEF 45.1 Section 8.2 L2CP Peering Service Attribute.
      properties:
        l2cpProtocolType:
          description: The protocol field to inspect to identify the L2CP.
          $ref: "#/components/schemas/L2cpProtocolType"
        subType:
          description: The EtherType can be modified by an optional sub-type.
          minimum: 0
          type: integer
        llcAddressOrEtherType:
          description: The EtherType value or LLC value
          minimum: 0
          type: integer
      required:
        - l2cpProtocolType
        - llcAddressOrEtherType
      type: object
    L2cpProtocolType:
      description: The protocol field to inspect to identify the L2CP.
      enum:
        - ETHERTYPE
        - LLC
      type: string
    LinkAggregation:
      description: >-
        MEF 10.4 sec. 9.5 - Data type representing Link Aggregation types.
        NONE-No Link Aggregation is used. 2_LINK_ACTIVE_STANDBY-The SP network
        uses Link Aggregation as in either Clause 5.6.1 of IEEE Std 802.1AX-2008
        [2] or Clause 6.7.1 of IEEE Std 802.1AX-2014 with one Link Aggregation
        Group(LAG) across the links supporting the UNI/ENNI such that all
        Service Frames are carried on only one of the two links when both links
        are operational. ALL_ACTIVE-The SP Network uses Link Aggregation as
        specified in Clause 5.3 of IEEE Std 802.1AX-2014, including the use of
        the version 2 LACPDUs as specified in Clause 5.3.1h of IEEE Std
        802.1AZ-2014, with one Link Aggregation Group (LAG) across the links.
        OTHER-The Operator/Subscriber/Service Provider agree on another other
        resiliency mechanism.
      enum:
        - NONE
        - 2_LINK_ACTIVE_STANDBY
        - ALL_ACTIVE
        - OTHER
      type: string
    LongDuration:
      description: >-
        This class is used to describe durations expressed in days or larger
        time units
      properties:
        longDurationUnits:
          description: >-
            The unit of measure in the duration. For example, if an interval is
            2 weeks, this element is WEEKS.
          $ref: "#/components/schemas/LongDurationUnits"
        longDurationValue:
          description: >-
            The value of the duration. For example, if the duration is 20 days,
            this element is 20.
          type: integer
      required:
        - longDurationUnits
        - longDurationValue
      type: object
    LongDurationUnits:
      description: >-
        The unit of measure in the duration. For example, if an interval is 2
        weeks, this element is WEEKS.
      enum:
        - DAY
        - WEEK
        - MONTH
        - YEAR
      type: string
    MEFBillingAccount:
      description: >-
        References the billing arrangement that a buyer has with a seller that
        provides products to the customer.
      properties:
        billingContact:
          $ref: "#/components/schemas/RelatedContactInformation"
        agreementName:
          description: >-
            The name of the Agreement which is referenced for the Product Order
            Item.
          type: string
        id:
          description: >-
            Identifies the buyer's billing account to which the recurring and
            non-recurring charges for this order or order item will be billed.
            Required if the Buyer has more than one Billing Account with the
            Seller and for all new Product Orders.
          type: string
      required:
        - id
      type: object
    MEFChargePeriod:
      description: Used for a recurring charge to indicate period.
      enum:
        - hour
        - day
        - week
        - month
        - year
      type: string
    MEFEndOfTermAction:
      description: The action the Seller will take once the term expires.
      enum:
        - roll
        - autoDisconnect
        - autoRenew
      type: string
    MEFItemTerm:
      description: The term of the Item
      properties:
        duration:
          $ref: "#/components/schemas/Duration"
        endOfTermAction:
          $ref: "#/components/schemas/MEFEndOfTermAction"
        name:
          description: Name of the term
          type: string
        description:
          description: Description of the term
          type: string
        rollInterval:
          $ref: "#/components/schemas/Duration"
      type: object
    MEFPriceType:
      description:
        Indicates if the price is for recurring or non-recurring charges.
      enum:
        - recurring
        - nonRecurring
        - usageBased
      type: string
    MEFProduct:
      description:
        A product is realized as one or more service(s) and / or resource(s).
      properties:
        productSpecification:
          $ref: "#/components/schemas/ProductSpecificationRef"
        relatedSite:
          description: Reference to a Site where the PRoduct is provided.
          items:
            $ref: "#/components/schemas/RelatedGeographicSite"
          type: array
        productOffering:
          $ref: "#/components/schemas/ProductOfferingRef"
        lastUpdateDate:
          description: Latest date when the product has been updated.
          format: date-time
          type: string
        relatedContactInformation:
          description: Party playing a role for this Product
          items:
            $ref: "#/components/schemas/RelatedContactInformation"
          type: array
        "@type":
          description:
            "When sub-classing, this defines the sub-class entity name"
          type: string
        externalId:
          description: Buyer identifier of the product
          type: string
        billingAccount:
          $ref: "#/components/schemas/MEFBillingAccount"
        productOrderItem:
          description: >-
            The Product Order Item of the associated Product order that resulted
            in the creation of this Product.
          items:
            $ref: "#/components/schemas/MEFProductOrderItemRef"
          type: array
        productTerm:
          description: Term of the Product
          items:
            $ref: "#/components/schemas/MEFItemTerm"
          type: array
        terminationDate:
          description: >-
            Is the date when the product was terminated. MEF: Termination date
            (commercial) is when the product has been terminated (when the
            disconnect in the product order has been processed).
          format: date-time
          type: string
        statusChange:
          description: status change for the Product
          items:
            $ref: "#/components/schemas/MEFProductStatusChange"
          type: array
        productConfiguration:
          $ref: "#/components/schemas/MEFProductConfiguration"
        productRelationship:
          description: >-
            A list of references to existing products that are related to the
            Product.
          items:
            $ref: "#/components/schemas/ProductRelationship"
          type: array
        id:
          description: Unique identifier of the product
          type: string
        href:
          description: Reference of the product
          type: string
        startDate:
          description: >-
            Is the date from which the product starts. MEF: Start date is when
            the product is active for the first time (when the install in the
            product order has been processed).
          format: date-time
          type: string
        productPrice:
          description: A list of Prices associated with the Product
          items:
            $ref: "#/components/schemas/ProductPrice"
          type: array
        status:
          $ref: "#/components/schemas/MEFProductStatusType"
      required:
        - id
        - startDate
        - status
      type: object
    MEFProductConfiguration:
      description: >-
        MEFProductConfiguration is used as an extension point for MEF specific
        product/service payload.  The `@type` attribute is used as a
        discriminator
      discriminator:
        mapping:
          "urn:mef:lso:spec:cantata-sonata:eptree:v0.1.0:inventory": "#/components/schemas/Eptree"
          "urn:mef:lso:spec:cantata-sonata:evplan:v0.1.0:inventory": "#/components/schemas/Evplan"
          "urn:mef:lso:spec:cantata-sonata:carrier-ethernet-subscriber-uni:v0.1.0:inventory": "#/components/schemas/CarrierEthernetSubscriberUni"
          "urn:mef:lso:spec:cantata-sonata:eplan:v0.1.0:inventory": "#/components/schemas/Eplan"
          "urn:mef:lso:spec:sonata:carrier-ethernet-enni-sp-so:v2.0.0:inventory": "#/components/schemas/CarrierEthernetEnniSpSo"
          "urn:mef:lso:spec:cantata-sonata:evptree:v0.1.0:inventory": "#/components/schemas/Evptree"
          "urn:mef:lso:spec:cantata-sonata:evpl:v0.1.0:inventory": "#/components/schemas/Evpl"
          "urn:mef:lso:spec:sonata:access-eline:v2.0.0:inventory": "#/components/schemas/AccessEline"
          "urn:mef:lso:spec:cantata-sonata:epl:v0.1.0:inventory": "#/components/schemas/Epl"
          "urn:mef:lso:spec:sonata:carrier-ethernet-operator-uni:v2.0.0:inventory": "#/components/schemas/CarrierEthernetOperatorUni"
        propertyName: "@type"
      properties:
        "@type":
          description: >-
            The name of the type, defined in the JSON schema specified  above,
            for the product that is the subject of the POQ Request. The named
            type must be a subclass of MEFProductConfiguration.
          type: string
      required:
        - "@type"
      type: object
    MEFProductOrderItemRef:
      description: A reference to a ProductOrder item
      properties:
        productOrderHref:
          description: Reference of the related ProductOrder.
          type: string
        productOrderItemId:
          description: Id of an Item within the Product Order
          type: string
        productOrderId:
          description: Unique identifier of a ProductOrder.
          type: string
      required:
        - productOrderId
        - productOrderItemId
      type: object
    MEFProductStatusChange:
      description: >-
        Holds the reached status, reasons and associated date the Product Order
        status changed, populated by the Seller.
      properties:
        changeReason:
          description: The reason why the status changed.
          type: string
        changeDate:
          description: The date and time the status changed.
          format: date-time
          type: string
        status:
          $ref: "#/components/schemas/MEFProductStatusType"
      required:
        - changeDate
        - status
      type: object
    MEFProductStatusType:
      description: |-
        Possible values for the status of a MEF product

        | name                        | MEF 81 name                 |
        | --------------------------- | --------------------------- |
        | `active`                    | ACTIVE                      |
        | `active.pendingChange`      | ACTIVE_PENDING_CHANGE       |
        | `pendingTerminate`          | ACTIVE_PENDING_TERMINATE    |
        | `cancelled`                 | CANCELLED                   |
        | `pendingActive`             | PENDING                     |
        | `suspended`                 | SUSPENDED                   |
        | `suspendedPendingTerminate` | SUSPENDED_PENDING_TERMINATE |
        | `terminated`                | TERMINATED                  |
      enum:
        - active
        - active.pendingChange
        - cancelled
        - pendingActive
        - pendingTerminate
        - suspended
        - suspendedPendingTerminate
        - terminated
      type: string
    MEFProduct_Find:
      description: >-
        Class used to provide product overview retrieved in GET (by list)
        operation
      properties:
        productSpecification:
          $ref: "#/components/schemas/ProductSpecificationRef"
        relatedSite:
          description: Reference to a Site where the PRoduct is provided.
          items:
            $ref: "#/components/schemas/RelatedGeographicSite"
          type: array
        productOffering:
          $ref: "#/components/schemas/ProductOfferingRef"
        lastUpdateDate:
          description: Latest date when the product has been updated.
          format: date-time
          type: string
        externalId:
          description: >-
            This identifier is optionally provided during the product ordering
            and stored for informative purpose in the seller inventory
          type: string
        productRelationship:
          description: >-
            A list of references to existing products that are related to the
            Product.
          items:
            $ref: "#/components/schemas/ProductRelationship"
          type: array
        id:
          description: Unique identifier of the product
          type: string
        href:
          description: Reference of the product
          type: string
        billingAccount:
          $ref: "#/components/schemas/MEFBillingAccount"
        productOrderItem:
          description: >-
            The Product Order Item of the associated Product order that resulted
            in the creation of this Product.
          items:
            $ref: "#/components/schemas/MEFProductOrderItemRef"
          type: array
        startDate:
          description: The date from which the product starts
          format: date-time
          type: string
        status:
          $ref: "#/components/schemas/MEFProductStatusType"
      required:
        - id
        - status
      type: object
    MEFSubUnit:
      description: Allows for sub unit identification
      properties:
        subUnitNumber:
          description: >-
            The discriminator used for the subunit, often just a simple number
            but may also be a range.
          type: string
        subUnitType:
          description: >-
            The type of subunit e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT,
            WHARF.
          type: string
      required:
        - subUnitNumber
        - subUnitType
      type: object
    MaintenanceIntermediatePoint:
      description: >-
        MEF 26.2 sec. 16.16 - Indicates whether a MIP is instantiated at the OVC
        End Point and the MEG Level of the MIP. When the value is not None,
        several parameter values need to be determined as described in MEF 30.1.
      enum:
        - "0"
        - "1"
        - "2"
        - "3"
        - "4"
        - "5"
        - "6"
        - "7"
        - NONE
      type: string
    MepDirection:
      description: Indicates whether this is an Up MEP or Down MEP
      enum:
        - UP
        - DOWN
      type: string
    MepLevelAndDirection:
      description: >-
        A 2-tuple <level, direction> that defines the MEG Level and MEP
        direction.
      properties:
        level:
          description: The MEG level
          maximum: 7
          minimum: 0
          type: integer
        mepDirection:
          description: Indicates whether this is an Up MEP or Down MEP
          $ref: "#/components/schemas/MepDirection"
      required:
        - level
        - mepDirection
      type: object
    Money:
      description: A base / value business entity used to represent money
      properties:
        unit:
          description:
            Currency (ISO4217 norm uses 3 letters to define the currency)
          type: string
        value:
          description: A positive floating point number
          format: float
          type: number
      required:
        - unit
        - value
      type: object
    OneWayAvailabilityPmMetric:
      description: >-
        One Way Availability Performance Metric consisting of 1 parameter, a
        list of Ordered End Point Pairs (referred to as S in the MEF Standards),
        and the One Way Availability Objective for this Class of Service Name
        and these Ordered End Point Pairs. See MEF 10.4 section 8.8.7 for EVC
        and MEF 26.2 section 12.13.7 for OVC.
      properties:
        oneWayAvailabilityObjective:
          $ref: "#/components/schemas/Percentage"
        orderedPairList:
          description: >-
            The set (referred to as S in the MEF Standards) of ordered pairs of
            EVC or OVC End Points over which this Performance Metric parameters
            and objective apply.
          items:
            $ref: "#/components/schemas/OrderedPair"
          minItems: 1
          type: array
          uniqueItems: true
      required:
        - oneWayAvailabilityObjective
        - orderedPairList
      type: object
    OneWayCompositePmMetric:
      description: >-
        One Way Composite Performance Metric consisting of 7 parameters, a list
        of Ordered End Point Pairs (referred to as S in the MEF Standards) , a
        Composite Performance number (referred to as U in the MEF Standards),
        indicators about Composite Frame Loss, Composite Frame Delay, and
        Composite Frame Delay Variation (referred to as Wfl, Wfd, and Wfdv in
        the MEF Standards), Thresholds for Frame Delay and Delay Variation
        (referred to as DL and Jt in the MEF Standards) and the One Way
        Composite Objective for this Class of Service Name and these seven
        parameters. See MEF 10.4 section 8.8.10 for EVC (this Performance Metric
        is not defined for OVC services).
      properties:
        oneWayIfdvThreshold:
          $ref: "#/components/schemas/ShortDuration"
        cpmObjective:
          $ref: "#/components/schemas/Percentage"
        compositeFrameDelay:
          description:
            Composite indicator for One-way Frame Delay equal to 0 or 1.
          maximum: 1
          minimum: 0
          type: integer
        compositeFrameDelayVariation:
          description: >-
            Composite indicator for One-way Frame Delay Variation equal to 0 or
            1.
          maximum: 1
          minimum: 0
          type: integer
        oneWayFdThreshold:
          $ref: "#/components/schemas/ShortDuration"
        compositeFrameLoss:
          description:
            Composite indicator for One-way Frame Loss equal to 0 or 1.
          maximum: 1
          minimum: 0
          type: integer
        orderedPairList:
          description: >-
            The set (referred to as S in the MEF Standards) of ordered pairs of
            EVC or OVC End Points over which this Performance Metric parameters
            and objective apply.
          items:
            $ref: "#/components/schemas/OrderedPair"
          minItems: 1
          type: array
          uniqueItems: true
        compositePerformanceIndicatorThreshold:
          description: >-
            Composite Performance Indicator threshold which if exceeded suggests
            an unacceptable time interval.
          maximum: 1
          minimum: 0
          type: number
      required:
        - compositeFrameDelay
        - compositeFrameDelayVariation
        - compositeFrameLoss
        - compositePerformanceIndicatorThreshold
        - cpmObjective
        - oneWayFdThreshold
        - oneWayIfdvThreshold
        - orderedPairList
      type: object
    OneWayConsecutiveHighLossIntervalsPmMetric:
      description: >-
        One Way Frame Delay Range Performance Metric consisting of 2 parameters,
        a list of Ordered End Point Pairs (referred to as S in the MEF
        Standards) , a number (referred to as p in the MEF Standards), and the
        One Way Consecutive High Loss Intervals Objective for this Class of
        Service Name and these two parameters. See MEF 10.4 section 8.8.9 for
        EVC and MEF 26.2 section 12.13.9 for OVC.
      properties:
        consecutiveNumberP:
          description: >-
            The number of high loss intervals that constitute a consecutive high
            loss interval.
          minimum: 1
          type: integer
        oneWayChliObjective:
          description:
            Performance Objective expressed as a non-negative integer.
          minimum: 1
          type: integer
        orderedPairList:
          description: >-
            The set (referred to as S in the MEF Standards) of ordered pairs of
            EVC or OVC End Points over which this Performance Metric parameters
            and objective apply.
          items:
            $ref: "#/components/schemas/OrderedPair"
          minItems: 1
          type: array
          uniqueItems: true
      required:
        - consecutiveNumberP
        - oneWayChliObjective
        - orderedPairList
      type: object
    OneWayFrameDelayPmMetric:
      description: >-
        One Way Frame Delay Performance Metric consisting of 2 parameters, a
        list of Ordered End Point Pairs (referred to as S in the MEF Standards)
        , a percentile (referred to as Pd in the MEF Standards), and the One Way
        Frame Delay Objective for this Class of Service Name and these two
        parameters. See MEF 10.4 section 8.8.2 for EVC and MEF 26.2 section
        12.13.2 for OVC.
      properties:
        oneWayFdObjective:
          $ref: "#/components/schemas/ShortDuration"
        oneWayFdPercentile:
          $ref: "#/components/schemas/Percentage"
        orderedPairList:
          description: >-
            MEF 10.4 sec.  8.8.1.1 and MEF 26.2 sec. 12.13.1.1 - The set
            (referred to as S in the MEF Standards) of ordered pairs of EVC or
            OVC End Points over which this Performance Metric parameters and
            objective apply.
          items:
            $ref: "#/components/schemas/OrderedPair"
          minItems: 1
          type: array
          uniqueItems: true
      required:
        - oneWayFdObjective
        - oneWayFdPercentile
        - orderedPairList
      type: object
    OneWayFrameDelayRangePmMetric:
      description: >-
        One Way Frame Delay Range Performance Metric consisting of 2 parameters,
        a list of Ordered End Point Pairs (referred to as S in the MEF
        Standards) , a percentile (referred to as Pr in the MEF Standards), and
        the One Way Frame Delay Range Objective for this Class of Service Name
        and these two parameters. See MEF 10.4 section 8.8.4 for EVC and MEF
        26.2 section 12.13.4 for OVC.
      properties:
        oneWayFdrObjective:
          $ref: "#/components/schemas/ShortDuration"
        oneWayFdrPecentile:
          $ref: "#/components/schemas/Percentage"
        orderedPairList:
          description: >-
            The set (referred to as S in the MEF Standards) of ordered pairs of
            EVC or OVC End Points over which this Performance Metric parameters
            and objective apply.
          items:
            $ref: "#/components/schemas/OrderedPair"
          minItems: 1
          type: array
          uniqueItems: false
      required:
        - oneWayFdrObjective
        - oneWayFdrPecentile
        - orderedPairList
      type: object
    OneWayFrameLostRatioPmMetric:
      description: >-
        One Way Frame Loss Ratio Performance Metric consisting of 1 parameter, a
        list of Ordered End Point Pairs (referred to as S in the MEF Standards),
        and the One Way Frame Loss Ratio Objective for this Class of Service
        Name and these Ordered End Point Pairs. See MEF 10.4 section 8.8.6 for
        EVC and MEF 26.2 section 12.13.6 for OVC.
      properties:
        oneWayFlrObjective:
          $ref: "#/components/schemas/Percentage"
        orderedPairList:
          description: >-
            The set (referred to as S in the MEF Standards) of ordered pairs of
            EVC or OVC End Points over which this Performance Metric parameters
            and objective apply.
          items:
            $ref: "#/components/schemas/OrderedPair"
          minItems: 1
          type: array
          uniqueItems: true
      required:
        - oneWayFlrObjective
        - orderedPairList
      type: object
    OneWayHighLossIntervalPmMetric:
      description: >-
        One Way High Loss Intervals Performance Metric consisting of 1
        parameter, a list of Ordered End Point Pairs (referred to as S in the
        MEF Standards), and the One Way High Loss Intervals Objective for this
        Class of Service Name and these Ordered End Point Pairs. See MEF 10.4
        section 8.8.8 for EVC and MEF 26.2 section 12.13.8 for OVC.
      properties:
        oneWayHighLossIntervalsObjective:
          description: >-
            The PM Objective for this Performance Metric (this CoS and these
            Ordered End Point Pairs) expressed as a non-negative number.
          minimum: 0
          type: integer
        orderedPairList:
          description: >-
            The set (referred to as S in the MEF Standards) of ordered pairs of
            EVC or OVC End Points over which this Performance Metric parameters
            and objective apply.
          items:
            $ref: "#/components/schemas/OrderedPair"
          minItems: 1
          type: array
          uniqueItems: true
      required:
        - oneWayHighLossIntervalsObjective
        - orderedPairList
      type: object
    OneWayInterFrameDelayVariationPmMetric:
      description: >-
        One Way Frame Inter Frame Delay Variation Performance Metric consisting
        of 3 parameters, a list of Ordered End Point Pairs (referred to as S in
        the MEF Standards) , a time duration (referred to as ?t (the greek
        letter tau, not t) in the MEF Standards), a percentile (referred to as
        Pv in the MEF Standards), and the Inter Frame Delay Variation Objective
        for this Class of Service Name and these three parameters. See MEF 10.4
        section 8.8.5 for EVC and MEF 26.2 section 12.13.5 for OVC.
      properties:
        oneWayIfdvObjective:
          $ref: "#/components/schemas/ShortDuration"
        oneWayIfdvPencentile:
          $ref: "#/components/schemas/Percentage"
        timeDuration:
          $ref: "#/components/schemas/ShortDuration"
        orderedPairList:
          description: >-
            The set (referred to as S in the MEF Standards) of ordered pairs of
            EVC or OVC End Points over which this Performance Metric parameters
            and objective apply.
          items:
            $ref: "#/components/schemas/OrderedPair"
          minItems: 1
          type: array
          uniqueItems: false
      required:
        - oneWayIfdvObjective
        - oneWayIfdvPencentile
        - orderedPairList
        - timeDuration
      type: object
    OneWayMeanFrameDelayPmMetric:
      description: >-
        One Way Frame Mean Delay Performance Metric consisting of 1 parameter, a
        list of Ordered End Point Pairs (referred to as S in the MEF Standards),
        and the One Way Mean Frame Delay Objective for this Class of Service
        Name and these Ordered End Point Pairs. See MEF 10.4 section 8.8.3 for
        EVC and MEF 26.2 section 12.13.3 for OVC.
      properties:
        oneWayMfdObjective:
          $ref: "#/components/schemas/ShortDuration"
        orderedPairList:
          description: >-
            The set (referred to as S in the MEF Standards) of ordered pairs of
            EVC or OVC End Points over which this Performance Metric parameters
            and objective apply.
          items:
            $ref: "#/components/schemas/OrderedPair"
          minItems: 1
          type: array
          uniqueItems: true
      required:
        - oneWayMfdObjective
        - orderedPairList
      type: object
    OperatorMultilateral:
      description: >-
        An Operator Multilateral Attribute is a behavior of a single Operator
        CEN at an ENNI that is externally visible to a Service Provider or Super
        Operator using that CEN and ENNI and/or to peer Operators operating CENs
        on the other side of the ENNI. An Operator Multilateral Attribute has
        the same value for all Service Providers or Super Operators using that
        CEN and ENNI to whom the behavior is externally visible.
      properties:
        l2cpPeering:
          description: >-
            MEF 26.2 sec. 10.1 and  MEF 45 sec. 8.2 - A list of Layer 2 Control
            Protocols that will be Peered by a protocol entity at an ENNI: an
            empty list, or a list of entries identifying protocols to be Peered
            where each entry consists of {Destination Address, Protocol
            Identifier} or {Destination Address, Protocol Identifier, Link
            Identifier}
          items:
            $ref: "#/components/schemas/L2cpPeering"
          minItems: 0
          type: array
          uniqueItems: false
        taggedL2cpFrameProcessing:
          description: >-
            MEF 26.2 sec. 10.2 and MEF 45 sec. 8.3 - Reflects the capability of
            the ENNI to process S-VLAN-tagged L2CP Frames in an 802.1 compliant
            manner. The allowed values are "802_1_COMPLIANT" or
            "802_1_NON_COMPLIANT". A value of 802_1_COMPLIANT means the ENNI
            will apply the special forwarding rules to Tagged L2CP ENNI Frames
            that map to a VUNI or an OVC End Point supporting a service other
            than EPL with EPL Option 2 L2CP processing. A value of
            802_1_NON_COMPLIANT means the ENNI will pass any Tagged L2CP ENNI
            Frames. There is an ENNI Tagged L2CP Frame Processing Multilateral
            Attribute for each ENNI.
          $ref: "#/components/schemas/TaggedL2cpFrameProcessing"
        maximumFrameSizeMultilateral:
          description: >-
            MEF 26.2 sec. 10.3 - The maximum length ENNI Frame in bytes that can
            be reliably processed.
          minimum: 1526
          type: integer
      type: object
    OperatorUniCommon:
      description: >-
        This class contains all of the Operator UNI Services Attributes that are
        used in all four Business Functions (POQ, Quote, Order, Inventory). At
        this time, this includes all of the Operator UNI Service Attributes.
        This class is used to compose the OperatorUNI class which has one file
        for each Business Function that differ in terms of the Service
        Attributes that are "Required" for the Business Function (rather than
        "Optional").
      properties:
        aggregationLinkMap:
          description: >-
            MEF 26.2 sec. 14.6 and 802.1AX-2014 sec.  6.6.2.1 - A mapping of a
            list of Port Conversation IDs (i.e., VLAN IDs or zero for untagged
            frames) to an ordered list of physical links if there are multiple
            physical links in the UNI and the link aggregation is ALL_ACTIVE.
          items:
            $ref: "#/components/schemas/ConversationIdToAggregationLinkMap"
          minItems: 0
          type: array
          uniqueItems: true
        defaultCeVlanId:
          description: >-
            MEF 26.2 sec. 14.9 - The value of the Operator UNI Default CE-VLAN
            ID is an integer that is the CE-VLAN ID value assigned to Untagged
            Service Frames and Priority Tagged Service Frames.
          maximum: 4094
          minimum: 1
          type: integer
        maximumNumberOfEndPoints:
          description: >-
            MEF 26.2 sec. 14.10 - The maximum number of OVC End Points that the
            Operator CEN can support at the UNI.
          maximum: 4094
          minimum: 1
          type: integer
        ingressBandwidthProfile:
          description: >-
            MEF 26.2 sec. 14.12 - A single set Bandwidth Profile Flow parameters
            that covers all OVCs at the UNI. The value is either Disabled (empty
            array) or a BWP.
          items:
            $ref: "#/components/schemas/BwpFlow"
          maxItems: 1
          minItems: 0
          type: array
          uniqueItems: true
        lagLinkMeg:
          $ref: "#/components/schemas/EnabledDisabled"
        l2cpAddressSet:
          description: >-
            MEF 26.2 sec. 14.20 and MEF 45.1 sec. 8.1 - The subset of the Bridge
            Reserved Addresses that are Peered or Discarded (i.e. not Passed).
            The value CTB or CTB2 must be used for port-based (private) services
            and CTA for vlan-based (virtual private) services. Per MEF 45.1: If
            an OVC has an OVC End Point at a UNI, then the value of the Operator
            UNI L2CP Address Set Service Attribute MUST be the same as the OVC
            L2CP Address Set Service Attribute.
          $ref: "#/components/schemas/OperatorUniCommonL2cpAddressSet"
        listofPhysicalLinks:
          description: >-
            MEF 26.2 sec. 14.2, 14.3 - This Service Attribute combines several
            of the MEF 26.2 Objects into a single n-tuple that is consistent
            with the way this information is described in MEF 10.4. The value of
            the Operator UNI List of Physical Links Service Attribute is a list
            of 6-tuples of the form ?id, physicalLink, synchronousEthernet,
            precisionTiming, uniConnectorType,uniConnectorGender?, with one list
            item for each physical link. The value of id is an identifier for
            the physical link. The value of physicalLink is the specific
            Ethernet physical layer type. synchronousEthernet indicates if
            synchronous Ethernet is used on the physical link and has the value
            Enabled or Disabled. The value of precisionTiming indicates if the
            Precision Time Protocol is used on the physical link and has the
            value Enabled or Disabled. The values of uniConnectorType and
            uniConnectorGender specify the type of connector used. Note that the
            id and the physicalLink come from the CarrierEthernetPhysicalLink
            class.
          items:
            $ref: "#/components/schemas/UniPhysicalLink"
          minItems: 0
          type: array
          uniqueItems: true
        linkOam:
          $ref: "#/components/schemas/EnabledDisabled"
        meg:
          $ref: "#/components/schemas/EnabledDisabled"
        linkAggregation:
          description: >-
            MEF 26.2 sec. 14.5 - Service Attribute representing Link Aggregation
            types. NONE-No Link Aggregation is used. 2_LINK_ACTIVE_STANDBY-The
            SP network uses Link Aggregation as in either Clause 5.6.1 of IEEE
            Std 802.1AX-2008 [2] or Clause 6.7.1 of IEEE Std 802.1AX-2014 with
            one Link Aggregation Group (LAG) across the links supporting the UNI
            such that all Service Frames are carried on only one of the two
            links when both links are operational. ALL_ACTIVE-The SP Network
            uses Link Aggregation as specified in Clause 5.3 of IEEE Std
            802.1AX-2014, including the use of the version 2 LACPDUs as
            specified in Clause 5.3.1h of IEEE Std 802.1AZ-2014, with one Link
            Aggregation Group (LAG) across the links. OTHER-The
            Operator/Subscriber/Service Provider agree on another other
            resiliency mechanism.
          $ref: "#/components/schemas/OperatorUniCommonLinkAggregation"
        egressBandwidthProfile:
          description: >-
            MEF 26.2 sec. 14.13 - A single set of Bandwidth Profile Flow
            parameters that covers all OVCs at the UNI. The value is either
            Disabled (empty array) or a BWP.
          items:
            $ref: "#/components/schemas/BwpFlow"
          maxItems: 1
          minItems: 0
          type: array
          uniqueItems: true
        l2cpPeering:
          description: >-
            MEF 26.2 sec. 14.21 and  and MEF 45.1 sec. 8.1 - L2CP Peering
            Service Attribute defined in MEF 45.1 specifies which protocols, if
            any, are peered at the UNI. The L2CP Peering service attribute value
            must be an empty list, or a list of entries identifying protocols to
            be Peered where each entry consists of {Destination Address,
            Protocol Identifier} or {Destination Address, Protocol Identifier,
            Link Identifier}.
          items:
            $ref: "#/components/schemas/L2cpPeering"
          minItems: 0
          type: array
          uniqueItems: false
        maximumNumberOfCeVlanIdsPerEndPoint:
          description: >-
            MEF 26.2 sec. 14.11 - An integer between 1 and 4094 inclusive that
            limits the number of C-Tag VLAN IDs that can map to each OVC End
            Point at the UNI.
          maximum: 4094
          minimum: 1
          type: integer
        tokenShare:
          $ref: "#/components/schemas/EnabledDisabled"
        maximumServiceFrameSize:
          description: >-
            MEF 26.2 sec. 14.8 - Specifies the maximum size of Service Frames
            that can be transmitted across the UNI.
          minimum: 1522
          type: integer
        envelopes:
          description: >-
            MEF 26.2 sec. 14.19 - The Envelopes and Envelope Coupling Flag
            values to which Bandwidth Profile Flows can be mapped. Value is list
            of {envelopeID, couplingFlagForIndexZero}. Note: Envelopes for the
            UNI can also be specified at the OVC End Points associated with the
            UNI.
          items:
            $ref: "#/components/schemas/Envelope"
          minItems: 0
          type: array
          uniqueItems: true
      type: object
    OperatorUniCommonL2cpAddressSet:
      description: >-
        MEF 26.2 sec. 14.20 and MEF 45.1 sec. 8.1 - The subset of the Bridge
        Reserved Addresses that are Peered or Discarded (i.e. not Passed). The
        value CTB or CTB2 must be used for port-based (private) services and CTA
        for vlan-based (virtual private) services. Per MEF 45.1: If an OVC has
        an OVC End Point at a UNI, then the value of the Operator UNI L2CP
        Address Set Service Attribute MUST be the same as the OVC L2CP Address
        Set Service Attribute.
      enum:
        - CTA
        - CTB
        - CTB2
      type: string
    OperatorUniCommonLinkAggregation:
      description: >-
        MEF 26.2 sec. 14.5 - Service Attribute representing Link Aggregation
        types. NONE-No Link Aggregation is used. 2_LINK_ACTIVE_STANDBY-The SP
        network uses Link Aggregation as in either Clause 5.6.1 of IEEE Std
        802.1AX-2008 [2] or Clause 6.7.1 of IEEE Std 802.1AX-2014 with one Link
        Aggregation Group (LAG) across the links supporting the UNI such that
        all Service Frames are carried on only one of the two links when both
        links are operational. ALL_ACTIVE-The SP Network uses Link Aggregation
        as specified in Clause 5.3 of IEEE Std 802.1AX-2014, including the use
        of the version 2 LACPDUs as specified in Clause 5.3.1h of IEEE Std
        802.1AZ-2014, with one Link Aggregation Group (LAG) across the links.
        OTHER-The Operator/Subscriber/Service Provider agree on another other
        resiliency mechanism.
      enum:
        - NONE
        - 2_LINK_ACTIVE_STANDBY
        - ALL_ACTIVE
        - OTHER
      type: string
    OrderedPair:
      description: >-
        Performance Metrics (except for Group Availability) are specified for a
        list of Ordered End Point Pairs. In other words a Frame Delay objective
        (for example) is specified from ?A to B? and from ?C to D?. This class
        defines one Ordered End Point Pair.
      properties:
        toCarrierEthernetServiceEndPoint:
          description: >-
            This is the EVC End Point ID for and EVC End Point in the service or
            OVC End Point ID for an OVC End Point in the service.
          type: string
        fromCarrierEthernetServiceEndPoint:
          description: >-
            This is the EVC End Point ID for and EVC End Point in the service or
            OVC End Point ID for an OVC End Point in the service.
          type: string
      required:
        - fromCarrierEthernetServiceEndPoint
        - toCarrierEthernetServiceEndPoint
      type: object
    OvcEgressMap:
      discriminator:
        mapping:
          CN_PCP_CC_DEI: "#/components/schemas/PcpFromCosDeiFromCosColor"
          CC_DEI: "#/components/schemas/DeiFromCosColor"
          CC_PCP: "#/components/schemas/PcpFromCosColor"
          CN_PCP: "#/components/schemas/PcpFromCos"
        propertyName: mapType
      properties:
        mapType:
          type: string
      required:
        - mapType
      type: object
    OvcL2cpAddressSet:
      description: >-
        MEF 45 sec. 8.1 and MEF 26.2 sec. 12.16 - The subset of the Bridge
        Reserved Addresses that are Peered or Discarded (i.e. not Passed). The
        value CTB or CTB2 must be used for port-based (private) services and CTA
        for vlan-based (virtual private) services.
      enum:
        - CTA
        - CTB
        - CTB2
      type: string
    PcpColor:
      enum:
        - GREEN
        - YELLOW
      type: string
    PcpFromCos:
      allOf:
        - $ref: "#/components/schemas/OvcEgressMap"
        - description: >-
            The PCP Field in the Egress EI Frame is determined from the Class of
            Service of the corresponding Ingress EI Frame. This is a list that
            contains an entry for Class of Service Name that includes the CoS
            Name and the PCP value  (or DISCARD) to use for that CoS. For
            example CoS=Platinum --> PCP = 6. This affects the C-tag at the UNI
            and the S-tag at the ENNI.
          properties:
            cnPcpEntries:
              description: >-
                A list of mappings of each CoS to an egress PCP value or
                DISCARD.
              items:
                $ref: "#/components/schemas/CnPcp"
              minItems: 1
              type: array
              uniqueItems: true
          required:
            - cnPcpEntries
            - mapType
          type: object
      x-discriminator-value: CN_PCP
    PcpFromCosColor:
      allOf:
        - $ref: "#/components/schemas/OvcEgressMap"
        - description: >-
            The PCP Field in the Egress EI Frame is determined from the Class of
            Service Name and the Frame Color. This is a list that contains an
            entry for Class of Service Name that includes the CoS Name and two
            PCP values (or DISCARD), one for Green frames and one for Yellow
            frames.  For example CoS=Platinum and Color=Green --> PCP = 6  and
            Color=Yellow --> PCP = 5. This affects the C-tag at the UNI and the
            S-tag at the ENNI.
          properties:
            ccPcpEntries:
              description: >-
                A list of entries, one per CoS that indicates the PCP value for
                Green Frames and the PCP value for Yellow Frames.
              items:
                $ref: "#/components/schemas/CcPcp"
              minItems: 1
              type: array
              uniqueItems: true
          required:
            - ccPcpEntries
            - mapType
          type: object
      x-discriminator-value: CC_PCP
    PcpFromCosDeiFromCosColor:
      allOf:
        - $ref: "#/components/schemas/OvcEgressMap"
        - description: >-
            This is a combination of PCP from CoS and DEI from Color. The PCP
            Field in the Egress EI Frame is determined from the Class of Service
            and the DEI Field is determined from the Frame Color. This is a list
            that contains an entry for Class of Service Name that includes the
            CoS Name, PCP value to use (or DISCARD) and the DEI value to use for
            each color for that CoS Name. For example CoS=Platinum and
            Color=Green --> PCP = 6/DEI = 1 and Color=Yellow --> DEI=0. This
            affects the C-tag at the UNI and the S-tag at the ENNI.
          properties:
            cnPcpCcDeiEntries:
              description: >-
                A list of entries, one per CoS, the specifies the PCP value for
                the CoS and the DEI values for Green and Yellow frames in the
                CoS.
              items:
                $ref: "#/components/schemas/PcpFromCosDeiFromCosColor"
              minItems: 1
              type: array
              uniqueItems: true
          required:
            - cnPcpCcDeiEntries
            - mapType
          type: object
      x-discriminator-value: CN_PCP_CC_DEI
    PcpVal:
      enum:
        - "0"
        - "1"
        - "2"
        - "3"
        - "4"
        - "5"
        - "6"
        - "7"
      type: string
    PcpValue:
      enum:
        - "0"
        - "1"
        - "2"
        - "3"
        - "4"
        - "5"
        - "6"
        - "7"
      type: string
    PcpValueAndDiscard:
      enum:
        - "0"
        - "1"
        - "2"
        - "3"
        - "4"
        - "5"
        - "6"
        - "7"
        - DISCARD
      type: string
    Percentage:
      description:
        This is a number of percent - a floating point number between 0 and 100
      maximum: 100
      minimum: 0
      type: number
    PhysicalLink:
      description: An Ethernet physical layer
      enum:
        - 1BASE5
        - 2BASE_TL
        - 10BASE2
        - 10BASE5
        - 10BASE_F
        - 10BASE_FB
        - 10BASE_FL
        - 10BASE_FP
        - 10BASE_T
        - 10BASE_T1L
        - 10BASE_T1S
        - 10BASE_TE
        - 10BROAD36
        - 10PASS_TS
        - 100BASE_BX10
        - 100BASE_FX
        - 100BASE_LX10
        - 100BASE_T
        - 100BASE_T1
        - 100BASE_T2
        - 100BASE_T4
        - 100BASE_TX
        - 100BASE_X
        - 1000BASE_BX10
        - 1000BASE_CX
        - 1000BASE_KX
        - 1000BASE_LX
        - 1000BASE_LX10
        - 1000BASE_PX10
        - 1000BASE_PX20
        - 1000BASE_RHA
        - 1000BASE_RHB
        - 1000BASE_RHC
        - 1000BASE_SX
        - 1000BASE_T
        - 1000BASE_T1
        - 1000BASE_X
        - 2_5GBASE_KX
        - 2_5GBASE_T
        - 2_5GBASE_T1
        - 5GBASE_KR
        - 5GBASE_T
        - 5GBASE_T1
        - 10GBASE_CX4
        - 10GBASE_E
        - 10GBASE_ER
        - 10GBASE_EW
        - 10GBASE_KR
        - 10GBASE_KX4
        - 10GBASE_L
        - 10GBASE_LR
        - 10GBASE_LRM
        - 10GBASE_LW
        - 10GBASE_LX4
        - 10GBASE_R
        - 10GBASE_S
        - 10GBASE_SR
        - 10GBASE_SW
        - 10GBASE_T
        - 10GBASE_T1
        - 10GBASE_W
        - 10GBASE_X
        - 25GBASE_CR
        - 25GBASE_CR_S
        - 25GBASE_ER
        - 25GBASE_KR
        - 25GBASE_KR_S
        - 25GBASE_LR
        - 25GBASE_SR
        - 25GBASE_T
        - 40GBASE_CR4
        - 40GBASE_ER4
        - 40GBASE_FR
        - 40GBASE_KR4
        - 40GBASE_LR4
        - 40GBASE_R
        - 40GBASE_SR4
        - 40GBASE_T
        - 50GBASE_CR
        - 50GBASE_ER
        - 50GBASE_FR
        - 50GBASE_KR
        - 50GBASE_LR
        - 50GBASE_SR
        - 100GBASE_CR10
        - 100GBASE_CR2
        - 100GBASE_CR4
        - 100GBASE_DR
        - 100GBASE_ER4
        - 100GBASE_KP4
        - 100GBASE_KR2
        - 100GBASE_KR4
        - 100GBASE_LR4
        - 100GBASE_R
        - 100GBASE_SR10
        - 100GBASE_SR2
        - 100GBASE_SR4
        - 200GBASE_CR4
        - 200GBASE_DR4
        - 200GBASE_ER4
        - 200GBASE_FR4
        - 200GBASE_KR4
        - 200GBASE_LR4
        - 200GBASE_SR4
        - 400GBASE_DR4
        - 400GBASE_ER8
        - 400GBASE_FR8
        - 400GBASE_LR8
        - 400GBASE_SR16
        - 400GBASE_SR4_2
        - 400GBASE_SR8
        - OTHER
      type: string
    Price:
      description: >-
        Provides all amounts (tax included, duty free, tax rate), used currency
        and percentage to apply for Price Alteration.
      properties:
        taxRate:
          description:
            "Price Tax Rate. Unit: [%]. E.g. value 16 stand for 16% tax."
          format: float
          type: number
        taxIncludedAmount:
          $ref: "#/components/schemas/Money"
        dutyFreeAmount:
          $ref: "#/components/schemas/Money"
      type: object
    ProductOfferingRef:
      description: >-
        A reference to a Product Offering offered by the Seller to the Buyer. A
        Product Offering contains the commercial and technical details of a
        Product sold by a particular Seller. A Product Offering defines all of
        the commercial terms and, through association with a particular Product
        Specification, defines all the technical attributes and behaviors of the
        Product. A Product Offering may constrain the allowable set of
        configurable technical attributes and/or behaviors specified in the
        associated Product Specification.
      properties:
        href:
          description: >
            Hyperlink to a Product Offering in Sellers catalog. In case Seller
            is not providing a catalog API this field is not used. The catalog
            is provided by the Seller to the Buyer during onboarding.
          type: string
        id:
          description: >-
            id of a Product Offering. It is assigned by the Seller. The Buyer
            and the Seller exchange information about offerings' ids during the
            onboarding process.
          type: string
      required:
        - id
      type: object
    ProductPrice:
      description: >-
        An amount, usually of money, that represents the actual price paid by a
        Customer for a purchase, a rent or a lease of a Product. The price is
        valid for a defined period of time.
      properties:
        unitOfMeasure:
          description:
            "Unit of Measure if price depending on it (Gb, SMS volume, etc..)"
          type: string
        price:
          $ref: "#/components/schemas/Price"
        name:
          description: A short descriptive name such as "Subscription price".
          type: string
        priceType:
          $ref: "#/components/schemas/MEFPriceType"
        description:
          description: >-
            A narrative that explains in detail the semantics of this product
            price.
          type: string
        recurringChargePeriod:
          $ref: "#/components/schemas/MEFChargePeriod"
      required:
        - price
        - priceType
      type: object
    ProductRelationship:
      description: >-
        A relationship to existing Product. The requirements for usage for given
        Product are described in the Product Specification.
      properties:
        relationshipType:
          description: >-
            Specifies the type (nature) of the relationship to the related
            Product. The nature of required relationships vary for Products of
            different types. For example, a UNI or ENNI Product may not have any
            relationships, but an Access E-Line may have two mandatory
            relationships (related to the UNI on one end and the ENNI on the
            other). More complex Products such as multipoint IP or Firewall
            Products may have more complex relationships. As a result, the
            allowed and mandatory `relationshipType` values are defined in the
            Product Specification.
          type: string
        id:
          description: unique identifier
          type: string
        href:
          description: Hyperlink of the referenced product
          type: string
      required:
        - id
        - relationshipType
      type: object
    ProductSpecificationRef:
      description: >-
        A reference to a structured set of well-defined technical attributes
        and/or behaviors that are used to construct a Product Offering for sale
        to a market.
      properties:
        href:
          description: >
            Hyperlink to a Product Specification in Sellers catalog. In case
            Seller is not providing a catalog API this field is not used. The
            catalog is provided by the Seller to the Buyer during onboarding.
          type: string
        id:
          description: Unique identifier of the product specification
          type: string
      required:
        - id
      type: object
    RelatedContactInformation:
      description: |
        Contact information of an individual or organization playing a role for
        this Entity. The rule for mapping a represented attribute value to a
        `role` is to use the _lowerCamelCase_ pattern e.g. 
        - Buyer Order Item Contact: `role=buyerOrderItemContact` 
        - Buyer Implementation Contact: `role=buyerImplementationContact` 
        - Buyer Technical Contact: `role=buyerTechnicalContact`
      properties:
        number:
          description: Phone number
          type: string
        emailAddress:
          description: Email address
          type: string
        role:
          description: A role the party plays in a given context.
          type: string
        postalAddress:
          $ref: "#/components/schemas/FieldedAddress"
        organization:
          description: The organization or company that the contact belongs to
          type: string
        name:
          description: Name of the contact
          type: string
        numberExtension:
          description: Phone number extension
          type: string
      required:
        - emailAddress
        - name
        - number
        - role
      type: object
    RelatedGeographicSite:
      description: >-
        A  Geographic Site  and an associated role as installation address,
        delivery address, etc....
      properties:
        role:
          description: >-
            Role of the geographic site, such as: [home delivery], [shop
            retrieval]) MEF: The role that the Site plays, e.g. Billing Address,
            UNI Site, or ENNI Site.
          type: string
        id:
          description: Unique identifier of the geographic site
          type: string
        href:
          description: Unique reference of the geographic site
          type: string
      required:
        - id
        - role
      type: object
    Role:
      description: >-
        MEF 10.4 sec. 10.3 - Indicates how EI Frames mapped to the EVC End Point
        can be forwarded
      enum:
        - ROOT
        - LEAF
        - TRUNK
      type: string
    SVlanIdControl:
      description: >-
        MEF 26.2 sec. 13.2 - The value of the S-VLAN ID Control Service
        Attribute is FULL or PARTIAL. When the value is FULL, the Operator can
        support only a single SP/SO at the ENNI. In other words, S-VLAN IDs at
        the ENNI can only be mapped to OVC End Points for a single SP/SO. When
        the value is PARTIAL, there can be multiple SP/SOs using the ENNI and
        different S-VLAN IDs can be mapped to OVC End Points for different
        SP/SOs.
      enum:
        - FULL
        - PARTIAL
      type: string
    ShortDuration:
      description: >-
        This class is used to describe durations expressed in minutes or smaller
        time units
      properties:
        shortDurationValue:
          description: >-
            The value of the duration. For example, if the duration is 20 ms,
            this element is 20.
          type: integer
        shortDurationUnits:
          description: >-
            The unit of measure in the duration. For example, if an interval is
            2ms, this element is MS.
          $ref: "#/components/schemas/ShortDurationUnits"
      required:
        - shortDurationUnits
        - shortDurationValue
      type: object
    ShortDurationUnits:
      description: >-
        The unit of measure in the duration. For example, if an interval is 2ms,
        this element is MS.
      enum:
        - NS
        - US
        - MS
        - SEC
        - MIN
      type: string
    SlsCosNameEntry:
      description: >-
        This is the specification of Performance Metrics (and parameters) for
        one Class of Service. The first element is the CoS Name. This MUST be
        unique, i.e. there can not be two instances of this Class with the same
        CoS Name. The CoS Name is followed by three parameters and then lists of
        Performance Metrics.
      properties:
        thresholdC:
          description: >-
            MEF 10.4 sec. 8.8 and MEF 26.2 sec. 12.13 - thresholdC is a real
            number in the range [0,1] used as a threshold to determine whether a
            given time interval ?tk has high loss.
          maximum: 1
          minimum: 0
          type: number
        oneWayConsecutiveHighLossIntervalsPmMetric:
          description: >-
            MEF 10.4 sec. 8.8.9 and MEF 26.2 sec. 12.13.9 -
            oneWayConsecutiveHighLossIntervalsPmMetric is a reference to zero or
            more instances of One Way Consecutive High Loss Intervals
            Performance Metric. Each reference contains a set of parameters and
            performance objective for the Performance Metric. If there are 0
            instances then this Class of Service does not have an objective for
            this One Way CHLI. If there are multiple instances for this Class of
            Service then at least one of the parameters must be different
            between the instances.
          items:
            $ref: "#/components/schemas/OneWayConsecutiveHighLossIntervalsPmMetric"
          minItems: 0
          type: array
          uniqueItems: true
        oneWayFrameDelayPmMetric:
          description: >-
            MEF 10.4 sec. 8.8.2 and MEF 26.2 sec. 12.13.2 -
            oneWayFrameDelayPmMetric is a reference to zero or more instances of
            One Way Frame Delay Performance Metric. Each reference contains a
            set of parameters and performance objective for the Performance
            Metric. If there are 0 instances then this Class of Service does not
            have an objective for this One Way Frame Delay. If there are
            multiple instances for this Class of Service then at least one of
            the parameters must be different between the instances.
          items:
            $ref: "#/components/schemas/OneWayFrameDelayPmMetric"
          minItems: 0
          type: array
          uniqueItems: true
        oneWayInterFrameDelayVariationPmMetric:
          description: >-
            MEF 10.4 sec. 8.8.5 and MEF 26.2 sec. 12.13.5 -
            oneWayInterFrameDelayVariationPmMetric is a reference to zero or
            more instances of One Way Inter Frame Delay Variation Performance
            Metric. Each reference contains a set of parameters and performance
            objective for the Performance Metric. If there are 0 instances then
            this Class of Service does not have an objective for this One Way
            Frame Delay. If there are multiple instances for this Class of
            Service then at least one of the parameters must be different
            between the instances.
          items:
            $ref: "#/components/schemas/OneWayInterFrameDelayVariationPmMetric"
          minItems: 0
          type: array
          uniqueItems: true
        oneWayMeanFrameDelayPmMetric:
          description: >-
            MEF 10.4 sec. 8.8.3 and MEF 26.2 sec. 12.13.3 -
            oneWayMeanFrameDelayPmMetric is a reference to zero or more
            instances of One Way Mean Frame Delay Performance Metric. Each
            reference contains a set of parameters and performance objective for
            the Performance Metric. If there are 0 instances then this Class of
            Service does not have an objective for this One Way Mean Frame
            Delay. If there are multiple instances for this Class of Service
            then at least one of the parameters must be different between the
            instances.
          items:
            $ref: "#/components/schemas/OneWayMeanFrameDelayPmMetric"
          minItems: 0
          type: array
          uniqueItems: true
        oneWayGroupAvailabilityPmMetric:
          description: >-
            MEF 10.4 sec. 8.8.11 and MEF 26.2 sec. 12.13.10 -
            oneWayGroupAvailabilityPmMetric is a reference to zero or more
            instances of One Way Group Availability Performance Metric. Each
            reference contains a set of parameters and performance objective for
            the Performance Metric. If there are 0 instances then this Class of
            Service does not have an objective for this One Way Group
            Availability. If there are multiple instances for this Class of
            Service then at least one of the parameters must be different
            between the instances.
          items:
            $ref: "#/components/schemas/OneWayAvailabilityPmMetric"
          minItems: 0
          type: array
          uniqueItems: true
        oneWayAvailabilityPmMetric:
          description: >-
            MEF 10.4 sec. 8.8.7 and MEF 26.2 sec. 12.13.7 -
            oneWayAvailabilityPmMetric is a reference to zero or more instances
            of One Way Availability Performance Metric. Each reference contains
            a set of parameters and performance objective for the Performance
            Metric. If there are 0 instances then this Class of Service does not
            have an objective for this One Way Availability. If there are
            multiple instances for this Class of Service then at least one of
            the parameters must be different between the instances.
          items:
            $ref: "#/components/schemas/OneWayAvailabilityPmMetric"
          minItems: 0
          type: array
          uniqueItems: true
        oneWayHighLossIntervalsPmMetric:
          description: >-
            MEF 10.4 sec. 8.8.8 and MEF 26.2 sec. 12.13.8 -
            oneWayHighLossIntervalsPmMetric is a reference to zero or more
            instances of One Way High Loss Intervals Performance Metric. Each
            reference contains a set of parameters and performance objective for
            the Performance Metric. If there are 0 instances then this Class of
            Service does not have an objective for this One Way HLI. If there
            are multiple instances for this Class of Service then at least one
            of the parameters must be different between the instances.
          items:
            $ref: "#/components/schemas/OneWayHighLossIntervalPmMetric"
          minItems: 0
          type: array
          uniqueItems: true
        oneWayCompositePmMetric:
          description: >-
            MEF 10.4 sec. 8.8.10 - oneWayCompositePmMetric is a reference to
            zero or more instances of One Way Composite Performance Metric. Each
            reference contains a set of parameters and performance objective for
            the Performance Metric. If there are 0 instances then this Class of
            Service does not have an objective for this One Way Composite
            Performance. If there are multiple instances for this Class of
            Service then at least one of the parameters must be different
            between the instances.
          items:
            $ref: "#/components/schemas/OneWayCompositePmMetric"
          minItems: 0
          type: array
          uniqueItems: true
        oneWayFrameLossRatioPmMetric:
          description: >-
            MEF 10.4 sec. 8.8.6 and MEF 26.2 sec. 12.13.6 -
            oneWayFrameLossRatioPmMetric is a reference to zero or more
            instances of One Way Frame Loss Ratio Performance Metric. Each
            reference contains a set of parameters and performance objective for
            the Performance Metric. If there are 0 instances then this Class of
            Service does not have an objective for this One Way Frame Loss
            Ratio. If there are multiple instances for this Class of Service
            then at least one of the parameters must be different between the
            instances.
          items:
            $ref: "#/components/schemas/OneWayFrameLostRatioPmMetric"
          maxItems: 1
          minItems: 0
          type: array
          uniqueItems: true
        consecutiveIntervalN:
          description:
            "MEF 10.4 sec. 8.8 and MEF 26.2 sec. 12.13 - consectiveIntervalN is
            an integer ? 1, used to identify how many consecutive
            ?\U0001D461\U0001D458 intervals must have high loss to trigger a
            change in Availability."
          minimum: 1
          type: integer
        deltaT:
          description: >-
            MEF 10.4 sec. 8.8 and MEF 26.2 sec. 12.13 - deltaT is a time
            duration in seconds much smaller than timeInterval. This is used,
            primarily, in calculations associated with Availability, High Loss
            Intervals and Consecutive High Loss Intervals. MEF 10.4 and MEF 26.2
            refer to this as ?t and the k-th interval starting at ts is referred
            to as ?tk (k is subscript).
          type: integer
        oneWayFrameDelayRangePmMetric:
          description: >-
            MEF 10.4 sec. 8.8.4 and MEF 26.2 sec. 12.13.4 -
            oneWayFrameDelayRangePmMetric is a reference to zero or more
            instances of One Way Frame Delay Range Performance Metric. Each
            reference contains a set of parameters and performance objective for
            the Performance Metric. If there are 0 instances then this Class of
            Service does not have an objective for this One Way Frame Delay
            Range. If there are multiple instances for this Class of Service
            then at least one of the parameters must be different between the
            instances.
          items:
            $ref: "#/components/schemas/OneWayFrameDelayRangePmMetric"
          minItems: 0
          type: array
          uniqueItems: true
        cosName:
          description: This is the CoS Name for this PM Entry.
          minLength: 1
          type: string
      required:
        - consecutiveIntervalN
        - cosName
        - deltaT
        - oneWayAvailabilityPmMetric
        - oneWayCompositePmMetric
        - oneWayConsecutiveHighLossIntervalsPmMetric
        - oneWayFrameDelayPmMetric
        - oneWayFrameDelayRangePmMetric
        - oneWayFrameLossRatioPmMetric
        - oneWayGroupAvailabilityPmMetric
        - oneWayHighLossIntervalsPmMetric
        - oneWayInterFrameDelayVariationPmMetric
        - oneWayMeanFrameDelayPmMetric
        - thresholdC
      type: object
    SourceMacAddressLimit:
      description: >-
        This limits the number of source MAC addresses that can be used in
        ingress  frame mapped to the End Point of all types over a time
        interval. It is a recommendation that each Ingress EI Frame with a
        source MAC address that would exceed the limit be discarded by the
        Carrier Ethernet Network.
      properties:
        limit:
          description: >-
            The number of MAC source addresses that will not subject an Ingress
            EI Frame to discard during the time interval.
          minimum: 1
          type: integer
        interval:
          $ref: "#/components/schemas/ShortDuration"
      required:
        - interval
        - limit
      type: object
    SubscriberMegMip:
      description: >-
        MEF 10.4 sec. 10.13 - The value of the EVC EP Subscriber MEG MIP Service
        Attribute is either None or an integer in the range 0 - 7 that indicates
        the MEG Level of a Subscriber MEG MIP.
      enum:
        - "0"
        - "1"
        - "2"
        - "3"
        - "4"
        - "5"
        - "6"
        - "7"
        - NONE
      type: string
    SubscriberUniCommon:
      description: >-
        This class contains all of the Subscriber UNI Services Attributes that
        are used in all four Business Functions (POQ, Quote, Order, Inventory).
        At this time, this includes all of the Subscriber UNI Service
        Attributes. This class is used to compose the SubscriberUNI class which
        has one file for each Business Function that differ in terms of the
        Service Attributes that are "Required" for the Business Function (rather
        than "Optional").
      properties:
        listOfPhyLinks:
          description: >-
            MEF 10.4 sec. 9.4 - The value of the Subscriber UNI List of Physical
            Links Service Attribute is a list of 5-tuples of the form <id,
            physicalLink, synchronousEthernet, precisionTiming,
            demarcConnectorType>, with one list item for each physical link. The
            value of id is an identifier for the physical link. The value of
            physicalLink is the specific Ethernet physical layer type.
            synchronousEthernet indicates if synchronous Ethernet is used on the
            physical link and has the value Enabled or Disabled. The value of
            precisionTiming indicates if the Precision Time Protocol is used on
            the physical link and has the value Enabled or Disabled. The value
            of demarcConnectorType specifies the type of connector used. Note
            that the id and the physicalLink come from the
            CarrierEthernetPhysicalLink class.
          items:
            $ref: "#/components/schemas/UniPhysicalLink"
          minItems: 0
          type: array
          uniqueItems: false
        virtualFrameMap:
          description: >-
            MEF 10.4 sec. 9.2 and sec. 9.3 - When the value of the Subscriber
            UNI Instantiation Service Attribute = Virtual, there must exist a
            map that maps the set of Virtual Frames that cross the UNI to a
            sequence of pairs of the form ?s,t? where s is a standard Ethernet
            frame per Clause 3 of IEEE Std 802.3 - 2015 [5] and t is the arrival
            time at the UNI for all bits in s. Since MEF 10.4 does not specify
            the contents or format of this map, it is currently defined as an
            arbitrary length string.
          items:
            $ref: "#/components/schemas/VirtualFrameMap"
          maxItems: 1
          minItems: 0
          type: array
          uniqueItems: true
        portConversation:
          description: >-
            MEF 10.4 sec. 9.6 - A mapping of Port Conversation IDs (i.e., VLAN
            IDs or zero for untagged frames) to an ordered list of physical
            links if there are multiple physical links in the UNI and the link
            aggregation is ALL_ACTIVE.
          items:
            $ref: "#/components/schemas/ConversationIdToAggregationLinkMap"
          minItems: 0
          type: array
          uniqueItems: false
        maximumNumberOfEndPoints:
          description: >-
            MEF 10.4 sec. 9.9 - The maximum number of OVC End Points that the
            Operator CEN can support at the UNI.
          maximum: 4094
          minimum: 1
          type: integer
        lagLinkMeg:
          $ref: "#/components/schemas/EnabledDisabled"
        l2cpAddressSet:
          description: >-
            MEF 10.4 sec. 9.16 and MEF 45.1 sec. 8.1 - L2CP Address Set Service
            Attribute is defined in MEF 45.1. CTA CEVLAN Tag Aware for
            VLAN-based services where the CE-VLAN ID is used to map a frame to a
            service. CTB CVLAN Tag Blind for Port-based services where the
            CE-VLAN ID not used to map a frame to a service. CTB2 CVLAN Tag
            Blind Option 2 for point-to-point Port-based services that support
            the EPL Option 2 L2CP processing.
          $ref: "#/components/schemas/L2cpAddressSet"
        linkOAM:
          $ref: "#/components/schemas/EnabledDisabled"
        meg:
          $ref: "#/components/schemas/EnabledDisabled"
        linkAggregation:
          description: >-
            MEF 10.4 sec. 9.5 - Data type representing Link Aggregation types.
            NONE-No Link Aggregation is used. 2_LINK_ACTIVE_STANDBY-The SP
            network uses Link Aggregation as in either Clause 5.6.1 of IEEE Std
            802.1AX-2008 [2] or Clause 6.7.1 of IEEE Std 802.1AX-2014 with one
            Link Aggregation Group(LAG) across the links supporting the UNI/ENNI
            such that all Service Frames are carried on only one of the two
            links when both links are operational. ALL_ACTIVE-The SP Network
            uses Link Aggregation as specified in Clause 5.3 of IEEE Std
            802.1AX-2014, including the use of the version 2 LACPDUs as
            specified in Clause 5.3.1h of IEEE Std 802.1AZ-2014, with one Link
            Aggregation Group (LAG) across the links. OTHER-The
            Operator/Subscriber/Service Provider agree on another other
            resiliency mechanism.
          $ref: "#/components/schemas/LinkAggregation"
        l2cpPeering:
          $ref: "#/components/schemas/L2cpPeering"
        maximumNumberOfCtagVlanIdsPerEndPoint:
          description: >-
            MEF 10.4 sec. 9.10 - An integer greater than or equal to 1 that
            limits the number of C-Tag VLAN IDs that can map to each EVC End
            Point.
          maximum: 4094
          minimum: 1
          type: integer
        tokenShare:
          $ref: "#/components/schemas/EnabledDisabled"
        maximumServiceFrameSize:
          description: >-
            MEF 10.4 sec. 9.8 - Specifies the maximum size of Service Frames
            that can be transmitted across UNI.
          minimum: 1522
          type: integer
        envelopes:
          description: >-
            MEF 10.4 sec. 9.12 - The Envelopes and Envelope Coupling Flag values
            to which Bandwidth Profile Flows can be mapped. Value is list of
            {envelopeID, couplingFlagForIndexZero}.
          items:
            $ref: "#/components/schemas/Envelope"
          minItems: 0
          type: array
          uniqueItems: true
        instantiation:
          description: >-
            MEF 10.4 sec. 9.2 - When the value is Physical, the UNI is
            implemented using one or more instances of a standard Physical
            Layer. When the value is Virtual, the physical layer is not
            specified.
          $ref: "#/components/schemas/Instantiation"
      type: object
    TaggedL2cpFrameProcessing:
      description: >-
        MEF 26.2 sec. 10.2 and MEF 45 sec. 8.3 - Reflects the capability of the
        ENNI to process S-VLAN-tagged L2CP Frames in an 802.1 compliant manner.
        The allowed values are "802_1_COMPLIANT" or "802_1_NON_COMPLIANT". A
        value of 802_1_COMPLIANT means the ENNI will apply the special
        forwarding rules to Tagged L2CP ENNI Frames that map to a VUNI or an OVC
        End Point supporting a service other than EPL with EPL Option 2 L2CP
        processing. A value of 802_1_NON_COMPLIANT means the ENNI will pass any
        Tagged L2CP ENNI Frames. There is an ENNI Tagged L2CP Frame Processing
        Multilateral Attribute for each ENNI.
      enum:
        - 802_1_COMPLIANT
        - 802_1_NON_COMPLIANT
      type: string
    Time:
      properties:
        month:
          maximum: 12
          minimum: 1
          type: integer
        hour:
          maximum: 23
          minimum: 0
          type: integer
        year:
          minimum: 1900
          type: integer
        day:
          maximum: 31
          minimum: 1
          type: integer
        minute:
          maximum: 59
          minimum: 0
          type: integer
        second:
          maximum: 59
          minimum: 0
          type: integer
      required:
        - day
        - hour
        - minute
        - month
        - second
        - year
      type: object
    TimeUnit:
      description: |
        Represents a unit of time.
        Reference: MEF 79 (Sn 8.4.3.1/8.4.3.2)
      enum:
        - calendarMonths
        - calendarDays
        - calendarHours
        - calendarMinutes
        - businessDays
        - businessHours
        - businessMinutes
      type: string
    UniConnectorGender:
      description: >-
        This indicates whether the Subscriber is presented with a SOCKET
        (common) or a PLUG (less common).
      enum:
        - SOCKET
        - PLUG
      type: string
    UniConnectorType:
      description: >-
        This indicates the type of connector that is presented to the
        Subscriber.
      enum:
        - SC
        - LC
        - RJ45
        - FC
        - D4
        - OTHER
      type: string
    UniPhysicalLink:
      allOf:
        - $ref: "#/components/schemas/CarrierEthernetPhysicalLink"
        - $ref: "#/components/schemas/UniSpecifcAttributes"
      description: >-
        This class describes the Physical Link attributes at a UNI. It is a
        4-tuple {carrierEthernet, frequency sync enable, PTP enable, connector}.
        carrierEthernet is a 2-tuple containing an id and physical link type.
    UniSpecifcAttributes:
      properties:
        uniConnectorGender:
          description: >-
            This indicates whether the Subscriber is presented with a SOCKET
            (common) or a PLUG (less common).
          $ref: "#/components/schemas/UniConnectorGender"
        synchronousEthernet:
          $ref: "#/components/schemas/EnabledDisabled"
        uniConnectorType:
          description: >-
            This indicates the type of connector that is presented to the
            Subscriber.
          $ref: "#/components/schemas/UniConnectorType"
        precisionTiming:
          $ref: "#/components/schemas/EnabledDisabled"
      required:
        - precisionTiming
        - synchronousEthernet
        - uniConnectorGender
        - uniConnectorType
      type: object
    VirtualFrameMap:
      description: >-
        A map for virtual frame mapping.   The absence of this attribute
        corresponds to a Service Attribute value of Not Applicable. Reference
        MEF 10.4 Section 9.3 Subscriber UNI Virtual Frame Map Service Attribute.
      properties:
        vfMap:
          description: >-
            MEF 10.4 sec. 9.2 and sec. 9,3 - When the value of the Subscriber
            UNI Instantiation Service Attribute = Virtual, there must exist a
            map that maps the set of Virtual Frames that cross the UNI to a
            sequence of pairs of the form?s,t where s is a standard Ethernet
            frame per Clause 3 of IEEE Std 802.3 - 2015 [5] and t is the arrival
            time at the UNI for all bits in s. Since MEF 10.4 does not specify
            the contents or format of this map, it is currently defined as an
            arbitrary length string.
          minLength: 0
          type: string
      type: object
    VlanType:
      description: An indication about how the Vlan List argument is interpreted
      enum:
        - LIST
        - UT/PT
      type: string
