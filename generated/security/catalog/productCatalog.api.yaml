openapi: 3.0.1
info:
  description: "**This file forms part of MEF W142**\n\nThis API implements the Business\
    \ Requirements described in MEF W127.\n\n**This specification represents MEF work\
    \ in progress and is subject to change.**  \n\nThis API implements Business Requirements\
    \ that are defined in MEF Standard: MEF W127\n\nSupported use cases:\n- Retrieve\
    \ List of Product Categories\n- Retrieve Product Category by Product Category\
    \ Identifier\n- Retrieve List of Product Offerings\n- Retrieve Product Offering\
    \ by Product Offering Identifier\n- Retrieve List of Product Specifications\n\
    - Retrieve Product Specification by Product Specification Identifier\n- Register\
    \ for Notifications \n- Unregister Notifications\n- Retrieve Notification Hub\
    \ Registry\n"
  title: Product Catalog
  version: 2.0.0-RC
servers:
- url: "http://{serverBase}/mefApi/sonata/productCatalog/v2/"
security:
- oauth2MEFLSOAPI:
  - default
tags:
- name: category
- name: productOffering
- name: productSpecification
paths:
  /category:
    get:
      description: This operation lists or finds Category entities
      operationId: listCategory
      parameters:
      - description: Id of the Parent of this Product Category.
        in: query
        name: parentCategory.id
        required: false
        schema:
          type: string
      - description: "The date and time the Product Category was created or most recently\
          \ updated, greater than"
        in: query
        name: lastUpdate.gt
        required: false
        schema:
          format: date-time
          type: string
      - description: "The date and time the Product Category was created or most recently\
          \ updated, less than"
        in: query
        name: lastUpdate.lt
        required: false
        schema:
          format: date-time
          type: string
      - description: The unique identifier of the organization that is acting as a
          Buyer. It MUST be specified in the request only when the requester represents
          more than one Buyer.
        in: query
        name: buyerId
        required: false
        schema:
          type: string
      - description: The unique identifier of the organization that is acting as the
          Seller. It MUST be specified in the request only when the responding entity
          represents more than one Seller.
        in: query
        name: sellerId
        required: false
        schema:
          type: string
      - description: Requested index for the start of item to be provided in response
          requested by the client. Note that the index starts with "0".
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
      - description: Requested number of items to be provided in response requested
          by client
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                items:
                  $ref: '#/components/schemas/ProductCategory'
                type: array
          description: OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)
          headers:
            X-Pagination-Throttled:
              description: |
                Used to indicate that the result page was throttled to maximum possible size  and there are additional results that can be fetched
              schema:
                type: boolean
            X-Total-Count:
              description: |
                The total number of matching items. E.g. if there are 50 matching items in total, but the request has offset=10 and limit=10, then the X-Total-Count is 50.
              schema:
                type: integer
            X-Result-Count:
              description: The number of items included in the response
              schema:
                type: integer
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal Server Error
      security:
      - oauth2MEFLSOAPI:
        - listCategory
      summary: Lists or finds Category objects
      tags:
      - category
  /category/{id}:
    get:
      description: This operation retrieves a Category entity.
      operationId: retrieveCategory
      parameters:
      - description: Identifier of the Category
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The unique identifier of the organization that is acting as a
          Buyer. MUST be specified in the request only when the requester represents
          more than one Buyer.
        in: query
        name: buyerId
        required: false
        schema:
          type: string
      - description: The unique identifier of the organization that is acting as the
          Seller. MUST be specified in the request only when responding entity represents
          more than one Seller.
        in: query
        name: sellerId
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ProductCategory'
          description: OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal Server Error
      security:
      - oauth2MEFLSOAPI:
        - retrieveCategory
      summary: Retrieves a Category by ID
      tags:
      - category
  /productOffering:
    get:
      description: This operation list or find ProductOffering entities
      operationId: listProductOffering
      parameters:
      - description: The commercial name of the Product Offering
        in: query
        name: name
        required: false
        schema:
          type: string
      - description: "The date and time the Product Offering was created or most recently\
          \ updated, greater than"
        in: query
        name: lastUpdate.gt
        required: false
        schema:
          format: date-time
          type: string
      - description: "The date and time the Product Offering was created or most recently\
          \ updated, less than"
        in: query
        name: lastUpdate.lt
        required: false
        schema:
          format: date-time
          type: string
      - description: Lifecycle Status of the Product Offering
        in: query
        name: lifecycleStatus
        required: false
        schema:
          enum:
          - announced
          - endOfSale
          - endOfSupport
          - obsolete
          - onHold
          - orderable
          - pilotBeta
          - rejected
          type: string
      - description: "The name of the Seller's offer arrangement (such as a framework\
          \ agreement).  **Note:** The list of allowable values for agreements should\
          \ be negotiated between the Buyer and the Seller, during the integration\
          \ phase. Ultimately it will be the enumerated set of values (it's problematic\
          \ to define the enumerated values globally for any operator)."
        in: query
        name: agreement
        required: false
        schema:
          type: string
      - description: |-
          The names of the sales channels through which the Product Offering is made available to the Buyer to order. **Note:** The list of allowable values for selling channels should be negotiated between the Buyer and the Seller, during the integration phase.  Ultimately it will be the enumerated set of values (it's problematic to define
           the enumerated values globally for any operator).
        in: query
        name: channel
        required: false
        schema:
          type: string
      - description: "The names of the market segments  targeted for the Product Offering.\
          \ **Note:** The list of allowable values for selling market segments should\
          \ be negotiated between the Buyer and the Seller, during the integration\
          \ phase.  Ultimately it will be the enumerated set of values (it's problematic\
          \ to define the enumerated values globally for any operator)."
        in: query
        name: marketSegment
        required: false
        schema:
          type: string
      - description: Country where the products are offered by the Seller to potential
          Buyers.
        in: query
        name: region.country
        required: false
        schema:
          type: string
      - description: Identifier of the Category that Product Offering is the direct
          or transitive member of. Direct member - there is a direct relation between
          Category and Product Offering. Transitive member - there is a relation between
          one of the sub-categories and Product Offering.
        in: query
        name: category.id
        required: false
        schema:
          type: string
      - description: A Product Specification Reference to the detailed description
          of the specifications and attributes defining all of the Product Offering
          characteristics.
        in: query
        name: productSpecification.id
        required: false
        schema:
          type: string
      - description: The unique identifier of the organization that is acting as a
          Buyer. MUST be specified in the request only when the requester represents
          more than one Buyer.
        in: query
        name: buyerId
        required: false
        schema:
          type: string
      - description: The unique identifier of the organization that is acting as the
          Seller. MUST be specified in the request only when the responding entity
          represents more than one Seller.
        in: query
        name: sellerId
        required: false
        schema:
          type: string
      - description: Requested index for the start of an item to be provided in response
          requested by the client. Note that the index starts with "0".
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
      - description: Requested number of items to be provided in response requested
          by client
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                items:
                  $ref: '#/components/schemas/ProductOffering_Find'
                type: array
          description: OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)
          headers:
            X-Pagination-Throttled:
              description: |
                Used to indicate that the result page was throttled to maximum possible size  and there are additional results that can be fetched
              schema:
                type: boolean
            X-Total-Count:
              description: |
                The total number of matching items. E.g. if there are 50 matching items in total, but the request has offset=10 and limit=10, then the X-Total-Count is 50.
              schema:
                type: integer
            X-Result-Count:
              description: The number of items included in the response
              schema:
                type: integer
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal Server Error
      security:
      - oauth2MEFLSOAPI:
        - listProductOffering
      summary: List or find Product Offering objects
      tags:
      - productOffering
  /productOffering/{id}:
    get:
      description: This operation retrieves a ProductOffering entity. Attribute selection
        is enabled for all first level attributes.
      operationId: retrieveProductOffering
      parameters:
      - description: Identifier of the ProductOffering
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The unique identifier of the organization that is acting as a
          Buyer. MUST be specified in the request only when the requester represents
          more than one Buyer.
        in: query
        name: buyerId
        required: false
        schema:
          type: string
      - description: The unique identifier of the organization that is acting as the
          Seller. MUST be specified in the request only when responding entity represents
          more than one Seller.
        in: query
        name: sellerId
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ProductOffering'
          description: OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal Server Error
      security:
      - oauth2MEFLSOAPI:
        - retrieveProductOffering
      summary: Retrieves a ProductOffering by ID
      tags:
      - productOffering
  /productSpecification:
    get:
      description: This operation list or find ProductSpecification entities
      operationId: listProductSpecification
      parameters:
      - description: The name of the Product Specification (may not be unique)
        in: query
        name: name
        required: false
        schema:
          type: string
      - description: Lifecycle Status of the Product Specification
        in: query
        name: lifecycleStatus
        required: false
        schema:
          enum:
          - obsolete
          - published
          type: string
      - description: "The date and time the Product Specification was created or most\
          \ recently updated, greater than"
        in: query
        name: lastUpdate.gt
        required: false
        schema:
          format: date-time
          type: string
      - description: "The date and time the Product Specification was created or most\
          \ recently updated, less than"
        in: query
        name: lastUpdate.lt
        required: false
        schema:
          format: date-time
          type: string
      - description: The unique identifier of the organization that is acting as a
          Buyer. MUST be specified in the request only when the requester represents
          more than one Buyer.
        in: query
        name: buyerId
        required: false
        schema:
          type: string
      - description: The unique identifier of the organization that is acting as the
          Seller. MUST be specified in the request only when the responding entity
          represents more than one Seller.
        in: query
        name: sellerId
        required: false
        schema:
          type: string
      - description: Requested index for the start of an item to be provided in response
          requested by the client. Note that the index starts with "0".
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
      - description: Requested number of items to be provided in response requested
          by client
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                items:
                  $ref: '#/components/schemas/ProductSpecification_Find'
                type: array
          description: OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)
          headers:
            X-Pagination-Throttled:
              description: |
                Used to indicate that the result page was throttled to maximum possible size  and there are additional results that can be fetched
              schema:
                type: boolean
            X-Total-Count:
              description: |
                The total number of matching items. E.g. if there are 50 matching items in total, but the request has offset=10 and limit=10, then the X-Total-Count is 50.
              schema:
                type: integer
            X-Result-Count:
              description: The number of items included in the response
              schema:
                type: integer
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal Server Error
      security:
      - oauth2MEFLSOAPI:
        - listProductSpecification
      summary: List or find ProductSpecification objects
      tags:
      - productSpecification
  /productSpecification/{id}:
    get:
      description: This operation retrieves a ProductSpecification entity. Attribute
        selection is enabled for all first level attributes.
      operationId: retrieveProductSpecification
      parameters:
      - description: Identifier of the ProductSpecification
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The unique identifier of the organization that is acting as a
          Buyer. MUST be specified in the request only when the requester represents
          more than one Buyer.
        in: query
        name: buyerId
        required: false
        schema:
          type: string
      - description: The unique identifier of the organization that is acting as the
          Seller. MUST be specified in the request only when responding entity represents
          more than one Seller.
        in: query
        name: sellerId
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/ProductSpecification'
          description: OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal Server Error
      security:
      - oauth2MEFLSOAPI:
        - retrieveProductSpecification
      summary: Retrieves a ProductSpecification by ID
      tags:
      - productSpecification
  /hub:
    post:
      description: "Sets the communication endpoint address the service instance must\
        \ use to deliver information about its health state, execution state, failures\
        \ and metrics."
      operationId: registerListener
      parameters:
      - description: |-
          The unique identifier of the organization that is acting as a Buyer. MUST be specified in the request only when the requester represents more than one Buyer.
          Reference: MEF 57.2 (Sn 9.18)
        in: query
        name: buyerId
        required: false
        schema:
          type: string
      - description: |-
          The unique identifier of the organization that is acting as the Seller. MUST be specified in the request only when responding entity represents more than one Seller.
          Reference: MEF 57.2 (Sn 9.18)
        in: query
        name: sellerId
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/EventSubscriptionInput'
        description: Data containing the callback endpoint to deliver the information
        required: true
      responses:
        "201":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/EventSubscription'
          description: Subscribed
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal Server Error
        "501":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error501'
          description: Method not implemented.
      security:
      - oauth2MEFLSOAPI:
        - registerListener
      summary: Register a listener
      tags:
      - events subscription
  /hub/{id}:
    delete:
      description: "Resets the communication endpoint address the service instance\
        \ must use to deliver information about its health state, execution state,\
        \ failures and metrics."
      operationId: unregisterListener
      parameters:
      - description: The id of the registered listener
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: |-
          The unique identifier of the organization that is acting as a Buyer. MUST be specified in the request only when the requester represents more than one Buyer.
          Reference: MEF 57.2 (Sn 9.18)
        in: query
        name: buyerId
        required: false
        schema:
          type: string
      - description: |-
          The unique identifier of the organization that is acting as the Seller. MUST be specified in the request only when responding entity represents more than one Seller.
          Reference: MEF 57.2 (Sn 9.18)
        in: query
        name: sellerId
        required: false
        schema:
          type: string
      responses:
        "204":
          description: Deleted
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal Server Error
        "501":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error501'
          description: Method not implemented.
      security:
      - oauth2MEFLSOAPI:
        - unregisterListener
      summary: Unregister a listener
      tags:
      - events subscription
    get:
      description: This operation retrieves a hub entity.
      operationId: retrieveHub
      parameters:
      - description: Identifier of the Hub
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: |-
          The unique identifier of the organization that is acting as the a Buyer. MUST be specified in the request only when the requester represents more than one Buyer.
          Reference: MEF 57.2 (Sn 9.18)
        in: query
        name: buyerId
        required: false
        schema:
          type: string
      - description: |-
          The unique identifier of the organization that is acting as the Seller. MUST be specified in the request only when responding entity represents more than one Seller.
          Reference: MEF 57.2 (Sn 9.18)
        in: query
        name: sellerId
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/EventSubscription'
          description: Success
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error400'
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error401'
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error404'
          description: Not Found
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error500'
          description: Internal Server Error
        "501":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error501'
          description: Method not implemented.
      security:
      - oauth2MEFLSOAPI:
        - retrieveHub
      summary: Retrieves a Hub by ID
      tags:
      - events subscription
components:
  schemas:
    AttachmentValue:
      description: "Complements the description of an element (for instance a product)\
        \ through video, pictures..."
      properties:
        attachmentId:
          description: locally unique identifier to distinguish items from the Attachment
            list.
          type: string
        author:
          description: The name of the person or organization who added the Attachment.
          type: string
        content:
          description: "The actual contents of the attachment object, if embedded,\
            \ encoded as base64. Either URL or (content and mimeType) attributes MUST\
            \ be provided during creation."
          type: string
        creationDate:
          description: The date the Attachment was added.
          format: date-time
          type: string
        description:
          description: A narrative text describing the content of the attachment
          type: string
        mimeType:
          description: "Attachment mime type such as extension file for video, picture\
            \ and document"
          type: string
        name:
          description: The name of the attachment
          type: string
        size:
          $ref: '#/components/schemas/MEFByteSize'
        source:
          $ref: '#/components/schemas/MEFBuyerSellerType'
        url:
          description: URL where the attachment is located. Either URL or (content
            and mimeType) attributes MUST be provided during creation.
          type: string
      required:
      - author
      - creationDate
      - name
      - source
      type: object
    BusinessFunctionMask:
      description: Business Function that could be executed for the given Product
        accordingly to LSO Cantata/Sonata IRPs.  Value 'all' is the wildcard - stands
        for any action.
      enum:
      - poq
      - quote
      - productOrder
      - productInventory
      - all
      type: string
    Context:
      description: Context that is defined as a two-dimensional vector of Business
        Function and Product Action.
      properties:
        productAction:
          $ref: '#/components/schemas/ProductActionMask'
        businessFunction:
          $ref: '#/components/schemas/BusinessFunctionMask'
      type: object
    DataSizeUnit:
      description: The unit of measure in the data size.
      enum:
      - BYTES
      - KBYTES
      - MBYTES
      - GBYTES
      - TBYTES
      - PBYTES
      - EBYTES
      - ZBYTES
      - YBYTES
      type: string
    Duration:
      description: "A Duration in a given unit of time e.g. 3 hours, or 5 days."
      properties:
        amount:
          description: "Duration (number of seconds, minutes, hours, etc.)"
          type: integer
        units:
          $ref: '#/components/schemas/TimeUnit'
      required:
      - amount
      - units
      type: object
    Error:
      description: |
        Standard Class used to describe API response error Not intended to be used directly. The `code` in the HTTP header is used as a discriminator for the type of error returned in runtime.
      properties:
        reason:
          description: Text that explains the reason for the error. This can be shown
            to a client user.
          maxLength: 255
          type: string
        message:
          description: Text that provides mode details and corrective actions related
            to the error. This can be shown to a client user.
          type: string
        referenceError:
          description: URL pointing to documentation describing the error
          format: uri
          type: string
      required:
      - reason
      type: object
    Error400:
      allOf:
      - $ref: '#/components/schemas/Error'
      - properties:
          code:
            $ref: '#/components/schemas/Error400Code'
        required:
        - code
        type: object
      description: Bad Request. (https://tools.ietf.org/html/rfc7231#section-6.5.1)
    Error400Code:
      description: |-
        One of the following error codes:
        - missingQueryParameter: The URI is missing a required query-string parameter
        - missingQueryValue: The URI is missing a required query-string parameter value
        - invalidQuery: The query section of the URI is invalid.
        - invalidBody: The request has an invalid body
      enum:
      - missingQueryParameter
      - missingQueryValue
      - invalidQuery
      - invalidBody
      type: string
    Error401:
      allOf:
      - $ref: '#/components/schemas/Error'
      - properties:
          code:
            $ref: '#/components/schemas/Error401Code'
        required:
        - code
        type: object
      description: Unauthorized.  (https://tools.ietf.org/html/rfc7235#section-3.1)
    Error401Code:
      description: |-
        One of the following error codes:
        - missingCredentials: No credentials provided.
        - invalidCredentials: Provided credentials are invalid or expired
      enum:
      - missingCredentials
      - invalidCredentials
      type: string
    Error403:
      allOf:
      - $ref: '#/components/schemas/Error'
      - properties:
          code:
            $ref: '#/components/schemas/Error403Code'
        required:
        - code
        type: object
      description: Forbidden. This code indicates that the server understood the request
        but refuses to authorize it. (https://tools.ietf.org/html/rfc7231#section-6.5.3)
    Error403Code:
      description: |-
        This code indicates that the server understood
        the request but refuses to authorize it because
        of one of the following error codes:
        - accessDenied: Access denied
        - forbiddenRequester: Forbidden requester
        - tooManyUsers: Too many users
      enum:
      - accessDenied
      - forbiddenRequester
      - tooManyUsers
      type: string
    Error404:
      allOf:
      - $ref: '#/components/schemas/Error'
      - properties:
          code:
            description: |-
              The following error code:
              - notFound: A current representation for the target resource not found
            enum:
            - notFound
            type: string
        required:
        - code
        type: object
      description: Resource for the requested path not found. (https://tools.ietf.org/html/rfc7231#section-6.5.4)
    Error500:
      allOf:
      - $ref: '#/components/schemas/Error'
      - properties:
          code:
            description: |-
              The following error code:
              - internalError: Internal server error - the server encountered an unexpected condition that prevented it from fulfilling the request.
            enum:
            - internalError
            type: string
        required:
        - code
        type: object
      description: Internal Server Error. (https://tools.ietf.org/html/rfc7231#section-6.6.1)
    Error501:
      allOf:
      - $ref: '#/components/schemas/Error'
      - properties:
          code:
            description: |-
              The following error code:
              - notImplemented: Method not supported by the server
            enum:
            - notImplemented
            type: string
        required:
        - code
        type: object
      description: Not Implemented. Used in case Seller is not supporting an optional
        operation (https://tools.ietf.org/html/rfc7231#section-6.6.2)
    EventSubscription:
      description: |
        This resource is used to respond to notification subscriptions.
      properties:
        callback:
          description: The value provided by the Buyer in `EventSubscriptionInput`
            during notification registration
          type: string
        id:
          description: An identifier of this Event Subscription assigned by the Seller
            when a resource is created.
          type: string
        query:
          description: The value provided by the Buyer in `EventSubscriptionInput`
            during notification registration
          type: string
      required:
      - callback
      - id
      type: object
    EventSubscriptionInput:
      description: This class is used to register for Notifications.
      properties:
        callback:
          description: "This callback value must be set to *host* property from the\
            \ Buyer Product Catalog Notification API (productCatalogNotification.api.yaml).\
            \ This property is appended with the base path and notification resource\
            \ path specified in that API to construct a URL to which notification\
            \ is sent. E.g. for \"callback\": \"https://buyer.com/listenerEndpoint\"\
            , the Product Specification state change event notification will be sent\
            \ to: `https://buyer.com/listenerEndpoint/mefApi/sonata/productCatalogNotifications/v2/listener/productCatalogStateChange`"
          type: string
        query:
          description: "This attribute is used to define which type of events to register\
            \ to. See the `ProductCategoryEventType`, `ProductSpecificationEventType`,\
            \ `ProductOfferingEventType` in (productCatalogNotification.api.yaml to\
            \ check what kind of events are supported. To subscribe for more than\
            \ one event type, put the values separated by a comma: `eventType=productOfferingCreateEvent,productOfferingAttributeValueChangeEvent`\
            \ or repeat the same attribute: `eventType=productOfferingCreateEvent&eventType=productOfferingAttributeValueChangeEvent`\
            \ An empty query is treated as specifying no filters - ending in subscription\
            \ for all event types."
          type: string
      required:
      - callback
      type: object
    FieldedAddress:
      description: "A type of Address that has a discrete field and value for each\
        \ type of boundary or identifier down to the lowest level of detail. For example\
        \ \"street number\" is one field, \"street name\" is another field, etc. Reference:\
        \ MEF 79 (Sn 8.9.2)"
      properties:
        country:
          description: Country that the address is in
          type: string
        streetType:
          description: "The type of street (e.g., alley, avenue, boulevard, brae,\
            \ crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf)"
          type: string
        postcodeExtension:
          description: An extension of a postal code. E.g. the part following the
            dash in a US urban property address
          type: string
        city:
          description: The city that the address is in
          type: string
        streetNr:
          description: Number identifying a specific property on a public street.
            It may be combined with streetNrLast for ranged addresses. MEF 79 defines
            it as required however in certain countries it is not used we make it
            optional in API.
          type: string
        locality:
          description: The locality that the address is in
          type: string
        postcode:
          description: Descriptor for a postal delivery area used to speed and simplify
            the delivery of mail (also known as zip code)
          type: string
        streetNrLast:
          description: Last number in a range of street numbers allocated to a property
          type: string
        streetNrSuffix:
          description: The first street number suffix
          type: string
        streetName:
          description: Name of the street or other street type
          type: string
        stateOrProvince:
          description: The State or Province that the address is in
          type: string
        streetNrLastSuffix:
          description: Last street number suffix for a ranged address
          type: string
        geographicSubAddress:
          $ref: '#/components/schemas/GeographicSubAddress'
        streetSuffix:
          description: A modifier denoting a relative direction
          type: string
      required:
      - city
      - country
      - streetName
      type: object
    GeographicSubAddress:
      description: "Additional fields used to specify an address, as detailed as possible."
      properties:
        buildingName:
          description: |
            Allows for identification of places that require building name  as part of addressing information
          type: string
        id:
          description: Unique Identifier of the subAddress
          type: string
        levelNumber:
          description: "Used where a level type may be repeated e.g. BASEMENT 1, BASEMENT\
            \ 2"
          type: string
        levelType:
          description: Describes level types within a building
          type: string
        privateStreetName:
          description: '"Private streets internal to a property (e.g. a university)
            may have internal names that are not recorded by the land title office'
          type: string
        privateStreetNumber:
          description: Private street numbers internal to a private street
          type: string
        subUnit:
          description: "Representation of a MEFSubUnit It is used for describing subunit\
            \ within a subaddress  e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT,\
            \ WHARF."
          items:
            $ref: '#/components/schemas/MEFSubUnit'
          type: array
      type: object
    MEFBuyerSellerType:
      description: An enumeration with buyer and seller values.
      enum:
      - buyer
      - seller
      type: string
    MEFByteSize:
      description: A size represented by value and Byte units
      properties:
        amount:
          default: 1
          description: Numeric value in a given unit
          format: float
          type: number
        units:
          $ref: '#/components/schemas/DataSizeUnit'
      required:
      - amount
      - units
      type: object
    MEFEndOfTermAction:
      description: "The action the Seller will take once the term expires. \nRoll\
        \ indicates that the Product's contract will continue on a rolling basis for\
        \ the duration of the Roll Interval at the end of the Term.  \nAuto-disconnect\
        \ indicates that the Product will be disconnected at the end of the Term.\
        \ \nAuto-renew indicates that the Product's contract will be automatically\
        \ renewed for the Term Duration at the end of the Term."
      enum:
      - roll
      - autoDisconnect
      - autoRenew
      type: string
    MEFItemTerm:
      description: The definition of the Term.
      properties:
        name:
          description: Name of the term
          type: string
        description:
          description: Description of the term
          type: string
        duration:
          $ref: '#/components/schemas/Duration'
        endOfTermAction:
          $ref: '#/components/schemas/MEFEndOfTermAction'
        rollInterval:
          $ref: '#/components/schemas/Duration'
      required:
      - duration
      - endOfTermAction
      - name
      type: object
    MEFSubUnit:
      description: Allows for sub unit identification
      properties:
        subUnitNumber:
          description: "The discriminator used for the subunit, often just a simple\
            \ number but may also be a range."
          type: string
        subUnitType:
          description: "The type of subunit e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER,\
            \ UNIT, WHARF."
          type: string
      required:
      - subUnitNumber
      - subUnitType
      type: object
    Note:
      description: Extra information about a given entity. Only useful in processes
        involving human interaction. Not applicable for the automated process.
      properties:
        author:
          description: Author of the note
          type: string
        date:
          description: Date the Note was created
          format: date-time
          type: string
        id:
          description: "Identifier of the note within its containing entity (may or\
            \ may not be globally unique, depending on provider implementation)"
          type: string
        source:
          $ref: '#/components/schemas/MEFBuyerSellerType'
        text:
          description: Text of the note
          type: string
      required:
      - author
      - date
      - id
      - source
      - text
      type: object
    PlaceRelationshipConstraint:
      description: Allows definition and constraining of PlaceRelationship that can
        be specified for the ordered Product.
      properties:
        relationshipRole:
          description: "Specifies the nature of the relationship between the Product\
            \ Offering and Place. This must be one of the roles as defined in the\
            \ related Product Specification. For example, `INSTALL_LOCATION`."
          type: string
        minCardinality:
          description: "The minimum required number of PlaceRelationships of given\
            \ relationshipRole that must configured for ordered Product. For example,\
            \ as specified in the 'Relationship Between Entities' Section of MEF 106."
          minimum: 0
          type: integer
        maxCardinality:
          description: "The maximum required number of PlaceRelationships of given\
            \ relationshipRole that must configured for ordered Product. For example,\
            \ as specified in the 'Relationship Between Entities' Section of MEF 106.\
            \ `-1` stands for infinity i.e. any number of instances of the given type\
            \ could be related to the considered instance."
          minimum: -1
          type: integer
      required:
      - maxCardinality
      - minCardinality
      - relationshipRole
      type: object
    ProductActionMask:
      description: Action that could be applied to the Product (or future product)
        during the execution of the Business Function. Value 'all' is the wildcard
        - stands for any action.
      enum:
      - add
      - modify
      - all
      type: string
    ProductCategory:
      description: The Product Category is a grouping of Product Offerings in logical
        containers defined by the Seller. A Product Category may contain other (sub)Product
        Categories and/or Product Offerings.
      properties:
        id:
          description: Unique identifier (within the Seller domain) for the Product
            Category.
          type: string
        href:
          description: Reference of the Product Category
          format: uri
          type: string
        name:
          description: The name (unique within the Seller domain) of the Product Category
          type: string
        description:
          description: Description of the Product Category
          type: string
        lastUpdate:
          description: The date and time the Product Category was created or most
            recently updated.
          format: date-time
          type: string
        parentCategory:
          $ref: '#/components/schemas/ProductCategoryRef'
        subCategory:
          description: "A list of references to the Product Category, to which this\
            \ Product Category is a parent of."
          items:
            $ref: '#/components/schemas/ProductCategoryRef'
          type: array
        productOffering:
          description: A list of references to Product Offering grouped within this
            Category
          items:
            $ref: '#/components/schemas/ProductOfferingRef'
          type: array
      required:
      - description
      - id
      - lastUpdate
      - name
      type: object
    ProductCategoryRef:
      description: Represents the reference to Category
      properties:
        id:
          description: Unique (within the Seller domain) identifier for the Category
          type: string
        href:
          description: Hyperlink to access the Category
          format: uri
          type: string
      required:
      - id
      type: object
    ProductMilestoneDefinition:
      description: Allows specifying the different stages of the Product provisioning
        process.
      properties:
        name:
          description: The unique identifier of the milestone (as specified e.g. in
            the corresponding MEF Product Specification).
          type: string
        description:
          description: The explanation of what the milestone represents and when it
            occurs.
          type: string
      required:
      - description
      - name
      type: object
    ProductOffering:
      allOf:
      - $ref: '#/components/schemas/ProductOffering_Common'
      - description: "Represents entities that are orderable from the provider of\
          \ the catalog, this resource included all available information of Product\
          \ Offering"
        properties:
          statusTransition:
            description: "The list of Product Offering Status transitions, including\
              \ the date they are expected to occur or have occurred"
            items:
              $ref: '#/components/schemas/ProductOfferingLifecycleStatusTransition'
            type: array
          statusReason:
            description: Provides complementary information on the reason why the
              `lifecycleStatus`` is set to a particular value.
            type: string
          attachment:
            description: "Complements the Product Offering description with presentation,\
              \ video, pictures, etc."
            items:
              $ref: '#/components/schemas/AttachmentValue'
            type: array
          relatedContactInformation:
            $ref: '#/components/schemas/RelatedContactInformation'
          productOfferingTerm:
            description: "Commitment durations under which a Product Offering is available\
              \ to Buyers. For instance, a Product Offering can be made available\
              \ with multiple commitment periods of 1, 2 or 3 year terms."
            items:
              $ref: '#/components/schemas/MEFItemTerm'
            type: array
          milestone:
            description: Allows for constraining the milestones for the Product Offering.
            items:
              $ref: '#/components/schemas/ProductMilestoneDefinition'
            type: array
          note:
            description: |
              A set of comments for additional information.
            items:
              $ref: '#/components/schemas/Note'
            type: array
          productOfferingSpecification:
            $ref: '#/components/schemas/SchemaRefOrValue'
          productOfferingContextualInfo:
            description: Defines additional constraints on the Product Offering Specification
              for the Product-Specific Attributes of a Product Offering for each Business
              Function and Product Action.
            items:
              $ref: '#/components/schemas/ProductOfferingContextualInfo'
            type: array
          productRelationship:
            description: "Allows constraining the relationships between related Product\
              \ Specifications. As an example, an Access E-Line OVC references Operator\
              \ UNI and ENNI Product Offerings. Note: this effectively constrains\
              \ the relationship between related Product Offerings (since the relationship\
              \ is inherited from the Product Specification)."
            items:
              $ref: '#/components/schemas/ProductRelationshipConstraint'
            type: array
          placeRelationship:
            description: Allows constraining the Place relationships for the Product
              Offering.
            items:
              $ref: '#/components/schemas/PlaceRelationshipConstraint'
            type: array
        required:
        - agreement
        - category
        - channel
        - id
        - lastUpdate
        - lifecycleStatus
        - marketSegment
        - name
        - productSpecification
        - region
    ProductOfferingContextualInfo:
      description: "Used for the cases when the schema must be differentiated per\
        \ the defined Context, where Context is built as a pair - a Business Function\
        \ (e.g. Quote) and Product Action (e.g. add). Those product schemas are created\
        \ by applying the constraints to Product Schemas defined in the Product Specification.\
        \ If provided, Contextual info MUST cover every possible combination of Product\
        \ Actions and Business Functions  (if there are no differences per function\
        \ or per action then use wildcard - 'all' -  and reuse the value of Product\
        \ Offering Specification attribute)."
      properties:
        contextSchema:
          $ref: '#/components/schemas/SchemaRefOrValue'
        context:
          $ref: '#/components/schemas/Context'
      required:
      - context
      - contextSchema
      type: object
    ProductOfferingLifecycleStatusTransition:
      description: "The Date and Time that the next Product Offering Status transition\
        \ is planned to occur, or have occurred."
      properties:
        transitionDate:
          description: The Date and Time that the Transition Product Offering State
            is planned to occur or has occurred.
          format: date-time
          type: string
        transitionLifecycleStatus:
          $ref: '#/components/schemas/ProductOfferingLifecycleStatusType'
      required:
      - transitionDate
      - transitionLifecycleStatus
      type: object
    ProductOfferingLifecycleStatusType:
      description: |
        | Name         | MEF 127 Name   | Description                                                                                                                                                                                                                                  |
        | ------------ | -------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
        | announced    | ANNOUNCED      | A Product Offering has been defined in the Product Catalog for marketing purposes, but is not yet available for ordering.                                                                                                                    |
        | endOfSale    | END_OF_SALE    | The Product Offering or Product Specification cannot be Installed by any new or existing Buyers, but Buyers may still have Products in use and may modify or delete it, and receive support.                                                 |
        | endOfSupport | END_OF_SUPPORT | When a Product Offering or Product Specification in the `endOfSale` state is no longer supported, the status transitions to `endOfSupport`. Any existing products can no longer be modified, with the only Order action allowed is `delete`. |
        | inTest       | PILOT_BETA     | When a Product Offering or Product Specification starts Pilot/Beta testing, it starts in the `pilotBeta` state .                                                                                                                             |
        | obsolete     | OBSOLETE       | After a Product Offering or Product Specification that is no longer available it transitions to `obsolete` and may be removed at the Seller's discretion from the Product Catalog. This is a final state.                                    |
        | onHold       | ON_HOLD        | A Product Offering or Product Specification that has been `orderable`, but is currently not available for Buyers due to supply constraints, product recall, or other issues preventing it from being offered.                                      |
        | orderable    | ORDERABLE      | A new Product Offering or Product Specification is in the `orderable` state when it is available for ordering by Buyers.                                                                                                                     |
        | rejected     | REJECTED       | When PILOT_BETA testing fails the Product Offering or Product Specification transitions to the `rejected` state. This is a final state.                                                                                                      |
      enum:
      - announced
      - endOfSale
      - endOfSupport
      - inTest
      - obsolete
      - onHold
      - orderable
      - rejected
      type: string
    ProductOfferingRef:
      description: ProductOffering reference. A product offering represents entities
        that are orderable from the provider of the catalog.
      properties:
        id:
          description: Unique (within the Seller domain) identifier for the Product
            Offering.
          type: string
        href:
          description: Hyperlink to access the Product Offering
          format: uri
          type: string
      required:
      - id
      type: object
    ProductOffering_Common:
      description: The Product Offering represents the Products orderable from a Seller's
        Product Catalog.
      properties:
        id:
          description: Unique identifier (within the Seller domain) for the Product
            Offering. Note - The Seller must create a new Product Offering Identifier
            for every new version of a Product Offering. The Seller may choose to
            incorporate the version information as part of the Offering Identifier.
          type: string
        href:
          description: Hyperlink reference to the Product Offering
          format: uri
          type: string
        name:
          description: The commercial name of the Product Offering
          type: string
        description:
          description: Description of the Product Offering
          type: string
        lastUpdate:
          description: The date and time the Product Offering was created or most
            recently updated.
          format: date-time
          type: string
        lifecycleStatus:
          $ref: '#/components/schemas/ProductOfferingLifecycleStatusType'
        agreement:
          description: "The name of the Seller's standard offer arrangement (such\
            \ as a framework agreement). The name is unique within the Seller domain.\
            \ This should be the name of the Seller's standard offer arrangement or\
            \ framework agreement for this category of Product Offering (e.g., Commercial,\
            \ Federal or Regulated) as used by the Seller in their official communication\
            \ of the Product."
          type: string
        channel:
          description: |
            A list of names defined by the Seller which identify the different methods by which the Product Offering is made available to the Buyer for ordering. The different Sales Channels should be specified in the Standard Framework Agreement or provided during the onboarding process. For example: Reseller, Distribution, Direct Sales. Note: If Sales Channels is an empty list, it implies that the Product Offering is available in all Seller-supported Sales Channels.
          items:
            type: string
          type: array
        marketSegment:
          description: |
            The names of the market segments targeted for the Product Offering.
            The set of market segment names should be specified in the Agreement
            or provided during the onboarding process. For example: wholesale,
            federal, financial. Note: If marketSegment is an empty list,
            it implies that the Product Offering is available in all Seller
            supported market segments
          items:
            type: string
          type: array
        region:
          description: |
            Areas where the products are offered by the Seller to potential Buyers.
            Note: If region is an empty list, it implies that the Product Offering
            is available in all Seller-supported Regions.
          items:
            $ref: '#/components/schemas/Region'
          type: array
        category:
          description: "A list of 0 or more Product Category Identifiers, with each\
            \ referring to a Product Category in which this Product Offering is grouped\
            \ together with other Product Offerings."
          items:
            $ref: '#/components/schemas/ProductCategoryRef'
          type: array
        productSpecification:
          $ref: '#/components/schemas/ProductSpecificationRef'
      type: object
    ProductOffering_Find:
      allOf:
      - $ref: '#/components/schemas/ProductOffering_Common'
      - description: "Represents entities that are orderable from the provider of\
          \ the catalog, this resource includes pricing information."
        required:
        - agreement
        - category
        - channel
        - id
        - lastUpdate
        - lifecycleStatus
        - marketSegment
        - name
        - productSpecification
        - region
    ProductRelationshipConstraint:
      description: Allows definition and constraining of Product Relationship that
        can be specified for the ordered Product.
      properties:
        id:
          description: The identifier of the associated Product Specification to define
            the allowable target Product types
          type: string
        relationshipType:
          description: Specifies the nature of productRelationship between Products.
            This must be one of the relationshipTypes as defined by the main product
            specification.
          type: string
        minCardinality:
          description: "The minimum required number of ProductRelationships (of given\
            \ relationshipType and target productSpecification) that must configured\
            \ for ordered Product. For example, as specified in the 'Relationship\
            \ Between Entities' Section of MEF 106."
          minimum: 0
          type: integer
        maxCardinality:
          description: The maximum required number of ProductRelationships (of given
            relationshipType and target productSpecification) that must configured
            for ordered Product. `-1` stands for infinity i.e. any number of instances
            of the given type could be related to the considered instance.
          minimum: -1
          type: integer
      required:
      - id
      - maxCardinality
      - minCardinality
      - relationshipType
      type: object
    ProductSpecification:
      allOf:
      - $ref: '#/components/schemas/ProductSpecification_Common'
      - description: Is a detailed description of a tangible or intangible object
          made available externally in the form of a ProductOffering to customers
          or other parties playing a party role.
        properties:
          description:
            description: Description of the Product Specification.
            type: string
          attachment:
            description: "Complements the Product Offering description with presentation,\
              \ video, pictures, etc."
            items:
              $ref: '#/components/schemas/AttachmentValue'
            type: array
          productRelationship:
            description: "Specifies the relationships with their names between Products\
              \ described by related Product Specifications. As an example, an Access\
              \ E-Line OVC references an Operator UNI and ENNI Product Specifications."
            items:
              $ref: '#/components/schemas/ProductRelationshipConstraint'
            type: array
          placeRelationship:
            description: Specifies the relationships with their names between Product
              described by this Product Specifications and Place(s).
            items:
              $ref: '#/components/schemas/PlaceRelationshipConstraint'
            type: array
          milestone:
            description: Specifies the different stages of the Product Ordering.
            items:
              $ref: '#/components/schemas/ProductMilestoneDefinition'
            type: array
          note:
            description: |
              A set of comments for additional information.
            items:
              $ref: '#/components/schemas/Note'
            type: array
          sourceSchema:
            $ref: '#/components/schemas/SchemaRefOrValue'
        required:
        - description
        - id
        - lastUpdate
        - lifecycleStatus
        - name
        - sourceSchema
    ProductSpecificationLifecycleStatusType:
      description: |
        | Name         | MEF 127 Name   | Description                                                                                                                                                                                                                                                                                                                                                                                                  |
        | ------------ | -------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
        | obsolete     | OBSOLETE       | The Product Specification is only available in the Product Catalog for historical documentation reasons. There are no active Products on the Seller's Network based on the Product Specification. A Product Specification that is no longer available transitions to `obsolete` and may be removed at the Seller's discretion from the Product Catalog. This is a final state. |
        | published    | PUBLISHED      | A Product Specification has been defined in the Product Catalog. Product Offerings based on the Product Specification may be available for ordering.                                                                                                                                                                                                                                                         |
      enum:
      - obsolete
      - published
      type: string
    ProductSpecificationRef:
      description: Product Specification reference.
      properties:
        id:
          description: Unique (within the Seller domain) identifier for the Product
            Specification.
          type: string
        href:
          description: Hyperlink to access the Product Specification
          format: uri
          type: string
      required:
      - id
      type: object
    ProductSpecification_Common:
      description: Is the basis for all Production Specification representations.
      properties:
        id:
          description: "Unique identifier for the Product Specification. For MEF standardized\
            \ products, this should be the MEF assigned URN."
          type: string
        href:
          description: Reference of the Product Specification
          format: uri
          type: string
        name:
          description: Name of the Product Specification
          type: string
        lifecycleStatus:
          $ref: '#/components/schemas/ProductSpecificationLifecycleStatusType'
        lastUpdate:
          description: The date and time of an attribute within this Product Specification
            was created or most recently updated.
          format: date-time
          type: string
      type: object
    ProductSpecification_Find:
      allOf:
      - $ref: '#/components/schemas/ProductSpecification_Common'
      - description: Is a lightweight version of the Product Specification object
          used in Get List use case.
        required:
        - id
        - lastUpdate
        - lifecycleStatus
        - name
    Region:
      description: Specifies a region
      properties:
        locality:
          description: "An area of defined or undefined present boundaries within\
            \ a local authority or other legislatively defined area, usually rural\
            \ or semi-rural in nature. Should only be specified by a Seller for a\
            \ Product Offering that is not available Country wide"
          type: string
        stateOrProvince:
          description: The State or Province in the region is located. Should only
            be specified by a Seller for a Product Offering that is not available
            Country wide.
          type: string
        country:
          description: The Country that the region is located. MUST use the ISO 3166
            two-letter codes.
          type: string
      required:
      - country
      type: object
    RelatedContactInformation:
      description: Contact data for a person or organization that is involved in a
        given context. It is specified by the Seller (e.g. Seller Contact Information)
        or by the Buyer.
      properties:
        emailAddress:
          description: Email address
          type: string
        name:
          description: Name of the contact
          type: string
        number:
          description: Phone number
          type: string
        numberExtension:
          description: Phone number extension
          type: string
        organization:
          description: The organization or company that the contact belongs to
          type: string
        postalAddress:
          $ref: '#/components/schemas/FieldedAddress'
        role:
          description: A role the party plays in a given context.
          type: string
      required:
      - emailAddress
      - name
      - number
      - role
      type: object
    SchemaRefOrValue:
      description: Reference to the JSON schema location or the exact value of the
        JSON schema. **Note:** One of the properties must be provided i.e. schemaLocation
        or schema.
      properties:
        schema:
          description: Raw JSON schema value.
          type: string
        schemaLocation:
          description: This field provides a link to the schema describing the target
            product
          format: uri
          type: string
      type: object
    TimeUnit:
      description: |
        Represents a unit of time.
        Reference: MEF 57.2 (Sn 9.22)
      enum:
      - calendarMonths
      - calendarDays
      - calendarHours
      - calendarMinutes
      - businessDays
      - businessHours
      - businessMinutes
      type: string
  securitySchemes:
    oauth2MEFLSOAPI:
      description: Default m2m client code
      flows:
        clientCredentials:
          refreshUrl: http://mef.net/example/refresh
          scopes:
            default: default scope
          tokenUrl: http://mef.net/example/token
      type: oauth2
