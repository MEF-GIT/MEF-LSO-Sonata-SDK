openapi: 3.0.1
info:
  description:
    "**This file forms part of MEF W142**\n\nThis API implements Business\
    \ Requirements described in MEF W127.\n\n**This specification represents MEF work\
    \ in progress and is subject to\nchange.**  \n\nThis API implements Business Requirements\
    \ that are defined in MEF Standard: MEF W127\nSupported use cases:\n- Retrieve\
    \ List of Product Categories\n- Retrieve Product Category by Product Category\
    \ Identifier\n- Retrieve List of Product Offerings\n- Retrieve Product Offering\
    \ by Product Offering Identifier\n- Retrieve List of Product Specifications\n\
    - Retrieve Product Specification by Product Specification Identifier\n- Register\
    \ for Notifications \n- Unregister Notifications\n- Retrieve Notification Hub\
    \ Registry  by: hubId, sellerId, buyerId\n"
  title: Product Catalog
  version: 1.0.0-RC
servers:
  - url: "http://{serverBase}/mefApi/sonata/productCatalog/v1/"
security:
  - oauth2MEFLSOAPI:
      - default
tags:
  - name: category
  - name: productOffering
  - name: productSpecification
paths:
  /category:
    get:
      description: This operation lists or finds Category entities
      operationId: listCategory
      parameters:
        - description: Lifecycle Status of the Category
          in: query
          name: lifecycleStatus
          required: false
          schema:
            type: string
            enum:
              - available
              - obsolete
        - description: Name of the the Parent of this Product Category.
          in: query
          name: parentCategory.name
          required: false
          schema:
            type: string
        - description:
            "The date and time the Product Category was created or most recently\
            \ updated, greater than"
          in: query
          name: lastUpdate.gt
          required: false
          schema:
            type: string
            format: date-time
        - description:
            "The date and time the Product Category was created or most recently\
            \ updated, lesser than"
          in: query
          name: lastUpdate.lt
          required: false
          schema:
            type: string
            format: date-time
        - description:
            The unique identifier of the organization that is acting as the
            a Buyer. MUST be specified in the request only when the requester represents
            more than one Buyer.
          in: query
          name: buyerId
          required: false
          schema:
            type: string
        - description:
            The unique identifier of the organization that is acting as the
            Seller. MUST be specified in the request only when the responding entity
            represents more than one Seller.
          in: query
          name: sellerId
          required: false
          schema:
            type: string
        - description:
            Requested index for start of item to be provided in response
            requested by the client. Note that the index starts with "0".
          in: query
          name: offset
          required: false
          schema:
            type: integer
            format: int32
        - description:
            Requested number of items to be provided in response requested
            by client
          in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductCategory"
          description: OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)
          headers:
            X-Pagination-Throttled:
              description: |
                Used to indicate that result page was throttled to maximum possible size  and there are additional results that can be fetched
              schema:
                type: boolean
            X-Total-Count:
              description: |
                The total number of matching items. E.g. if there are 50 matching items in total, but the request has offset=10 and limit=10, then the X-Total-Count is 50.
              schema:
                type: integer
            X-Result-Count:
              description: The number of items included in the response
              schema:
                type: integer
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error400"
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error401"
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error403"
          description: Forbidden
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error500"
          description: Internal Server Error
      security:
        - oauth2MEFLSOAPI:
            - listCategory
      summary: Lists or finds Category objects
      tags:
        - category
  /category/{id}:
    get:
      description: This operation retrieves a Category entity.
      operationId: retrieveCategory
      parameters:
        - description: Identifier of the Category
          in: path
          name: id
          required: true
          schema:
            type: string
        - description:
            The unique identifier of the organization that is acting as the
            a Buyer. MUST be specified in the request only when the requester represents
            more than one Buyer.
          in: query
          name: buyerId
          required: false
          schema:
            type: string
        - description:
            The unique identifier of the organization that is acting as the
            Seller. MUST be specified in the request only when responding entity  represents
            more than one Seller.
          in: query
          name: sellerId
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/ProductCategory"
          description: OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error400"
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error401"
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error403"
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error404"
          description: Not Found
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error500"
          description: Internal Server Error
      security:
        - oauth2MEFLSOAPI:
            - retrieveCategory
      summary: Retrieves a Category by ID
      tags:
        - category
  /productOffering:
    get:
      description: This operation list or find ProductOffering entities
      operationId: listProductOffering
      parameters:
        - description: The commercial name of the Product Offering
          in: query
          name: name
          required: false
          schema:
            type: string
        - description:
            "The date and time the Product Offering was created or most recently\
            \ updated, greater than"
          in: query
          name: lastUpdate.gt
          required: false
          schema:
            type: string
            format: date-time
        - description:
            "The date and time the Product Offering was created or most recently\
            \ updated, lesser than"
          in: query
          name: lastUpdate.lt
          required: false
          schema:
            type: string
            format: date-time
        - description: Lifecycle Status of the Product Offering
          in: query
          name: lifecycleStatus
          required: false
          schema:
            type: string
            enum:
              - active
              - endOfSale
              - endOfSupport
              - obsolete
              - onHold
              - orderable
              - pilotBeta
              - rejected
        - description: |-
            The name of the Seller's offer arrangement (such as a framework agreement).  **Note:** The list of allowable values for agreements should be negotiated between the Buyer and the Seller,
                      during the integration phase. Ultimately it will be the enumerated set of values (it's problematic
                      to define the enumerated values globally for any operator).
          in: query
          name: agreement
          required: false
          schema:
            type: string
        - description:
            "The names of the sales channel through which the Product Offering\
            \ is made available to the Buyer to order. **Note:** The list of allowable\
            \ values for selling channels should be negotiated between the Buyer \n\
            \          and the Seller, during the integration phase. \n          Ultimately\
            \ it will be the enumerated set of values (it's problematic to define \n\
            \          the enumerated values globally for any operator)."
          in: query
          name: channel
          required: false
          schema:
            type: string
        - description:
            "The names of the market segments  targeted for the Product Offering.\
            \ **Note:** The list of allowable values for selling market segments should\
            \ be negotiated between the Buyer \n          and the Seller, during the\
            \ integration phase. \n          Ultimately it will be the enumerated set\
            \ of values (it's problematic to define \n          the enumerated values\
            \ globally for any operator)."
          in: query
          name: marketSegment
          required: false
          schema:
            type: string
        - description:
            Country where the products are offered by the Seller to potential
            Buyers.
          in: query
          name: region.country
          required: false
          schema:
            type: string
        - description:
            "Reference Identifier of the Category that Product Offering is\
            \ the direct or transitive member of.\n  Direct member - there is a direct\
            \ relation between Category and Product Offering. \n  Transitive member\
            \ - there is a relation between one of the sub-categories and Product Offering."
          in: query
          name: category.id
          required: false
          schema:
            type: string
        - description:
            The unique identifier of the organization that is acting as the
            a Buyer. MUST be specified in the request only when the requester represents
            more than one Buyer.
          in: query
          name: buyerId
          required: false
          schema:
            type: string
        - description:
            The unique identifier of the organization that is acting as the
            Seller. MUST be specified in the request only when the responding entity
            represents more than one Seller.
          in: query
          name: sellerId
          required: false
          schema:
            type: string
        - description:
            Requested index for start of item to be provided in response
            requested by the client. Note that the index starts with "0".
          in: query
          name: offset
          required: false
          schema:
            type: integer
            format: int32
        - description:
            Requested number of items to be provided in response requested
            by client
          in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductOffering_Find"
          description: OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)
          headers:
            X-Pagination-Throttled:
              description: |
                Used to indicate that result page was throttled to maximum possible size  and there are additional results that can be fetched
              schema:
                type: boolean
            X-Total-Count:
              description: |
                The total number of matching items. E.g. if there are 50 matching items in total, but the request has offset=10 and limit=10, then the X-Total-Count is 50.
              schema:
                type: integer
            X-Result-Count:
              description: The number of items included in the response
              schema:
                type: integer
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error400"
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error401"
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error403"
          description: Forbidden
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error500"
          description: Internal Server Error
      security:
        - oauth2MEFLSOAPI:
            - listProductOffering
      summary: List or find Product Offering objects
      tags:
        - productOffering
  /productOffering/{id}:
    get:
      description:
        This operation retrieves a ProductOffering entity. Attribute selection
        is enabled for all first level attributes.
      operationId: retrieveProductOffering
      parameters:
        - description: Identifier of the ProductOffering
          in: path
          name: id
          required: true
          schema:
            type: string
        - description:
            The unique identifier of the organization that is acting as the
            a Buyer. MUST be specified in the request only when the requester represents
            more than one Buyer.
          in: query
          name: buyerId
          required: false
          schema:
            type: string
        - description:
            The unique identifier of the organization that is acting as the
            Seller. MUST be specified in the request only when responding entity  represents
            more than one Seller.
          in: query
          name: sellerId
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/ProductOffering"
          description: OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error400"
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error401"
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error403"
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error404"
          description: Not Found
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error500"
          description: Internal Server Error
      security:
        - oauth2MEFLSOAPI:
            - retrieveProductOffering
      summary: Retrieves a ProductOffering by ID
      tags:
        - productOffering
  /productSpecification:
    get:
      description: This operation list or find ProductSpecification entities
      operationId: listProductSpecification
      parameters:
        - description: The name of Product Specification (may not be unique)
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: Lifecycle Status of the Product Specification
          in: query
          name: lifecycleStatus
          required: false
          schema:
            type: string
            enum:
              - active
              - endOfSale
              - endOfSupport
              - obsolete
              - onHold
              - orderable
              - pilotBeta
              - rejected
        - description:
            The manufacturer or trademark of the Product Specification if
            the Seller requires a CPE on the Buyer's premise.
          in: query
          name: brand
          required: false
          schema:
            type: string
        - description:
            "The date and time the Product Specification was created or most\
            \ recently updated, greater than"
          in: query
          name: lastUpdate.gt
          required: false
          schema:
            type: string
            format: date-time
        - description:
            "The date and time the Product Specification was created or most\
            \ recently updated, lesser than"
          in: query
          name: lastUpdate.lt
          required: false
          schema:
            type: string
            format: date-time
        - description:
            The unique identifier of the organization that is acting as the
            a Buyer. MUST be specified in the request only when the requester represents
            more than one Buyer.
          in: query
          name: buyerId
          required: false
          schema:
            type: string
        - description:
            The unique identifier of the organization that is acting as the
            Seller. MUST be specified in the request only when the responding entity
            represents more than one Seller.
          in: query
          name: sellerId
          required: false
          schema:
            type: string
        - description:
            Requested index for start of item to be provided in response
            requested by the client. Note that the index starts with "0".
          in: query
          name: offset
          required: false
          schema:
            type: integer
            format: int32
        - description:
            Requested number of items to be provided in response requested
            by client
          in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductSpecification_Find"
          description: OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)
          headers:
            X-Pagination-Throttled:
              description: |
                Used to indicate that result page was throttled to maximum possible size  and there are additional results that can be fetched
              schema:
                type: boolean
            X-Total-Count:
              description: |
                The total number of matching items. E.g. if there are 50 matching items in total, but the request has offset=10 and limit=10, then the X-Total-Count is 50.
              schema:
                type: integer
            X-Result-Count:
              description: The number of items included in the response
              schema:
                type: integer
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error400"
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error401"
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error403"
          description: Forbidden
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error500"
          description: Internal Server Error
      security:
        - oauth2MEFLSOAPI:
            - listProductSpecification
      summary: List or find ProductSpecification objects
      tags:
        - productSpecification
  /productSpecification/{id}:
    get:
      description:
        This operation retrieves a ProductSpecification entity. Attribute
        selection is enabled for all first level attributes.
      operationId: retrieveProductSpecification
      parameters:
        - description: Identifier of the ProductSpecification
          in: path
          name: id
          required: true
          schema:
            type: string
        - description:
            The unique identifier of the organization that is acting as the
            a Buyer. MUST be specified in the request only when the requester represents
            more than one Buyer.
          in: query
          name: buyerId
          required: false
          schema:
            type: string
        - description:
            The unique identifier of the organization that is acting as the
            Seller. MUST be specified in the request only when responding entity  represents
            more than one Seller.
          in: query
          name: sellerId
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/ProductSpecification"
          description: OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error400"
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error401"
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error403"
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error404"
          description: Not Found
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error500"
          description: Internal Server Error
      security:
        - oauth2MEFLSOAPI:
            - retrieveProductSpecification
      summary: Retrieves a ProductSpecification by ID
      tags:
        - productSpecification
  /hub:
    post:
      description:
        "Sets the communication endpoint address the service instance must\
        \ use to deliver information about its health state, execution state, failures\
        \ and metrics."
      operationId: registerListener
      parameters:
        - description: |-
            The unique identifier of the organization that is acting as the a Buyer. MUST be specified in the request only when the requester represents more than one Buyer.
            Reference: MEF 57.2 (Sn 9.18)
          in: query
          name: buyerId
          required: false
          schema:
            type: string
        - description: |-
            The unique identifier of the organization that is acting as the Seller. MUST be specified in the request only when responding entity  represents more than one Seller.
            Reference: MEF 57.2 (Sn 9.18)
          in: query
          name: sellerId
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: "#/components/schemas/EventSubscriptionInput"
        description: Data containing the callback endpoint to deliver the information
        required: true
      responses:
        "201":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/EventSubscription"
          description: Subscribed
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error400"
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error401"
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error403"
          description: Forbidden
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error500"
          description: Internal Server Error
        "501":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error501"
          description: Method not implemented.
      security:
        - oauth2MEFLSOAPI:
            - registerListener
      summary: Register a listener
      tags:
        - events subscription
      x-codegen-request-body-name: data
  /hub/{id}:
    delete:
      description:
        "Resets the communication endpoint address the service instance\
        \ must use to deliver information about its health state, execution state,\
        \ failures and metrics."
      operationId: unregisterListener
      parameters:
        - description: The id of the registered listener
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: |-
            The unique identifier of the organization that is acting as the a Buyer. MUST be specified in the request only when the requester represents more than one Buyer.
            Reference: MEF 57.2 (Sn 9.18)
          in: query
          name: buyerId
          required: false
          schema:
            type: string
        - description: |-
            The unique identifier of the organization that is acting as the Seller. MUST be specified in the request only when responding entity  represents more than one Seller.
            Reference: MEF 57.2 (Sn 9.18)
          in: query
          name: sellerId
          required: false
          schema:
            type: string
      responses:
        "204":
          description: Deleted
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error400"
          description: Bad request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error401"
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error403"
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error404"
          description: Not Found
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error500"
          description: Internal Server Error
        "501":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error501"
          description: Method not implemented.
      security:
        - oauth2MEFLSOAPI:
            - unregisterListener
      summary: Unregister a listener
      tags:
        - events subscription
    get:
      description: This operation retrieves a hub entity.
      operationId: retrieveHub
      parameters:
        - description: Identifier of the Hub
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: |-
            The unique identifier of the organization that is acting as the a Buyer. MUST be specified in the request only when the requester represents more than one Buyer.
            Reference: MEF 57.2 (Sn 9.18)
          in: query
          name: buyerId
          required: false
          schema:
            type: string
        - description: |-
            The unique identifier of the organization that is acting as the Seller. MUST be specified in the request only when responding entity  represents more than one Seller.
            Reference: MEF 57.2 (Sn 9.18)
          in: query
          name: sellerId
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/EventSubscription"
          description: Success
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error400"
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error401"
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error403"
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error404"
          description: Not Found
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error500"
          description: Internal Server Error
        "501":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error501"
          description: Method not implemented.
      security:
        - oauth2MEFLSOAPI:
            - retrieveHub
      summary: Retrieves a Hub by ID
      tags:
        - events subscription
components:
  schemas:
    ProductCategory:
      type: object
      description:
        The Product Category is a grouping of Product Offerings in logical
        containers defined by the Seller. A Product Category may contain other (sub)Product
        Categories and/or Product Offerings.
      properties:
        id:
          type: string
          description:
            Unique identifier (within the Seller domain) for the Product
            Category.
        href:
          type: string
          format: uri
          description: Reference of the Product Category
        name:
          type: string
          description: The name (unique within the Seller domain) of the Product Category
        description:
          type: string
          description: Description of the Product Category
        lastUpdate:
          type: string
          format: date-time
          description:
            The date and time the Product Category was created or most
            recently updated.
        lifecycleStatus:
          $ref: "#/components/schemas/CategoryLifecycleStatusType"
        parentCategory:
          $ref: "#/components/schemas/CategoryRef"
        subCategory:
          type: array
          description:
            "A list of references to Product Category, to which this Product\
            \ Category is a parent of."
          items:
            $ref: "#/components/schemas/CategoryRef"
        productOffering:
          type: array
          description:
            A list of references to Product Offering grouped within this
            Category
          items:
            $ref: "#/components/schemas/ProductOfferingRef"
      required:
        - description
        - id
        - lastUpdate
        - lifecycleStatus
        - name
    CategoryLifecycleStatusType:
      description: |
        | Name                       | MEF 127 Name     | Description|
        | -------------------------- | ---------------- ||
        | active                     | AVAILABLE        | A Product Category is in the `active` state when it can be used by the Buyer to retrieve Product Offerings and Product Specifications.                                                                                                                                                                                                                                                                                                                                                                                                                                              |
        | obsolete                   | OBSOLETE         | A Product Category is `obsolete` when it can no longer be used by the Buyer to retrieve Product Offerings or Product Specifications. The Product Category may be removed from the Product Catalog. This is a final state.                                                                                                                                                                                                                                                                                                                                                           |
      enum:
        - active
        - obsolete
    CategoryRef:
      type: object
      description: Represents the reference to Category
      properties:
        id:
          type: string
          description: Unique (within the Seller domain) identifier for the Category
        href:
          type: string
          format: uri
          description: Hyperlink to access the Category
      required:
        - id
    ProductOfferingRef:
      type: object
      description:
        ProductOffering reference. A product offering represents entities
        that are orderable from the provider of the catalog.
      properties:
        id:
          type: string
          description:
            Unique (within the Seller domain) identifier for the Product
            Offering.
        href:
          type: string
          format: uri
          description: Hyperlink to access the Product Offering
      required:
        - id
    ProductOffering_Common:
      type: object
      description:
        The Product Offering represents the Products orderable from a Seller�s
        Product Catalog.
      properties:
        id:
          type: string
          description:
            Unique identifier (within the Seller domain) for the Product
            Offering. Note - The Seller must create a new Product Offering Identifier
            for every new version of a Product Offering. The Seller may choose to
            incorporate the version information as part of the Offering Identifier.
        href:
          type: string
          format: uri
          description: Hyperlink reference to the Product Offering
        name:
          type: string
          description: The commercial name of the Product Offering
        description:
          type: string
          description: Description of the Product Offering
        lastUpdate:
          type: string
          format: date-time
          description:
            The date and time the Product Offering was created or most
            recently updated.
        lifecycleStatus:
          $ref: "#/components/schemas/ProductOfferingLifecycleStatusType"
        agreement:
          type: string
          description:
            "The name of the Seller's offer arrangement (such as a framework\
            \ agreement). This may be a standard offer agreement or a customer specific\
            \ agreement (e.g., for a customer specific Product Catalog or customer\
            \ specific Product Offering). The name is unique within the Seller domain."
        channel:
          type: array
          description:
            "The names of the sales channel through which the Product Offering\
            \ \nis made available to the Buyer to order. The set of channel names\n\
            should be specified in the Agreement or provided during the onboarding\n\
            process. For example: reseller, distribution, directSales.\nNote: If channel\
            \ is an empty list, it implies that the Product Offering\nis available\
            \ in all Seller supported channels.\n"
          items:
            type: string
        marketSegment:
          type: array
          description: |
            The names of the market segments  targeted for the Product Offering.
            The set of market segment names should be specified in the Agreement
            or provided during the onboarding process. For example: wholesale,
            federal, financial. Note: If marketSegment is an empty list,
            it implies that the Product Offering is available in all Seller
            supported market segments
          items:
            type: string
        region:
          type: array
          description: |
            Areas where the products are offered by the Seller to potential Buyers.
            Note: If region is an empty list, it implies that the Product Offering
            is available in all Seller supported Regions.
          items:
            $ref: "#/components/schemas/Region"
        category:
          type: array
          description:
            The list of Product Category References in which this Product
            Offering is grouped together with other Product Offerings available to
            the Buyer.
          items:
            $ref: "#/components/schemas/CategoryRef"
    ProductOffering_Find:
      allOf:
        - $ref: "#/components/schemas/ProductOffering_Common"
        - description:
            "Represents entities that are orderable from the provider of\
            \ the catalog, this resource includes pricing information."
          required:
            - agreement
            - category
            - channel
            - id
            - lastUpdate
            - lifecycleStatus
            - marketSegment
            - name
            - region
    ProductOffering:
      allOf:
        - $ref: "#/components/schemas/ProductOffering_Common"
        - description:
            "Represents entities that are orderable from the provider of\
            \ the catalog, this resource included all available information of Product\
            \ Offering"
          properties:
            statusTransitions:
              type: array
              description:
                "The list of planned Product Offering Status transitions,\
                \ including the date they are expected to occur."
              items:
                $ref: "#/components/schemas/ProductOfferingLifecycleStatusTransition"
            productOfferingStatusReason:
              type: string
              description:
                Provides complementary information on the reason why the
                Product Offering Lifecycle Status is set to a particular value.
            attachment:
              type: array
              description:
                "Complements the Product Offering description with presentation,\
                \ video, pictures, etc."
              items:
                $ref: "#/components/schemas/AttachmentValue"
            relatedContactInformation:
              type: array
              description:
                "Defines the contact info and role for the related contact\
                \ of a Product Offering.\nThe 'role' is to specify the type of contact\
                \ as specified in MEF 113:\nReporter Contact ('role=reporterContact')\
                \ - REQUIRED in the request\nBuyer Technical Contacts ('role=buyerTechnicalContact')\
                \ \nSeller Ticket Contact ('role=sellerTicketContact') \nSeller Technical\
                \ Contact ('role=sellerTechnicalContact')"
              items:
                $ref: "#/components/schemas/RelatedContactInformation"
              minItems: 1
            productOfferingTerm:
              type: array
              description:
                "Commitment durations under which a Product Offering is available\
                \ to Buyers. For instance, a Product Offering can be made available\
                \ with multiple commitment periods of 1, 2 or 3 year terms."
              items:
                $ref: "#/components/schemas/MEFItemTerm"
            note:
              type: array
              description: |
                A set of comments for additional information.
              items:
                $ref: "#/components/schemas/Note"
            productSpecification:
              $ref: "#/components/schemas/ProductSpecificationRef"
            productOfferingContextualInfo:
              type: array
              description:
                Defines additional constraints on the Product Offering Specification
                for use with the payload for a Product Offering for each Business Function
                and Product Action.
              items:
                $ref: "#/components/schemas/ProductOfferingContextualInfo"
            productOfferingSpecification:
              $ref: "#/components/schemas/SchemaRefOrValue"
          required:
            - agreement
            - category
            - channel
            - id
            - lastUpdate
            - lifecycleStatus
            - marketSegment
            - name
            - productOfferingSpecification
            - productSpecification
            - region
    ProductOfferingLifecycleStatusType:
      description: |
        | Name         | MEF 127 Name   | Description                                                                                                                                                                                                                                  |
        | ------------ | -------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
        | active       | ACTIVE         | When a Product Offering or Product Specification has been defined and will be made available for ordering; however, it is not yet generally available.                                                                                       |
        | endOfSale    | END_OF_SALE    | The Product Offering or Product Specification cannot be Installed by any new or existing Buyers, but Buyers may still have Products in use and may Change or Disconnect it, and receive support.                                             |
        | endOfSupport | END_OF_SUPPORT | When a Product Offering or Product Specification in the `endOfSale` state is no longer supported, the status transitions to `endOfSupport`. Any existing products can no longer be modified, with the only Order action allowed is `delete`. |
        | obsolete     | OBSOLETE       | After a Product Offering or Product Specification that is no longer available it transitions to `obsolete` and may be removed at the Seller's discretion from the Product Catalog. This is a final state.                                    |
        | onHold       | ON_HOLD        | A Product Offering or Product Specification that has been `orderable`, but is currently not available for Buyers due to supply constraints, product recall or other issues preventing it to be offered.                                      |
        | orderable    | ORDERABLE      | A new Product Offering or Product Specification is in the `orderable` state when it is available for ordering by Buyers.                                                                                                                     |
        | inTest    | PILOT_BETA     | When a Product Offering or Product Specification starts Pilot/Beta testing, it starts in the `pilotBeta` state .                                                                                                                             |
        | rejected     | REJECTED       | When PILOT_BETA testing fails the Product Offering or Product Specification transitions to the `rejected` state. This is a final state.                                                                                                      |
      enum:
        - active
        - endOfSale
        - endOfSupport
        - obsolete
        - onHold
        - orderable
        - inTest
        - rejected
    ProductSpecificationLifecycleStatusType:
      description: |
        | Name         | MEF 127 Name   | Description                                                                                                                                                                                                                                  |
        | ------------ | -------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
        | active       | ACTIVE         | When a Product Specification has been defined and will be made available for ordering; however, it is not yet generally available.                                                                                       |
        | endOfSale    | END_OF_SALE    | The endOfSale status means that Product Specification cannot be used for creation of a new Product Offerings.                                             |
        | endOfSupport | END_OF_SUPPORT | When a Product Specification in the endOfSale status is no longer supported, the status transitions to endOfSupport. Any existing products can no longer be Changed, with the only Order action allowed is Disconnect. |
        | obsolete     | OBSOLETE       | After a Product Specification that is no longer available it transitions to obsolete and may be removed at the Seller�s discretion from the Product Catalog. This is a final state.                                  |
        | onHold       | ON_HOLD        | A Product Specification that has been orderable, but is currently not available for Buyers due to supply constraints, product recall or other issues preventing it to be offered.                                      |
        | orderable    | ORDERABLE      | A Product Specification is in the `orderable` state when it is available for ordering by Buyers.                                                                                                                     |
        | inTest    | PILOT_BETA     | When a Product Specification starts Pilot/Beta testing, it starts in the inTest state.                                                                                                                             |
        | rejected     | REJECTED       | When Pilot/Beta testing fails the Product Specification to the rejected state. This is a final state.                                                                                                      |
      enum:
        - active
        - endOfSale
        - endOfSupport
        - obsolete
        - onHold
        - orderable
        - inTest
        - rejected
    ProductOfferingLifecycleStatusTransition:
      type: object
      description:
        "The planned Product Offering Status transition, including the\
        \ date it is expected to occur."
      properties:
        transitionDate:
          type: string
          format: date-time
          description:
            The Date and Time that the Next Product Offering Status transition
            is planned to occur.
        transitionLifecycleStatus:
          $ref: "#/components/schemas/ProductOfferingLifecycleStatusType"
      required:
        - plannedLifecycleStatus
        - plannedTransitionDate
    AttachmentValue:
      type: object
      description:
        "Complements the description of an element (for instance a product)\
        \ through video, pictures..."
      properties:
        attachmentId:
          type: string
          description:
            locally unique identifier to distinguish items from the Attachment
            list.
        author:
          type: string
          description: The name of the person or organization who added the Attachment.
        content:
          type: string
          description:
            "The actual contents of the attachment object, if embedded,\
            \ encoded as base64. Either url or (content and mimeType) attributes MUST\
            \ be provided during creation."
        creationDate:
          type: string
          format: date-time
          description: The date the Attachment was added.
        description:
          type: string
          description: A narrative text describing the content of the attachment
        mimeType:
          type: string
          description:
            "Attachment mime type such as extension file for video, picture\
            \ and document"
        name:
          type: string
          description: The name of the attachment
        size:
          $ref: "#/components/schemas/MEFByteSize"
        source:
          $ref: "#/components/schemas/MEFBuyerSellerType"
        url:
          type: string
          description:
            URL where the attachment is located. Either url or (content
            and mimeType) attributes MUST be provided during creation.
      required:
        - author
        - creationDate
        - name
        - source
    DataSizeUnit:
      type: string
      description: The unit of measure in the data size.
      enum:
        - BYTES
        - KBYTES
        - MBYTES
        - GBYTES
        - TBYTES
        - PBYTES
        - EBYTES
        - ZBYTES
        - YBYTES
    MEFBuyerSellerType:
      type: string
      description: An enumeration with buyer and seller values.
      enum:
        - buyer
        - seller
    MEFByteSize:
      type: object
      description: A size represented by value and Byte units
      properties:
        amount:
          type: number
          format: float
          default: 1
          description: Numeric value in a given unit
        units:
          $ref: "#/components/schemas/DataSizeUnit"
      required:
        - amount
        - units
    RelatedContactInformation:
      type: object
      description:
        Contact data for a person or organization that is involved in a
        given context. It is specified by the Seller (e.g. Seller Contact Information)
        or by the Buyer.
      properties:
        emailAddress:
          type: string
          description: Email address
        name:
          type: string
          description: Name of the contact
        number:
          type: string
          description: Phone number
        numberExtension:
          type: string
          description: Phone number extension
        organization:
          type: string
          description: The organization or company that the contact belongs to
        postalAddress:
          $ref: "#/components/schemas/FieldedAddress"
        role:
          type: string
          description: A role the party plays in a given context.
      required:
        - emailAddress
        - name
        - number
        - role
    FieldedAddress:
      type: object
      description:
        "A type of Address that has a discrete field and value for each\
        \ type of boundary or identifier down to the lowest level of detail. For example\
        \ \"street number\" is one field, \"street name\" is another field, etc. Reference:\
        \ MEF 79 (Sn 8.9.2)"
      properties:
        country:
          type: string
          description: Country that the address is in
        streetType:
          type: string
          description:
            "The type of street (e.g., alley, avenue, boulevard, brae,\
            \ crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf)"
        postcodeExtension:
          type: string
          description:
            An extension of a postal code. E.g. the part following the
            dash in a US urban property address
        city:
          type: string
          description: The city that the address is in
        streetNr:
          type: string
          description:
            Number identifying a specific property on a public street.
            It may be combined with streetNrLast for ranged addresses. MEF 79 defines
            it as required however as in certain countries it is not used we make
            it optional in API.
        locality:
          type: string
          description: The locality that the address is in
        postcode:
          type: string
          description:
            "Descriptor for a postal delivery area, used to speed and simplify\
            \ the delivery of mail (also known as zip code)"
        streetNrLast:
          type: string
          description: Last number in a range of street numbers allocated to a property
        streetNrSuffix:
          type: string
          description: The first street number suffix
        streetName:
          type: string
          description: Name of the street or other street type
        stateOrProvince:
          type: string
          description: The State or Province that the address is in
        streetNrLastSuffix:
          type: string
          description: Last street number suffix for a ranged address
        geographicSubAddress:
          $ref: "#/components/schemas/GeographicSubAddress"
        streetSuffix:
          type: string
          description: A modifier denoting a relative direction
      required:
        - city
        - country
        - streetName
    GeographicSubAddress:
      type: object
      description: "Additional fields used to specify an address, as detailed as possible."
      properties:
        buildingName:
          type: string
          description: |
            Allows for identification of places that require building name  as part of addressing information
        id:
          type: string
          description: Unique Identifier of the subAddress
        levelNumber:
          type: string
          description:
            "Used where a level type may be repeated e.g. BASEMENT 1, BASEMENT\
            \ 2"
        levelType:
          type: string
          description: Describes level types within a building
        privateStreetName:
          type: string
          description:
            '"Private streets internal to a property (e.g. a university)
            may have internal names that are not recorded by the land title office'
        privateStreetNumber:
          type: string
          description: Private streets numbers internal to a private street
        subUnit:
          type: array
          description:
            "Representation of a MEFSubUnit It is used for describing subunit\
            \ within a subaddress  e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT,\
            \ WHARF."
          items:
            $ref: "#/components/schemas/MEFSubUnit"
    MEFSubUnit:
      type: object
      description: Allows for sub unit identification
      properties:
        subUnitNumber:
          type: string
          description:
            "The discriminator used for the subunit, often just a simple\
            \ number but may also be a range."
        subUnitType:
          type: string
          description:
            "The type of subunit e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER,\
            \ UNIT, WHARF."
      required:
        - subUnitNumber
        - subUnitType
    Region:
      type: object
      description: Specifies a region
      properties:
        locality:
          type: string
          description:
            "An area of defined or undefined present boundaries within\
            \ a local authority or other legislatively defined area, usually rural\
            \ or semi-rural in nature."
        stateOrProvince:
          type: string
          description: The State or Province that the address is in
        country:
          type: string
          description: The Country the region is located.
      required:
        - country
    MEFItemTerm:
      type: object
      description: The term of the Item
      properties:
        description:
          type: string
          description: Description of the term
        duration:
          $ref: "#/components/schemas/Duration"
        endOfTermAction:
          $ref: "#/components/schemas/MEFEndOfTermAction"
        name:
          type: string
          description: Name of the term
        rollInterval:
          $ref: "#/components/schemas/Duration"
      required:
        - duration
        - endOfTermAction
        - name
    Duration:
      type: object
      description: "A Duration in a given unit of time e.g. 3 hours, or 5 days."
      properties:
        amount:
          type: integer
          description: "Duration (number of seconds, minutes, hours, etc.)"
        units:
          $ref: "#/components/schemas/TimeUnit"
      required:
        - amount
        - units
    MEFEndOfTermAction:
      type: string
      description:
        "The action the Seller will take once the term expires. \nRoll\
        \ indicates that the Product's contract will continue on a rolling basis for\
        \ the duration of the Roll Interval at the end of the Term.  \nAuto-disconnect\
        \ indicates that the Product will be disconnected at the end of the Term.\
        \ \nAuto-renew indicates that the Product's contract will be automatically\
        \ renewed for the Term Duration at the end of the Term."
      enum:
        - roll
        - autoDisconnect
        - autoRenew
    TimeUnit:
      type: string
      description: |
        Represents a unit of time.
        Reference: MEF 57.2 (Sn 9.22)
      enum:
        - calendarMonths
        - calendarDays
        - calendarHours
        - calendarMinutes
        - businessDays
        - businessHours
        - businessMinutes
    Note:
      type: object
      description:
        Extra information about a given entity. Only useful in processes
        involving human interaction. Not applicable for the automated process.
      properties:
        author:
          type: string
          description: Author of the note
        date:
          type: string
          format: date-time
          description: Date the Note was created
        id:
          type: string
          description:
            "Identifier of the note within its containing entity (may or\
            \ may not be globally unique, depending on provider implementation)"
        source:
          $ref: "#/components/schemas/MEFBuyerSellerType"
        text:
          type: string
          description: Text of the note
      required:
        - author
        - date
        - id
        - source
        - text
    ProductSpecificationRef:
      type: object
      description: Product Specification reference.
      properties:
        id:
          type: string
          description:
            Unique (within the Seller domain) identifier for the Product
            Specification.
        href:
          type: string
          format: uri
          description: Hyperlink to access the Product Specification
      required:
        - id
    ProductOfferingContextualInfo:
      type: object
      description:
        "Constrained Product Schema that should be used by the Buyer in\
        \ the defined Context, where Context is built as pair - a Business Function\
        \ (e.g. Quote) and Product Action (e.g. install). Those product schemas are\
        \ created by applying the constraints to Product Schemas defined in the Product\
        \ Specification. Contextual info MUST be provided for every possible combination\
        \ of Product Actions and Business Functions  (if there are no differences\
        \ per function of per action then use wildcard - 'all' -  and reuse the value\
        \ of  Product Offering Specification attribute)."
      properties:
        contextSchema:
          $ref: "#/components/schemas/SchemaRefOrValue"
        context:
          $ref: "#/components/schemas/Context"
      required:
        - context
        - contextSchema
    SchemaRefOrValue:
      type: object
      description:
        Reference to the JSON schema location or the exact value of the
        JSON schema. **Note:** One of the properties must be provided i.e. schemaLocation
        or schema.
      properties:
        schema:
          type: string
          description: Raw JSON schema value.
        schemaLocation:
          type: string
          format: uri
          description:
            This field provides a link to the schema describing the target
            product
    Context:
      type: object
      description:
        Context that is defined as a two-dimensional vector of Business
        Function and Product Action.
      properties:
        productAction:
          $ref: "#/components/schemas/MEFProductAction"
        businessFunction:
          $ref: "#/components/schemas/MEFBusinessFunction"
    MEFProductAction:
      type: string
      description:
        Action that could be applied to the Product (or future product)
        during the execution of the Business Function. Value 'All' is the wildcard
        - stands for any action.
      enum:
        - add
        - modify
        - all
    MEFBusinessFunction:
      type: string
      description:
        Business Function that could be executed for the given Product
        accordingly to LSO Cantata/Sonata IRPs.  Value 'All' is the wildcard - stands
        for any action.
      enum:
        - productOfferingQualification
        - quote
        - productOrder
        - productInventory
        - all
    ProductSpecification_Common:
      type: object
      description: Is the basis for all Production Specification representations.
      properties:
        id:
          type: string
          description:
            Unique identifier (within the Seller domain) for the Product
            Specification.
        href:
          type: string
          format: uri
          description: Reference of the Product Specification
        name:
          type: string
          description: Name of the Product Specification
        lifecycleStatus:
          $ref: "#/components/schemas/ProductSpecificationLifecycleStatusType"
        lastUpdate:
          type: string
          format: date-time
          description:
            The date and time the Product Specification was created or
            most recently updated.
    ProductSpecification_Find:
      allOf:
        - $ref: "#/components/schemas/ProductSpecification_Common"
        - description:
            Is a lightweight version of the Product Specification object
            used in Get List use case.
          required:
            - id
            - lastUpdate
            - lifecycleStatus
            - name
    ProductSpecification:
      allOf:
        - $ref: "#/components/schemas/ProductSpecification_Common"
        - description:
            Is a detailed description of a tangible or intangible object
            made available externally in the form of a ProductOffering to customers
            or other parties playing a party role.
          properties:
            brand:
              type: string
              description:
                The manufacturer or trademark of the Product Specification
                if the Seller requires a CPE on the Buyer's premise.
            description:
              type: string
              description: Description of the Product Specification.
            productNumber:
              type: string
              description:
                An identifier assigned to the model or version of the CPE
                used in conjunction with the Brand (for example hardware SKU or software
                license key).
            attachment:
              type: array
              description:
                "Complements the Product Offering description with presentation,\
                \ video, pictures, etc. This would only be expected to be used to provide\
                \ additional information if there is a CPE re-quired, for instance a\
                \ link to the website of the CPE vendor."
              items:
                $ref: "#/components/schemas/AttachmentValue"
            note:
              type: array
              description: |
                A set of comments for additional information.
              items:
                $ref: "#/components/schemas/Note"
            sourceSchema:
              $ref: "#/components/schemas/SchemaRefOrValue"
            productSpecificationRelationship:
              type: array
              description: List of relations between defined Product Specifications.
              items:
                $ref: "#/components/schemas/ProductSpecificationRelationship"
          required:
            - description
            - id
            - lastUpdate
            - lifecycleStatus
            - name
            - productSpecificationRelationship
            - sourceSchema
    ProductSpecificationRelationship:
      type: object
      description:
        Uni-directional relationship between the Products (the owner of
        the relation is the Product that defines it). Relation defines the type and
        the cardinalities.
      properties:
        id:
          type: string
          description: Identifier of the targeted Product Specification
        relationshipType:
          type: string
          description:
            "Defines the type of the relation or the role of the relation\
            \ owner in the context of this relation  e.g. hosts, aggregates"
        minCardinality:
          type: integer
          default: 0
          description:
            The minimal number of the related Products that must be satisfied.  e.g.
            Access E-Line requires at least two End Points.
          minimum: 0
        maxCardinality:
          type: integer
          default: -1
          description:
            The maximal number of the related Products that must be satisfied.  e.g.
            Endpoint must be related with only one Access E-Line. `-1` stands for
            infinity i.e. any number of instances of the given type could be related
            to the considered instance.
          maximum: -1
      required:
        - id
        - type
    Error:
      type: object
      description: |
        Standard Class used to describe API response error Not intended to be used directly. The `code` in the HTTP header is used as a discriminator for the type of error returned in runtime.
      properties:
        reason:
          type: string
          description:
            Text that explains the reason for the error. This can be shown
            to a client user.
          maxLength: 255
        message:
          type: string
          description:
            Text that provides mode details and corrective actions related
            to the error. This can be shown to a client user.
        referenceError:
          type: string
          format: uri
          description: URL pointing to documentation describing the error
      required:
        - reason
    Error400:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            code:
              $ref: "#/components/schemas/Error400Code"
          required:
            - code
      description: Bad Request. (https://tools.ietf.org/html/rfc7231#section-6.5.1)
    Error400Code:
      type: string
      description: |-
        One of the following error codes:
        - missingQueryParameter: The URI is missing a required query-string parameter
        - missingQueryValue: The URI is missing a required query-string parameter value
        - invalidQuery: The query section of the URI is invalid.
        - invalidBody: The request has an invalid body
      enum:
        - missingQueryParameter
        - missingQueryValue
        - invalidQuery
        - invalidBody
    Error401:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            code:
              $ref: "#/components/schemas/Error401Code"
          required:
            - code
      description: Unauthorized.  (https://tools.ietf.org/html/rfc7235#section-3.1)
    Error401Code:
      type: string
      description: |-
        One of the following error codes:
        - missingCredentials: No credentials provided.
        - invalidCredentials: Provided credentials are invalid or expired
      enum:
        - missingCredentials
        - invalidCredentials
    Error403:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            code:
              $ref: "#/components/schemas/Error403Code"
          required:
            - code
      description:
        Forbidden. This code indicates that the server understood the request
        but refuses to authorize it. (https://tools.ietf.org/html/rfc7231#section-6.5.3)
    Error403Code:
      type: string
      description: |-
        This code indicates that the server understood
        the request but refuses to authorize it because
        of one of the following error codes:
        - accessDenied: Access denied
        - forbiddenRequester: Forbidden requester
        - tooManyUsers: Too many users
      enum:
        - accessDenied
        - forbiddenRequester
        - tooManyUsers
    Error404:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            code:
              type: string
              description: |-
                The following error code:
                - notFound: A current representation for the target resource not found
              enum:
                - notFound
          required:
            - code
      description: Resource for the requested path not found. (https://tools.ietf.org/html/rfc7231#section-6.5.4)
    Error500:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            code:
              type: string
              description: |-
                The following error code:
                - internalError: Internal server error - the server encountered an unexpected condition that prevented it from fulfilling the request.
              enum:
                - internalError
          required:
            - code
      description: Internal Server Error. (https://tools.ietf.org/html/rfc7231#section-6.6.1)
    Error501:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            code:
              type: string
              description: |-
                The following error code:
                - notImplemented: Method not supported by the server
              enum:
                - notImplemented
          required:
            - code
      description:
        Not Implemented. Used in case Seller is not supporting an optional
        operation (https://tools.ietf.org/html/rfc7231#section-6.6.2)
    EventSubscription:
      type: object
      description: |
        This resource is used to respond to notification subscriptions.
      properties:
        callback:
          type: string
          description:
            The value provided by the Buyer in `EventSubscriptionInput`
            during notification registration
        id:
          type: string
          description:
            An identifier of this Event Subscription assigned by the Seller
            when a resource is created.
        query:
          type: string
          description:
            The value provided by the Buyer in `EventSubscriptionInput`
            during notification registration
      required:
        - callback
        - id
    EventSubscriptionInput:
      type: object
      description: This class is used to register for Notifications.
      properties:
        callback:
          type: string
          description:
            "This callback value must be set to *host* property from Buyer\
            \ Product Catalog Notification API (productCatalogNotification.api.yaml).\
            \ This property is appended with the base path and notification resource\
            \ path specified in that API to construct an URL to which notification\
            \ is sent. E.g. for \"callback\": \"https://buyer.com/listenerEndpoint\"\
            , the Product Specification state change event notification will be sent\
            \ to: `https://buyer.com/listenerEndpoint/mefApi/sonata/productCatalogSpecification/v9/listener/productCatalogStateChange`"
        query:
          type: string
          description:
            "This attribute is used to define to which type of events to\
            \ register to. See the `ProductCategoryEventType`, `ProductSpecificationEventType`,\
            \ `ProductOfferingEventType` in (productCatalogNotification.api.yaml to\
            \ check what kind of events are supported. To subscribe for more than\
            \ one event type, put the values separated by comma: `eventType=productOfferingCreateEvent,productOfferingAttributeValueChangeEvent`\
            \ or repeat the same attribute: `eventType=productOfferingCreateEvent&eventType=productOfferingAttributeValueChangeEvent`\
            \ An empty query is treated as specifying no filters - ending in subscription\
            \ for all event types. "
      required:
        - callback
    Any: {}
  securitySchemes:
    oauth2MEFLSOAPI:
      description: Default m2m client code
      flows:
        clientCredentials:
          refreshUrl: http://mef.net/example/refresh
          scopes:
            default: default scope
          tokenUrl: http://mef.net/example/token
      type: oauth2
