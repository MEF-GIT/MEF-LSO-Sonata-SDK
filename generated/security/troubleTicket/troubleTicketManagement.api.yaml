openapi: 3.0.1
info:
  description: |
    **This file forms part of MEF 124**

    This API implements Business Requirements described in MEF 113

    It allows the Buyer to create, retrieve, and update Trouble Tickets as well
    as receive notifications about Incidents' and Trouble Tickets' updates.
    This allows managing issues and situations that are not part of normal
    operations of the Product provided by the Seller.

    List of supported use cases:
    - Create Ticket
    - Retrieve Ticket List
    - Retrieve Ticket by Ticket Identifier
    - Patch Ticket by Ticket Identifier
    - Cancel Ticket by Ticket Identifier
    - Ticket Resolution Confirmation
    - Retrieve Incident List
    - Retrieve Incident by Incident Identifier
    - Register for Event Notifications

    Copyright 2022 MEF Forum and its contributors

    This file includes content based on the TM Forum Trouble Ticket API (TMF621
    v4.0.0) available at https://github.com/tmforum-apis/TMF621_TroubleTicket,
    which is licensed by the TM Forum under the Apache License version 2.0.
    Such content has been modified by the MEF Forum and its contributors.
  title: Trouble Ticket and Incident Management
  version: 4.0.0
servers:
  - url: "https://{serverBase}/mefApi/sonata/troubleTicket/v4/"
    variables:
      serverBase:
        default: mef.net
        description: The base of Seller's URL.
security:
  - oauth2MEFLSOAPI:
      - default
tags:
  - name: troubleTicket
  - name: troubleTicket operations
  - name: incident
  - name: events subscription
paths:
  /troubleTicket:
    get:
      description: |
        The Buyer requests a list of Trouble Tickets from the Seller based on a set of specified filter criteria. The Seller returns a summarized list of Trouble Tickets.
      operationId: listTroubleTicket
      parameters:
        - description:
            ID given by the consumer and only understandable by him (to facilitate
            his searches afterward)
          in: query
          name: externalId
          required: false
          schema:
            type: string
        - description:
            The priority (ITIL) is based on the assessment of the impact
            and urgency of how quickly the Ticket should be resolved as evaluated by
            the Buyer. The Priority is used by the Seller to determine the order in
            which Tickets get resolved across Buyers.
          in: query
          name: priority
          required: false
          schema:
            type: string
            enum:
              - low
              - medium
              - high
              - critical
        - description:
            The priority (ITIL) is based on the assessment of the impact
            and urgency of how quickly the Ticket should be resolved after evaluation
            by the Seller of the impact of the Issue on the Buyer.
          in: query
          name: sellerPriority
          required: false
          schema:
            type: string
            enum:
              - low
              - medium
              - high
              - critical
        - description:
            The severity or impact (ITIL) of the Ticket as evaluated by the
            Buyer.
          in: query
          name: severity
          required: false
          schema:
            type: string
            enum:
              - minor
              - moderate
              - significant
              - extensive
        - description:
            The severity or impact (ITIL) of the Ticket on the Buyer as evaluated
            by the Seller.
          in: query
          name: sellerSeverity
          required: false
          schema:
            type: string
            enum:
              - minor
              - moderate
              - significant
              - extensive
        - description:
            The presumed cause of the Trouble Ticket as evaluated by the
            Buyer.
          in: query
          name: ticketType
          required: false
          schema:
            type: string
            enum:
              - assistance
              - information
              - installation
              - maintenance
        - description: The current status of the Trouble Ticket
          in: query
          name: status
          required: false
          schema:
            type: string
            enum:
              - acknowledged
              - assessingCancellation
              - cancelled
              - closed
              - inProgress
              - pending
              - resolved
              - reopened
        - description: The type of impact observed by the Buyer.
          in: query
          name: observedImpact
          required: false
          schema:
            type: string
            enum:
              - degraded
              - intermittent
              - down
        - description:
            ID of a related entity that this ticket is related to and is
            present in the `relatedEntity` list
          in: query
          name: relatedEntityId
          required: false
          schema:
            type: string
        - description:
            Type of a related entity that this ticket is related to and is
            present in the `relatedEntity` list
          in: query
          name: relatedEntityType
          required: false
          schema:
            type: string
            default: Product
        - description: The date on which the Trouble Ticket was created - greater than
          in: query
          name: creationDate.gt
          required: false
          schema:
            type: string
            format: date-time
        - description: The date on which the Trouble Ticket was created - lower than
          in: query
          name: creationDate.lt
          required: false
          schema:
            type: string
            format: date-time
        - description:
            The date provided by the Seller to indicate when the Ticket is
            expected to be resolved - greater than
          in: query
          name: expectedResolutionDate.gt
          required: false
          schema:
            type: string
            format: date-time
        - description:
            The date provided by the Seller to indicate when the Ticket is
            expected to be resolved - lower than
          in: query
          name: expectedResolutionDate.lt
          required: false
          schema:
            type: string
            format: date-time
        - description:
            The date the Ticket status was set to resolved by the Seller
            - greater than
          in: query
          name: resolutionDate.gt
          required: false
          schema:
            type: string
            format: date-time
        - description:
            The date the Ticket status was set to resolved by the Seller
            - lower than
          in: query
          name: resolutionDate.lt
          required: false
          schema:
            type: string
            format: date-time
        - description:
            The unique identifier of the organization that is acting as the
            a Buyer. MUST be specified in the request only when the requester represents
            more than one Buyer.
          in: query
          name: buyerId
          required: false
          schema:
            type: string
        - description:
            The unique identifier of the organization that is acting as the
            Seller. MUST be specified in the request only when responding entity represents
            more than one Seller.
          in: query
          name: sellerId
          required: false
          schema:
            type: string
        - description: Requested index for start of resources to be provided in response
          in: query
          name: offset
          required: false
          schema:
            type: integer
        - description: Requested number of resources to be provided in response
          in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TroubleTicket_Find"
          description: OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)
          headers:
            X-Pagination-Throttled:
              description: |
                Used to indicate that result page was throttled to maximum possible size  and there are additional results that can be fetched
              schema:
                type: boolean
            X-Total-Count:
              description: |
                The total number of matching records. E.g. if there are 50 matching records in total, but the request has offset=10 and limit=10, then the X-Total-Count is 50.
              schema:
                type: integer
            X-Result-Count:
              description: The number of records included in the response
              schema:
                type: integer
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error400"
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error401"
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error403"
          description: Forbidden
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error500"
          description: Internal Server Error
      security:
        - oauth2MEFLSOAPI:
            - listTroubleTicket
      summary: List or found Trouble Ticket objects
      tags:
        - troubleTicket
    post:
      description:
        A request initiated by the Buyer to create a Ticket in the Seller's
        system to report an Issue experienced by the Buyer
      operationId: createTroubleTicket
      parameters:
        - description:
            The unique identifier of the organization that is acting as the
            a Buyer. MUST be specified in the request only when the requester represents
            more than one Buyer.
          in: query
          name: buyerId
          required: false
          schema:
            type: string
        - description:
            The unique identifier of the organization that is acting as the
            Seller. MUST be specified in the request only when responding entity represents
            more than one Seller.
          in: query
          name: sellerId
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: "#/components/schemas/TroubleTicket_Create"
        description: The TroubleTicket to be created
        required: true
      responses:
        "201":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/TroubleTicket"
          description: Created  (https://tools.ietf.org/html/rfc7231#section-6.3.2)
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error400"
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error401"
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error403"
          description: Forbidden
        "422":
          content:
            application/json;charset=utf-8:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error422"
          description: Unprocessable entity due to the business validation problems
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error500"
          description: Internal Server Error
      security:
        - oauth2MEFLSOAPI:
            - createTroubleTicket
      summary: Creates a TroubleTicket
      tags:
        - troubleTicket
      x-codegen-request-body-name: troubleTicket
  /troubleTicket/{id}:
    get:
      description:
        The Buyer requests detailed information about a single Ticket based
        on a Ticket Identifier.
      operationId: retrieveTroubleTicket
      parameters:
        - description: Identifier of the TroubleTicket
          in: path
          name: id
          required: true
          schema:
            type: string
        - description:
            The unique identifier of the organization that is acting as the
            a Buyer. MUST be specified in the request only when the requester represents
            more than one Buyer.
          in: query
          name: buyerId
          required: false
          schema:
            type: string
        - description:
            The unique identifier of the organization that is acting as the
            Seller. MUST be specified in the request only when responding entity represents
            more than one Seller.
          in: query
          name: sellerId
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/TroubleTicket"
          description: OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error400"
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error401"
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error403"
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error404"
          description: Not Found
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error500"
          description: Internal Server Error
      security:
        - oauth2MEFLSOAPI:
            - retrieveTroubleTicket
      summary: Retrieves a TroubleTicket by ID
      tags:
        - troubleTicket
    patch:
      description:
        A request by the Buyer to patch a Ticket created by the Buyer in
        the Seller's system.
      operationId: patchTroubleTicket
      parameters:
        - description: Identifier of the TroubleTicket
          in: path
          name: id
          required: true
          schema:
            type: string
        - description:
            The unique identifier of the organization that is acting as the
            a Buyer. MUST be specified in the request only when the requester represents
            more than one Buyer.
          in: query
          name: buyerId
          required: false
          schema:
            type: string
        - description:
            The unique identifier of the organization that is acting as the
            Seller. MUST be specified in the request only when responding entity represents
            more than one Seller.
          in: query
          name: sellerId
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: "#/components/schemas/TroubleTicket_Update"
        description: The TroubleTicket to be updated
        required: true
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/TroubleTicket"
          description: Updated
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error400"
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error401"
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error403"
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error404"
          description: Not Found
        "409":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error409"
          description: Not Found
        "422":
          content:
            application/json;charset=utf-8:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error422"
          description: Unprocessable entity due to the business validation problems
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error500"
          description: Internal Server Error
      security:
        - oauth2MEFLSOAPI:
            - patchTroubleTicket
      summary: Updates partially a TroubleTicket
      tags:
        - troubleTicket
      x-codegen-request-body-name: troubleTicket
  /troubleTicket/{id}/cancel:
    post:
      description: This operation sends a cancellation request.
      operationId: cancelTroubleTicket
      parameters:
        - description: Identifier of the TroubleTicket
          in: path
          name: id
          required: true
          schema:
            type: string
        - description:
            The unique identifier of the organization that is acting as the
            a Buyer. MUST be specified in the request only when the requester represents
            more than one Buyer.
          in: query
          name: buyerId
          required: false
          schema:
            type: string
        - description: |-
            The unique identifier of the organization that is acting as the Seller. MUST be specified in the request only when responding entity
             represents more than one Seller.
          in: query
          name: sellerId
          required: false
          schema:
            type: string
      responses:
        "204":
          description: Cancelled
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error400"
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error401"
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error403"
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error404"
          description: Not Found
        "422":
          content:
            application/json;charset=utf-8:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error422"
          description: Unprocessable entity due to the business validation problems
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error500"
          description: Internal Server Error
      security:
        - oauth2MEFLSOAPI:
            - cancelTroubleTicket
      summary: Cancels a Trouble Ticket
      tags:
        - troubleTicket operations
  /troubleTicket/{id}/close:
    post:
      description:
        This operation allows the Buyer to send Ticket Resolution Confirmation
        by closing it
      operationId: closeTroubleTicket
      parameters:
        - description: Identifier of the TroubleTicket
          in: path
          name: id
          required: true
          schema:
            type: string
        - description:
            The unique identifier of the organization that is acting as the
            a Buyer. MUST be specified in the request only when the requester represents
            more than one Buyer.
          in: query
          name: buyerId
          required: false
          schema:
            type: string
        - description: |-
            The unique identifier of the organization that is acting as the Seller. MUST be specified in the request only when responding entity
             represents more than one Seller.
          in: query
          name: sellerId
          required: false
          schema:
            type: string
      responses:
        "204":
          description: Closed
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error400"
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error401"
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error403"
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error404"
          description: Not Found
        "422":
          content:
            application/json;charset=utf-8:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error422"
          description: Unprocessable entity due to the business validation problems
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error500"
          description: Internal Server Error
      security:
        - oauth2MEFLSOAPI:
            - closeTroubleTicket
      summary: Closes a Trouble Ticket
      tags:
        - troubleTicket operations
  /troubleTicket/{id}/reopen:
    post:
      description:
        The operation allows the Buyer to send Ticket Resolution Confirmation
        by reopening it
      operationId: reopenTroubleTicket
      parameters:
        - description: Identifier of the TroubleTicket
          in: path
          name: id
          required: true
          schema:
            type: string
        - description:
            The unique identifier of the organization that is acting as the
            a Buyer. MUST be specified in the request only when the requester represents
            more than one Buyer.
          in: query
          name: buyerId
          required: false
          schema:
            type: string
        - description: |-
            The unique identifier of the organization that is acting as the Seller. MUST be specified in the request only when responding entity
             represents more than one Seller.
          in: query
          name: sellerId
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: "#/components/schemas/Reason"
        description:
          "Unstructured comment describing the reason the Buyer doesn't\
          \ agree on the resolution and needs the Trouble Ticket to be reopened. If\
          \ the Buyer wants this Closure Rejection Reason to be included in the Trouble\
          \ Ticket Notes for historical reasons, the Buyer needs to patch the Trouble\
          \ Ticket."
        required: true
      responses:
        "204":
          description: Reopened
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error400"
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error401"
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error403"
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error404"
          description: Not Found
        "422":
          content:
            application/json;charset=utf-8:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error422"
          description: Unprocessable entity due to the business validation problems
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error500"
          description: Internal Server Error
      security:
        - oauth2MEFLSOAPI:
            - reopenTroubleTicket
      summary: Reopens a Trouble Ticket
      tags:
        - troubleTicket operations
      x-codegen-request-body-name: reason
  /incident:
    get:
      description: |
        The Buyer requests a list of Incidents from the Seller based on a set of specified filter criteria. The Seller returns a summarized list of Incidents.
      operationId: listIncident
      parameters:
        - description:
            The priority (ITIL) is based on the assessment of the impact
            and urgency of how quickly the Incident should be resolved after evaluation
            by the Seller of the impact of the Incident.
          in: query
          name: priority
          required: false
          schema:
            type: string
            enum:
              - low
              - medium
              - high
              - critical
        - description:
            The severity or impact (ITIL) of the Incident as evaluated by
            the Seller.
          in: query
          name: severity
          required: false
          schema:
            type: string
            enum:
              - minor
              - moderate
              - significant
              - extensive
        - description: The type of impact observed by the Buyer.
          in: query
          name: impact
          required: false
          schema:
            type: string
            enum:
              - degraded
              - down
              - intermittent
        - description: The presumed cause of the Incident as evaluated by the Seller.
          in: query
          name: incidentType
          required: false
          schema:
            type: string
            enum:
              - maintenance
              - repair
              - installation
        - description: The current status of the Incident
          in: query
          name: status
          required: false
          schema:
            type: string
            enum:
              - closed
              - created
              - inProgress
        - description:
            ID of a related entity that this Incident is related to and is
            present in the `relatedEntity` list
          in: query
          name: relatedEntityId
          required: false
          schema:
            type: string
        - description:
            Type of a related entity that this Incident is related to and
            is present in the `relatedEntity` list
          in: query
          name: relatedEntityType
          required: false
          schema:
            type: string
            default: Product
        - description: The date on which the Incident was created - greater than
          in: query
          name: creationDate.gt
          required: false
          schema:
            type: string
            format: date-time
        - description: The date on which the Trouble Ticket was created - lower than
          in: query
          name: creationDate.lt
          required: false
          schema:
            type: string
            format: date-time
        - description:
            "The date when the Incident was first identified, for example\
            \ via error logs - greater than"
          in: query
          name: situationStartDate.gt
          required: false
          schema:
            type: string
            format: date-time
        - description:
            "The date when the Incident was first identified, for example\
            \ via error logs - lower than"
          in: query
          name: situationStartDate.lt
          required: false
          schema:
            type: string
            format: date-time
        - description:
            The date provided by the Seller to indicate when the Incident
            is expected to be closed - greater than
          in: query
          name: expectedClosedDate.gt
          required: false
          schema:
            type: string
            format: date-time
        - description:
            The date provided by the Seller to indicate when the Incident
            is expected to be closed - lower than
          in: query
          name: expectedClosedDate.lt
          required: false
          schema:
            type: string
            format: date-time
        - description:
            The date the Incident status was set to closed by the Seller
            - greater than
          in: query
          name: closedDate.gt
          required: false
          schema:
            type: string
            format: date-time
        - description:
            The date the Incident status was set to closed by the Seller
            - lower than
          in: query
          name: closedDate.lt
          required: false
          schema:
            type: string
            format: date-time
        - description:
            The unique identifier of the organization that is acting as the
            a Buyer. MUST be specified in the request only when the requester represents
            more than one Buyer.
          in: query
          name: buyerId
          required: false
          schema:
            type: string
        - description:
            The unique identifier of the organization that is acting as the
            Seller. MUST be specified in the request only when responding entity represents
            more than one Seller.
          in: query
          name: sellerId
          required: false
          schema:
            type: string
        - description: Requested index for start of resources to be provided in response
          in: query
          name: offset
          required: false
          schema:
            type: integer
        - description: Requested number of resources to be provided in response
          in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Incident_Find"
          description: OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)
          headers:
            X-Pagination-Throttled:
              description: |
                Used to indicate that result page was throttled to maximum possible size  and there are additional results that can be fetched
              schema:
                type: boolean
            X-Total-Count:
              description: |
                The total number of matching records. E.g. if there are 50 matching records in total, but the request has offset=10 and limit=10, then the X-Total-Count is 50.
              schema:
                type: integer
            X-Result-Count:
              description: The number of records included in the response
              schema:
                type: integer
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error400"
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error401"
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error403"
          description: Forbidden
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error500"
          description: Internal Server Error
        "501":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error501"
          description:
            Method not implemented. Used in case Seller is not supporting
            Notification mechanism
      security:
        - oauth2MEFLSOAPI:
            - listIncident
      summary: List or found Incident objects
      tags:
        - incident
  /incident/{id}:
    get:
      description:
        The Buyer requests detailed information about a single Incident
        based on a Incident Identifier.
      operationId: retrieveIncident
      parameters:
        - description: Identifier of the Incident
          in: path
          name: id
          required: true
          schema:
            type: string
        - description:
            The unique identifier of the organization that is acting as the
            a Buyer. MUST be specified in the request only when the requester represents
            more than one Buyer.
          in: query
          name: buyerId
          required: false
          schema:
            type: string
        - description:
            The unique identifier of the organization that is acting as the
            Seller. MUST be specified in the request only when responding entity represents
            more than one Seller.
          in: query
          name: sellerId
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Incident"
          description: OK. (https://tools.ietf.org/html/rfc7231#section-6.3.1)
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error400"
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error401"
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error403"
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error404"
          description: Not Found
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error500"
          description: Internal Server Error
        "501":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error501"
          description:
            Method not implemented. Used in case Seller is not supporting
            Notification mechanism
      security:
        - oauth2MEFLSOAPI:
            - retrieveIncident
      summary: Retrieves ac Incident by ID
      tags:
        - incident
  /hub:
    post:
      description: The Buyer requests to subscribe to Ticket and Incident Notifications.
      operationId: registerListener
      parameters:
        - description:
            The unique identifier of the organization that is acting as the
            a Buyer. MUST be specified in the request only when the requester represents
            more than one Buyer.
          in: query
          name: buyerId
          required: false
          schema:
            type: string
        - description:
            The unique identifier of the organization that is acting as the
            Seller. MUST be specified in the request only when responding entity represents
            more than one Seller.
          in: query
          name: sellerId
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: "#/components/schemas/EventSubscriptionInput"
        description: Data containing the callback endpoint to deliver the information
        required: true
      responses:
        "201":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/EventSubscription"
          description: Subscribed  (https://tools.ietf.org/html/rfc7231#section-6.3.2)
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error400"
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error401"
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error403"
          description: Forbidden
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error500"
          description: Internal Server Error
      security:
        - oauth2MEFLSOAPI:
            - registerListener
      summary: Allows the Buyer to register to Trouble Ticket state change notifications
      tags:
        - events subscription
      x-codegen-request-body-name: data
  /hub/{id}:
    delete:
      description: The Buyer requests to unsubscribe from Ticket and Incident Notifications
      operationId: unregisterListener
      parameters:
        - description: The id of the EventSubscription
          in: path
          name: id
          required: true
          schema:
            type: string
        - description:
            The unique identifier of the organization that is acting as the
            a Buyer. MUST be specified in the request only when the requester represents
            more than one Buyer.
          in: query
          name: buyerId
          required: false
          schema:
            type: string
        - description:
            The unique identifier of the organization that is acting as the
            Seller. MUST be specified in the request only when responding entity represents
            more than one Seller.
          in: query
          name: sellerId
          required: false
          schema:
            type: string
      responses:
        "204":
          description: Deleted (https://tools.ietf.org/html/rfc7231#section-6.3.5)
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error400"
          description: Bad request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error401"
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error403"
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error404"
          description: Not Found
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error500"
          description: Internal Server Error
      security:
        - oauth2MEFLSOAPI:
            - unregisterListener
      summary: Unregister a listener
      tags:
        - events subscription
    get:
      description: This operation retrieves a hub entity.
      operationId: retrieveHub
      parameters:
        - description: Identifier of the Hub
          in: path
          name: id
          required: true
          schema:
            type: string
        - description:
            The unique identifier of the organization that is acting as the
            a Buyer. MUST be specified in the request only when the requester represents
            more than one Buyer.
          in: query
          name: buyerId
          required: false
          schema:
            type: string
        - description:
            The unique identifier of the organization that is acting as the
            Seller. MUST be specified in the request only when responding entity  represents
            more than one Seller.
          in: query
          name: sellerId
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/EventSubscription"
          description: Success
        "400":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error400"
          description: Bad Request
        "401":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error401"
          description: Unauthorized
        "403":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error403"
          description: Forbidden
        "404":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error404"
          description: Not Found
        "500":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error500"
          description: Internal Server Error
        "501":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error501"
          description: Method not implemented.
      security:
        - oauth2MEFLSOAPI:
            - retrieveHub
      summary: Retrieves listener information
      tags:
        - events subscription
components:
  schemas:
    AttachmentValue:
      type: object
      description:
        "Complements the description of an element (for instance a product)\
        \ through video, pictures..."
      properties:
        attachmentId:
          type: string
          description:
            locally unique identifier to distinguish items from the Attachment
            list.
        author:
          type: string
          description: The name of the person or organization who added the Attachment.
        content:
          type: string
          description:
            "The actual contents of the attachment object, if embedded,\
            \ encoded as base64. Either url or (content and mimeType) attributes MUST\
            \ be provided during creation."
        creationDate:
          type: string
          format: date-time
          description: The date the Attachment was added.
        description:
          type: string
          description: A narrative text describing the content of the attachment
        mimeType:
          type: string
          description:
            "Attachment mime type such as extension file for video, picture\
            \ and document"
        name:
          type: string
          description: The name of the attachment
        size:
          $ref: "#/components/schemas/MEFByteSize"
        source:
          $ref: "#/components/schemas/MEFBuyerSellerType"
        url:
          type: string
          description:
            URL where the attachment is located. Either url or (content
            and mimeType) attributes MUST be provided during creation.
      required:
        - author
        - creationDate
        - name
        - source
    DataSizeUnit:
      type: string
      description: The unit of measure in the data size.
      enum:
        - BYTES
        - KBYTES
        - MBYTES
        - GBYTES
        - TBYTES
        - PBYTES
        - EBYTES
        - ZBYTES
        - YBYTES
    Error:
      type: object
      description: |
        Standard Class used to describe API response error Not intended to be used directly. The `code` in the HTTP header is used as a discriminator for the type of error returned in runtime.
      properties:
        message:
          type: string
          description:
            Text that provides mode details and corrective actions related
            to the error. This can be shown to a client user.
        reason:
          type: string
          description:
            Text that explains the reason the for error. This can be shown
            to a client user.
          maxLength: 255
        referenceError:
          type: string
          format: uri
          description: URL pointing to documentation describing the error
      required:
        - reason
    Error400:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            code:
              $ref: "#/components/schemas/Error400Code"
          required:
            - code
      description: Bad Request. (https://tools.ietf.org/html/rfc7231#section-6.5.1)
    Error400Code:
      type: string
      description: |-
        One of the following error codes:
        - missingQueryParameter: The URI is missing a required query-string parameter
        - missingQueryValue: The URI is missing a required query-string parameter value
        - invalidQuery: The query section of the URI is invalid.
        - invalidBody: The request has an invalid body
      enum:
        - missingQueryParameter
        - missingQueryValue
        - invalidQuery
        - invalidBody
    Error401:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            code:
              $ref: "#/components/schemas/Error401Code"
          required:
            - code
      description: Unauthorized.  (https://tools.ietf.org/html/rfc7235#section-3.1)
    Error401Code:
      type: string
      description: |-
        One of the following error codes:
        - missingCredentials: No credentials provided.
        - invalidCredentials: Provided credentials are invalid or expired
      enum:
        - missingCredentials
        - invalidCredentials
    Error403:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            code:
              $ref: "#/components/schemas/Error403Code"
          required:
            - code
      description:
        Forbidden. This code indicates that the server understood the request
        but refuses to authorize it. (https://tools.ietf.org/html/rfc7231#section-6.5.3)
    Error403Code:
      type: string
      description: |-
        This code indicates that the server understood
        the request but refuses to authorize it because
        of one of the following error codes:
        - accessDenied: Access denied
        - forbiddenRequester: Forbidden requester
        - tooManyUsers: Too many users
      enum:
        - accessDenied
        - forbiddenRequester
        - tooManyUsers
    Error404:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            code:
              type: string
              description: |-
                The following error code:
                - notFound: A current representation for the target resource not found
              enum:
                - notFound
          required:
            - code
      description: Resource for the requested path not found. (https://tools.ietf.org/html/rfc7231#section-6.5.4)
    Error409:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            code:
              type: string
              description: |-
                The following error code:
                - conflict: The client has provided a value whose semantics are not appropriate for the property.
              enum:
                - conflict
          required:
            - code
      description: Conflict (https://datatracker.ietf.org/doc/html/rfc7231#section-6.5.8)
    Error422:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            code:
              $ref: "#/components/schemas/Error422Code"
            propertyPath:
              type: string
              description: |
                A pointer to a particular property of the payload that caused the validation issue. It is highly recommended that this property should be used.
                Defined using JavaScript Object Notation (JSON) Pointer (https://tools.ietf.org/html/rfc6901).
          required:
            - code
      description: Unprocessable entity due to a business validation problem. (https://tools.ietf.org/html/rfc4918#section-11.2)
    Error422Code:
      type: string
      description: |
        One of the following error codes:
          - missingProperty: The property the Seller has expected is not present in the payload
          - invalidValue: The property has an incorrect value
          - invalidFormat: The property value does not comply with the expected value format
          - referenceNotFound: The object referenced by the property cannot be identified in the Seller system
          - unexpectedProperty: Additional property, not expected by the Seller has been provided
          - tooManyRecords: the number of records to be provided in the response exceeds the Seller's threshold.
          - otherIssue: Other problem was identified (detailed information provided in a reason)
      enum:
        - missingProperty
        - invalidValue
        - invalidFormat
        - referenceNotFound
        - unexpectedProperty
        - tooManyRecords
        - otherIssue
    Error500:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            code:
              type: string
              description: |-
                The following error code:
                - internalError: Internal server error - the server encountered an unexpected condition that prevented it from fulfilling the request.
              enum:
                - internalError
          required:
            - code
      description: Internal Server Error. (https://tools.ietf.org/html/rfc7231#section-6.6.1)
    Error501:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          properties:
            code:
              type: string
              description: |-
                The following error code::
                - notImplemented: Method not supported by the server
              enum:
                - notImplemented
          required:
            - code
      description: Not Implemented. (https://tools.ietf.org/html/rfc7231#section-6.6.2)
    EventSubscription:
      type: object
      description:
        Sets the communication endpoint address the service instance must
        use to deliver notification information
      properties:
        callback:
          type: string
          description:
            The value provided by the Buyer in `EventSubscriptionInput`
            during notification registration
        id:
          type: string
          description:
            An identifier of the event subscription assigned by the Seller
            when a resource is created.
        query:
          type: string
          description:
            This attribute is used to define notification registration
            constraints.
      required:
        - callback
        - id
    EventSubscriptionInput:
      type: object
      description:
        "This class is used to register for Notifications. \n\n| API name\
        \                                 | MEF 113 name          | Description  \
        \                                                                        \
        \                                                                        \
        \                                                                        \
        \                                                                        \
        \         |\n| ---------------------------------------- | ---------------------\
        \ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\
        \ |\n| `troubleTicketAttributeValueChangeEvent` | TICKET_UPDATE         |\
        \ The Seller settable attributes for a Ticket were updated by the Seller.\
        \ Note: Buyer initiated Ticket updates due to Patch operation will not trigger\
        \ a `troubleTicketAttributeValueChangeEvent`                             \
        \                                                                        \
        \                  |\n| `troubleTicketInformationRequiredEvent`  | TICKET_STATE_CHANGE\
        \   | A Ticket `status` was changed by the Seller.                       \
        \                                                                        \
        \                                                                        \
        \                                                                        \
        \                           |\n| `troubleTicketResolvedEvent`            \
        \ | TICKET_INFO_REQUIRED  | The Seller requires more information from the\
        \ Buyer for a Ticket to continue processing a Ticket. The details on what\
        \ information is needed from the Buyer will be provided via a Ticket `note`.\
        \ The Ticket `status` is `pending`. Note: The Buyer uses the Patch operation\
        \ to provide more information for a Ticket. |\n| `troubleTicketStatusChangeEvent`\
        \         | TICKET_RESOLVED       | The Seller is informing the Buyer the\
        \ Ticket is resolved and the Buyer to verify that the Issue on which the Ticket\
        \ was based is no longer observed. The Ticket `status` is `resolved`. Note:\
        \ The Buyer confirms if the Issue has been resolved satisfactorily or not\
        \ using close or reopen operations                |\n| `incidentCreateEvent`\
        \                    | INCIDENT_CREATE       | A new Incident was created\
        \ by the Seller.                                                         \
        \                                                                        \
        \                                                                        \
        \                                                                    |\n|\
        \ `incidentAttributeValueChangeEvent`      | INCIDENT_UPDATE       | An open\
        \ Incident was updated by the Seller.                                    \
        \                                                                        \
        \                                                                        \
        \                                                                        \
        \               |\n| `incidentStatusChangeEvent`              | INCIDENT_STATE_CHANGE\
        \ | An Incident `status` was changed by the Seller.                      \
        \                                                                        \
        \                                                                        \
        \                                                                        \
        \                         |\n"
      properties:
        callback:
          type: string
          description:
            "This callback value must be set to *host* property from Buyer\
            \ Notification API (troubleTicketNotification.api.yaml). This property\
            \ is appended with the base path and notification resource path specified\
            \ in that API to construct an URL to which notification is sent. E.g.\
            \ for \"callback\": \"http://buyer.com/listenerEndpoint\", the state change\
            \ event notification will be sent to: `http://buyer.com/listenerEndpoint/mefApi/sonata/troubleTicketNotification/v2/listener/troubleTicketStatusChangeEvent`"
        query:
          type: string
          description:
            "This attribute is used to define to which type of events to\
            \ register to. Example: \"query\":\"eventType = troubleTicketStatusChangeEvent\"\
            . To subscribe for more than one event type, put the values separated\
            \ by comma: `eventType=troubleTicketStatusChangeEvent,troubleTicketResolvedEvent`.\
            \ The possible values are enumerated by the 'TroubleTicketEventType' in\
            \ troubleTicketNotification.api.yaml. An empty query is treated as specifying\
            \ no filters - ending in  subscription for all event types."
      required:
        - callback
    FieldedAddress:
      type: object
      description:
        "A type of Address that has a discrete field and value for each\
        \ type of boundary or identifier down to the lowest level of detail. For example\
        \ \"street number\" is one field, \"street name\" is another field, etc. Reference:\
        \ MEF 79 (Sn 8.9.2)"
      properties:
        country:
          type: string
          description: Country that the address is in
        streetType:
          type: string
          description:
            "The type of street (e.g., alley, avenue, boulevard, brae,\
            \ crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf)"
        postcodeExtension:
          type: string
          description:
            An extension of a postal code. E.g. the part following the
            dash in a US urban property address
        city:
          type: string
          description: The city that the address is in
        streetNr:
          type: string
          description:
            Number identifying a specific property on a public street.
            It may be combined with streetNrLast for ranged addresses. MEF 79 defines
            it as required however as in certain countries it is not used we make
            it optional in API.
        locality:
          type: string
          description: The locality that the address is in
        postcode:
          type: string
          description:
            "Descriptor for a postal delivery area, used to speed and simplify\
            \ the delivery of mail (also known as zip code)"
        streetNrLast:
          type: string
          description: Last number in a range of street numbers allocated to a property
        streetNrSuffix:
          type: string
          description: The first street number suffix
        streetName:
          type: string
          description: Name of the street or other street type
        stateOrProvince:
          type: string
          description: The State or Province that the address is in
        streetNrLastSuffix:
          type: string
          description: Last street number suffix for a ranged address
        geographicSubAddress:
          $ref: "#/components/schemas/GeographicSubAddress"
        streetSuffix:
          type: string
          description: A modifier denoting a relative direction
      required:
        - city
        - country
        - streetName
    GeographicSubAddress:
      type: object
      description: "Additional fields used to specify an address, as detailed as possible."
      properties:
        buildingName:
          type: string
          description: |
            Allows for identification of places that require building name  as part of addressing information
        id:
          type: string
          description: Unique Identifier of the subAddress
        levelNumber:
          type: string
          description:
            "Used where a level type may be repeated e.g. BASEMENT 1, BASEMENT\
            \ 2"
        levelType:
          type: string
          description: Describes level types within a building
        privateStreetName:
          type: string
          description:
            '"Private streets internal to a property (e.g. a university)
            may have internal names that are not recorded by the land title office'
        privateStreetNumber:
          type: string
          description: Private streets numbers internal to a private street
        subUnit:
          type: array
          description:
            "Representation of a MEFSubUnit It is used for describing subunit\
            \ within a subaddress  e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT,\
            \ WHARF."
          items:
            $ref: "#/components/schemas/MEFSubUnit"
    Incident:
      type: object
      description: |
        An Incident is a record of an issue that is not part of normal operation in the Seller's network that has a possible negative impact on the operability of the network on one or more Buyers.
      properties:
        attachment:
          type: array
          description:
            "Attachments to the Ticket, such as a file, screenshot, or\
            \ embedded content. Attachments may be added but may not be modified or\
            \ deleted (for historical reasons)."
          items:
            $ref: "#/components/schemas/AttachmentValue"
        closedDate:
          type: string
          format: date-time
          description: The date the Incident status was set to closed by the Seller
        creationDate:
          type: string
          format: date-time
          description: The date on which the Incident was created
        description:
          type: string
          description: Description of the Incident
        expectedClosedDate:
          type: string
          format: date-time
          description:
            The date provided by the Seller to indicate when the Incident
            is expected to be closed.
        href:
          type: string
          description: "Hyperlink, a reference to the Incident entity"
        id:
          type: string
          description: Unique (within the Seller domain) identifier for the Incident.
        impact:
          $ref: "#/components/schemas/MEFObservedImpactType"
        incidentType:
          $ref: "#/components/schemas/IncidentType"
        note:
          type: array
          description:
            A set of unstructured comments or information associated to
            the Incident. Notes may be added but may not be modified or deleted (for
            historical reasons).
          items:
            $ref: "#/components/schemas/Note"
        priority:
          $ref: "#/components/schemas/TroubleTicketPriorityType"
        relatedContactInformation:
          type: array
          description: |-
            Party playing a role in this Incident.
            The 'role' is to specify the type of contact as specified in MEF 113:
            Incident Contact ('role=incidentContact') - REQUIRED to be set by the Seller
            Incident Technical Contact ('role=incidentTechnicalContact')
          items:
            $ref: "#/components/schemas/RelatedContactInformation"
          minItems: 1
        relatedEntity:
          type: array
          description:
            A set of identifiers of the Products on which the Incident
            could have an impact on the normal operation.
          items:
            $ref: "#/components/schemas/RelatedEntity"
          minItems: 1
        relatedIssue:
          type: array
          description:
            A list of Related Issue relationships. Represents relationships
            to other Trouble Tickets and Incidents.
          items:
            $ref: "#/components/schemas/IssueRelationship"
        severity:
          $ref: "#/components/schemas/TroubleTicketSeverityType"
        situationStartDate:
          type: string
          format: date-time
          description:
            "The date when the situation was first identified, for example\
            \ via error logs."
        status:
          $ref: "#/components/schemas/IncidentStatusType"
        statusChange:
          type: array
          description:
            The status change history that is associated to the Incident.
            Populated by the Seller.
          items:
            $ref: "#/components/schemas/IncidentStatusChange"
      required:
        - creationDate
        - description
        - id
        - impact
        - incidentType
        - priority
        - relatedContactInformation
        - relatedEntity
        - severity
        - situationStartDate
        - status
    IncidentStatusChange:
      type: object
      description:
        "Holds the status notification reasons and associated date the\
        \ status changed, populated by the server"
      properties:
        changeDate:
          type: string
          format: date-time
          description: The date and time the status changed.
        changeReason:
          type: string
          description: The reason why the status changed.
        status:
          $ref: "#/components/schemas/IncidentStatusType"
    IncidentStatusType:
      type: string
      description:
        "Possible values for the status of the Incident\n\n| status   \
        \    | MEF 113 name | Description                                        \
        \                                                                        \
        \                                              |\n| ------------ | ------------\
        \ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------\
        \ |\n| `closed`     | CLOSED       | The Situation described in the Incident\
        \ was closed by has been resolved and normal operation has been restored on\
        \ the Seller.Seller's network. This is a terminal state. |\n| `created`  \
        \  | CREATED      | A new Incident has been created and allocated a unique\
        \ `id`.                                                                  \
        \                                           |\n| `inProgress` | IN_PROGRESS\
        \  | The Incident is in the process of being handled and investigated for\
        \ resolution by the Seller. \n"
      enum:
        - closed
        - created
        - inProgress
    IncidentType:
      type: string
      description: |
        Possible values for the type of the Incident:
        - maintenance: Any scheduled or non-scheduled maintenance related Incident.
        - repair: Any non-scheduled Situation requiring repair by the Seller.
        - installation: Any installation related Situation requiring action by the Seller.
      enum:
        - maintenance
        - repair
        - installation
    Incident_Find:
      type: object
      description: |
        This class represents a single list item for the response of `listIncident` operation.
      properties:
        closedDate:
          type: string
          format: date-time
          description: The date the Incident status was set to closed by the Seller
        creationDate:
          type: string
          format: date-time
          description: The date on which the Incident was created
        description:
          type: string
          description: Description of the Incident
        expectedClosedDate:
          type: string
          format: date-time
          description:
            The date provided by the Seller to indicate when the Incident
            is expected to be closed.
        href:
          type: string
          description: "Hyperlink, a reference to the Incident entity"
        id:
          type: string
          description: Unique (within the Seller domain) identifier for the Incident.
        impact:
          $ref: "#/components/schemas/MEFObservedImpactType"
        incidentType:
          $ref: "#/components/schemas/IncidentType"
        situationStartDate:
          type: string
          format: date-time
          description:
            "The date when the Incident was first identified, for example\
            \ via error logs."
        priority:
          $ref: "#/components/schemas/TroubleTicketPriorityType"
        relatedEntity:
          type: array
          description:
            "An entity that is related to the Incident such as a service,\
            \ a product, etc. The entity which the Incident is associated with."
          items:
            $ref: "#/components/schemas/RelatedEntity"
          minItems: 1
        severity:
          $ref: "#/components/schemas/TroubleTicketSeverityType"
        status:
          $ref: "#/components/schemas/IncidentStatusType"
      required:
        - creationDate
        - description
        - id
        - impact
        - incidentType
        - priority
        - relatedEntity
        - severity
        - status
    MEFBuyerSellerType:
      type: string
      description: An enumeration with buyer and seller values.
      enum:
        - buyer
        - seller
    MEFByteSize:
      type: object
      description: A size represented by value and Byte units
      properties:
        amount:
          type: number
          format: float
          default: 1
          description: Numeric value in a given unit
        units:
          $ref: "#/components/schemas/DataSizeUnit"
    MEFObservedImpactType:
      type: string
      description: |-
        An enumeration of the possible values of impact observed by the Buyer.
        - degraded: When the Product is impacted and not meeting the Product specifications.
        - intermittent: When the Product is not operational as intended on an intermittent basis.
        - down: When the Product is non-operational.
      enum:
        - degraded
        - intermittent
        - down
    MEFSubUnit:
      type: object
      description: Allows for sub unit identification
      properties:
        subUnitNumber:
          type: string
          description:
            "The discriminator used for the subunit, often just a simple\
            \ number but may also be a range."
        subUnitType:
          type: string
          description:
            "The type of subunit e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER,\
            \ UNIT, WHARF."
      required:
        - subUnitNumber
        - subUnitType
    Note:
      type: object
      description:
        Extra information about a given entity. Only useful in processes
        involving human interaction. Not applicable for an automated process.
      properties:
        author:
          type: string
          description: Author of the note
        date:
          type: string
          format: date-time
          description: Date of the note
        id:
          type: string
          description:
            "Identifier of the note within its containing entity (may or\
            \ may not be globally unique, depending on provider implementation)"
        source:
          $ref: "#/components/schemas/MEFBuyerSellerType"
        text:
          type: string
          description: Text of the note
      required:
        - author
        - date
        - id
        - source
        - text
    Reason:
      type: object
      description: An object to convey a reason for the operation.
      properties:
        reason:
          type: string
          description: A text description of why given operation was requested.
      required:
        - reason
    RelatedContactInformation:
      type: object
      description:
        Contact data for a person or organization that is involved in a
        given context. It is specified by the Seller (e.g. Seller Contact Information)
        or by the Buyer.
      properties:
        emailAddress:
          type: string
          description: Email address
        name:
          type: string
          description: Name of the contact
        number:
          type: string
          description: Phone number
        numberExtension:
          type: string
          description: Phone number extension
        organization:
          type: string
          description: The organization or company that the contact belongs to
        postalAddress:
          $ref: "#/components/schemas/FieldedAddress"
        role:
          type: string
          description: A role the party plays in a given context.
      required:
        - emailAddress
        - name
        - number
        - role
    RelatedEntity:
      type: object
      description:
        "A reference to an entity, where the type of the entity is not\
        \ known in advance."
      properties:
        "@referredType":
          type: string
          default: Product
          description: The actual type of the target instance when needed for disambiguation.
        href:
          type: string
          description: Reference of the related entity.
        id:
          type: string
          description: Unique identifier of a related entity.
        role:
          type: string
          description: The role of an entity.
      required:
        - "@referredType"
        - id
        - role
    IssueRelationship:
      type: object
      description: Represents relationships to other Trouble Tickets and Incidents
      properties:
        "@referredType":
          type: string
          description: The type of the referred Issue (Incident or TroubleTicket)
        creationDate:
          type: string
          format: date-time
          description: The date the relationship was created
        description:
          type: string
          description:
            A description of the reason for the Relation Source to set
            the relationship
        href:
          type: string
          description: Reference of the Trouble Ticket or Incident
        id:
          type: string
          description:
            Unique identifier of the referenced Issue (Trouble Ticket od
            Incident)
        relationshipType:
          type: string
          description:
            "Type of the Trouble Ticket relationship can be blocks, depends\
            \ on, duplicates, causes, etc..."
        source:
          $ref: "#/components/schemas/MEFBuyerSellerType"
      required:
        - "@referredType"
        - creationDate
        - description
        - id
        - relationshipType
        - source
    TroubleTicket:
      allOf:
        - $ref: "#/components/schemas/TroubleTicket_Common"
        - type: object
          description:
            "A Trouble Ticket is a record of an issue that is created, tracked,\
            \ and managed by a Trouble Ticket management system"
          properties:
            creationDate:
              type: string
              format: date-time
              description: The date on which the Trouble Ticket was created
            expectedResolutionDate:
              type: string
              format: date-time
              description:
                The date provided by the Seller to indicate when the Ticket
                is expected to be resolved
            href:
              type: string
              description: "Hyperlink, a reference to the Trouble Ticket entity"
            id:
              type: string
              description:
                Unique (within the Seller Ticket domain) identifier for the
                Ticket.
            resolutionDate:
              type: string
              format: date-time
              description: The date the Ticket status was set to resolved by the Seller
            sellerPriority:
              $ref: "#/components/schemas/TroubleTicketPriorityType"
            sellerSeverity:
              $ref: "#/components/schemas/TroubleTicketSeverityType"
            status:
              $ref: "#/components/schemas/TroubleTicketStatusType"
            statusChange:
              type: array
              description:
                The status change history that is associated to the ticket.
                Populated by the Seller.
              items:
                $ref: "#/components/schemas/TroubleTicketStatusChange"
            workOrder:
              type: array
              description:
                A reference to a set of WorkOrders to be performed under
                the responsibility of Seller technician(s) to resolve the Ticket.
              items:
                $ref: "#/components/schemas/WorkOrderRef"
          required:
            - creationDate
            - id
            - sellerPriority
            - sellerSeverity
            - status
    TroubleTicketPriorityType:
      type: string
      description: Possible values for the priority of the Trouble Ticket
      enum:
        - low
        - medium
        - high
        - critical
    TroubleTicketSeverityType:
      type: string
      description: Possible values for the severity of the Trouble Ticket
      enum:
        - minor
        - moderate
        - significant
        - extensive
    TroubleTicketStatusChange:
      type: object
      description:
        "Holds the status notification reasons and associated date the\
        \ status changed, populated by the server"
      properties:
        changeDate:
          type: string
          format: date-time
          description: The date and time the status changed.
        changeReason:
          type: string
          description: The reason why the status changed.
        status:
          $ref: "#/components/schemas/TroubleTicketStatusType"
    TroubleTicketStatusType:
      type: string
      description: |
        Possible values for the status of the Trouble Ticket

        | status                  | MEF 113 name           | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |
        | ----------------------- | ---------------------- ||
        | `acknowledged`          | ACKNOWLEDGED           | A request to create a Ticket was received and accepted by the Seller. The Ticket create request has been validated and a Ticket has been created by the Seller and allocated a unique `id`.                                                                                                                                                                                                                                                                                                                        |
        | `assessingCancellation` | ASSESSING_CANCELLATION | A request has been made by the Buyer to cancel the Ticket and is being assessed by the Seller to determine whether to just close the Ticket, or continue to resolve the Issue to prevent similar Create Ticket requests from other Buyers. If the Seller chooses to resolve the Issue, the Seller might create an Incident or an internal Ticket for the Issue, but that is outside the scope of this document. After the Seller has completed the assessment, the Seller updates the Ticket State to `cancelled`. |
        | `cancelled`             | CANCELLED              | The Ticket has been successfully cancelled by the Buy-er. The Buyer will receive no further Event Notifications for the Ticket. This is a terminal state.                                                                                                                                                                                                                                                                                                                                               |
        | `closed`                | CLOSED                 | The Buyer has confirmed that the Issue they reported is no longer observed, or the pre-defined time frame (agreed upon between Buyer and Seller) for confirming that the Issue has been resolved has passed without a response by the Buyer. This is a terminal state.                                                                                                                                                                                                                                             |
        | `inProgress`            | IN_PROGRESS            | The Ticket is in the process of being handled and investigated for resolution by the Seller.                                                                                                                                                                                                                                                                                                                                                                                                                       |
        | `pending`               | PENDING                | The Seller is waiting on the Buyer to provide additional information for the Ticket, or the Buyer to schedule an Appointment for the WorkOrder (linked to the Ticket) in order to continue processing the Ticket. This may result in the clock being stopped for the service level agreement until the Buyer has responded to the request.                                                                                                                                                                         |
        | `reopened`              | REOPENED               | The Buyer has verified that the Issue described in the Ticket is still observed and has not been resolved satisfactorily. The Buyer rejects the Seller's request to close the Ticket. The Ticket has been reopened and is waiting for further actions from the Seller.                                                                                                                                                                                                                                             |
        | `resolved`              | RESOLVED               | The Buyer's Issue described in the Ticket was resolved by the Seller. The Seller assumes that normal operation is re-established for the Buyer's product and i snow waiting for the Buyer to confirm that the Issue they reported is no longer observed.                                                                                                                                                                                                                                                           |
      enum:
        - acknowledged
        - assessingCancellation
        - cancelled
        - closed
        - inProgress
        - pending
        - resolved
        - reopened
    TroubleTicketType:
      type: string
      description: |
        Possible values for the type of the Trouble Ticket:
        - assistance: Requesting help for a situation (not a failure) requiring attention that is not categorized.
        - information: Buyer is requesting information on the Issue
        - installation: Related to installation issue. Provisioning is complete, but Product is not operational.
        - maintenance: Any scheduled or non-scheduled maintenance related Issue.
      enum:
        - assistance
        - information
        - installation
        - maintenance
    TroubleTicket_Common:
      type: object
      description: |
        A Trouble Ticket is a record of an issue that is created, tracked, and managed by a Trouble Ticket management system Skipped properties: id,href
      properties:
        attachment:
          type: array
          description:
            "Attachments to the Ticket, such as a file, screenshot or embedded\
            \ content. Attachments may be added but may not be modified or deleted\
            \ (for historical reasons)."
          items:
            $ref: "#/components/schemas/AttachmentValue"
        description:
          type: string
          description: Summarized description of the Issue the Buyer is experiencing.
        externalId:
          type: string
          description:
            Identifier provided by the Buyer to allow the Buyer to use
            as a search attribute in Retrieve Ticket List.
        issueStartDate:
          type: string
          format: date-time
          description:
            "The date indicating when the Buyer first observed the Issue,\
            \ to provide the Seller with additional insight."
        note:
          type: array
          description:
            A set of comments or information associated to the Ticket.
            This list can be empty. Notes may be added but may not be modified or
            deleted (for historical reasons).
          items:
            $ref: "#/components/schemas/Note"
        observedImpact:
          $ref: "#/components/schemas/MEFObservedImpactType"
        priority:
          $ref: "#/components/schemas/TroubleTicketPriorityType"
        relatedContactInformation:
          type: array
          description:
            "Party playing a role for this Trouble Ticket.\nThe 'role'\
            \ is to specify the type of contact as specified in MEF 113:\nReporter\
            \ Contact ('role=reporterContact') - REQUIRED in the request\nBuyer Technical\
            \ Contacts ('role=buyerTechnicalContact') \nSeller Ticket Contact ('role=sellerTicketContact')\
            \ \nSeller Technical Contact ('role=sellerTechnicalContact')"
          items:
            $ref: "#/components/schemas/RelatedContactInformation"
          minItems: 1
        relatedEntity:
          type: array
          description:
            "An entity that is related to the ticket such as a bill, a\
            \ product, etc. The entity against which the ticket is associated."
          items:
            $ref: "#/components/schemas/RelatedEntity"
          maxItems: 1
          minItems: 1
        relatedIssue:
          type: array
          description:
            A list of Related Issue relationships. Represents relationships
            to other Trouble Tickets and Incidents.
          items:
            $ref: "#/components/schemas/IssueRelationship"
        severity:
          $ref: "#/components/schemas/TroubleTicketSeverityType"
        ticketType:
          $ref: "#/components/schemas/TroubleTicketType"
      required:
        - description
        - observedImpact
        - priority
        - relatedContactInformation
        - relatedEntity
        - severity
        - ticketType
    TroubleTicket_Create:
      allOf:
        - $ref: "#/components/schemas/TroubleTicket_Common"
        - type: object
      description:
        "A Trouble Ticket is a record of an issue that is created, tracked,\
        \ and managed by a Trouble Ticket management system The modeling pattern introduces\
        \ the `Common` supertype to aggregate attributes that are common to both `TroubleTicket`\
        \ and `TroubleTicket_Create`. It this case the Create type has a subset of\
        \ attributes of the response type and does not introduce any new, thus the\
        \ `Create` type has an empty definition."
    TroubleTicket_Find:
      type: object
      description: |
        This class represents a single list item for the response of `listTroubleTicket` operation.
      properties:
        creationDate:
          type: string
          format: date-time
          description: The date on which the Trouble Ticket was created
        description:
          type: string
          description: Summarized description of the Issue the Buyer is experiencing.
        expectedResolutionDate:
          type: string
          format: date-time
          description:
            The date provided by the Seller to indicate when the Ticket
            is expected to be resolved
        externalId:
          type: string
          description: Additional identifier coming from an external system
        id:
          type: string
          description: Unique identifier of the Trouble Ticket
        priority:
          $ref: "#/components/schemas/TroubleTicketPriorityType"
        relatedEntity:
          type: array
          description:
            "An entity that is related to the ticket such as a bill, a\
            \ product, etc. The entity against which the ticket is associated."
          items:
            $ref: "#/components/schemas/RelatedEntity"
          minItems: 1
        observedImpact:
          $ref: "#/components/schemas/MEFObservedImpactType"
        resolutionDate:
          type: string
          format: date-time
          description: The date the Ticket status was set to resolved by the Seller
        sellerPriority:
          $ref: "#/components/schemas/TroubleTicketPriorityType"
        sellerSeverity:
          $ref: "#/components/schemas/TroubleTicketSeverityType"
        severity:
          $ref: "#/components/schemas/TroubleTicketSeverityType"
        status:
          $ref: "#/components/schemas/TroubleTicketStatusType"
        ticketType:
          $ref: "#/components/schemas/TroubleTicketType"
      required:
        - creationDate
        - description
        - expectedResolutionDate
        - externalId
        - id
        - observedImpact
        - priority
        - relatedEntity
        - resolutionDate
        - sellerPriority
        - sellerSeverity
        - severity
        - status
        - ticketType
    TroubleTicket_Update:
      type: object
      description:
        "A Trouble Ticket is a record of an issue that is created, tracked,\
        \ and managed by a Trouble Ticket management system"
      properties:
        attachment:
          type: array
          description:
            "Attachments to the Ticket, such as a file, screen shot or\
            \ embedded content."
          items:
            $ref: "#/components/schemas/AttachmentValue"
        externalId:
          type: string
          description: Additional identifier coming from an external system
        issueStartDate:
          type: string
          format: date-time
          description:
            "The date indicating when the Buyer first observed the Issue,\
            \ to provide the Seller with additional insight."
        observedImpact:
          $ref: "#/components/schemas/MEFObservedImpactType"
        note:
          type: array
          description:
            A set of comments or information associated to the Ticket.
            This list can be empty. Notes may be added but may not be modified or
            deleted (for historical reasons).
          items:
            $ref: "#/components/schemas/Note"
        priority:
          $ref: "#/components/schemas/TroubleTicketPriorityType"
        relatedContactInformation:
          type: array
          description:
            "Party playing a role for this quote. If `instantSyncQuote=false`\
            \ \nthen the Buyer MUST specify Buyer Contact Information ('role=buyerContactInformation')\
            \ \nand the Seller MUST specify Seller Contact Information ('role=sellerContactInformation')"
          items:
            $ref: "#/components/schemas/RelatedContactInformation"
        relatedIssue:
          type: array
          description:
            A list of Related Issue relationships. Represents relationships
            to other Trouble Tickets and Incidents.
          items:
            $ref: "#/components/schemas/IssueRelationship"
        severity:
          $ref: "#/components/schemas/TroubleTicketSeverityType"
    WorkOrderRef:
      type: object
      description: |
        A reference to an WorkOrder resource.
      properties:
        href:
          type: string
          description: |
            Hyperlink to the referenced WorkOrder.
        id:
          type: string
          description: Identifier of the referenced WorkOrder.
      required:
        - id
  securitySchemes:
    oauth2MEFLSOAPI:
      description: Default m2m client code
      flows:
        clientCredentials:
          refreshUrl: http://mef.net/example/refresh
          scopes:
            default: default scope
          tokenUrl: http://mef.net/example/token
      type: oauth2
