---
"$schema": http://json-schema.org/draft-07/schema#
title: 
    MEF LSO Sonata - Carrier Ethernet Class of Service
    # MEF Forum - Date: 20220110  Edit-level: 319
    # File: carrierEthernet/common/carrierEthernetClassOfService.yaml
    #
    # ---------------------
    # Disclaimer
    # 
    # Â© MEF Forum 2021. All Rights Reserved.
    # 
    # The information in this publication is freely available for reproduction
    # and use by any recipient and is believed to be accurate as of its
    # publication date. Such information is subject to change without notice
    # and MEF Forum (MEF) is not responsible for any errors. MEF does not
    # assume responsibility to update or correct any information in this
    # publication. No representation or warranty, expressed or implied, is
    # made by MEF concerning the completeness, accuracy, or applicability of
    # any information contained herein and no liability of any kind shall be
    # assumed by MEF as a result of reliance upon such information.
    # 
    # The information contained herein is intended to be used without
    # modification by the recipient or user of this document. MEF is not
    # responsible or liable for any modifications to this document made by any
    # other party.
    # 
    # The receipt or any use of this document or its contents
    # does not in any way create, by implication or otherwise:
    # 
    # a) any express or implied license or right to or under any patent,
    # copyright, trademark or trade secret rights held or claimed by any MEF
    # member which are or may be associated with the ideas, techniques,
    # concepts or expressions contained herein; nor
    # 
    # b) any warranty or representation that any MEF members will announce
    # any product(s) and/or service(s) related thereto, or if such
    # announcements are made, that such announced product(s) and/or service(s)
    # embody any or all of the ideas, technologies, or concepts contained
    # herein; nor
    # 
    # c) any form of relationship between any MEF member and the recipient
    # or user of this document.
    # 
    # Implementation or use of specific MEF standards, specifications, or
    # recommendations will be voluntary, and no Member shall be obliged to
    # implement them by virtue of participation in MEF Forum. MEF is a
    # non-profit international organization to enable the development and
    # worldwide adoption of agile, assured and orchestrated network services.
    # MEF does not, expressly or otherwise, endorse or promote any specific
    # products or services.
    # ---------------------
    #
definitions:
    CosFromEp:
        type: object
        description:  >-
            Ingress CoS is specified as {F,M,P}. This is when F=OVC_EP
            or EVC_EP as appropriate.
        properties:
            mapType:
                description: The field that indicates F = EVC/OVC EP.
                type: string
                enum:
                    - "ENDPOINT"
            map_M:
                description: The single CoS Name at this EVC/OVC EP
                # See additional validation notes in the Schema Guide
                type: string
            l2cp_P:
                description: This specifies the CoS Name for L2CPs carried over the EVC/OVC.
                type: array 
                minItems: 0
                uniqueItems: TRUE
                items:
                    $ref: "#/definitions/CosL2cp"
    CosFromCtagPcp:
        type: object
        description:  >-
            Ingress CoS is specified as {F,M,P}. This is when F=C_TAG_PCP.
            This maps each of the 8 PCP values in the C-tag to a Class of Service
            Name. It also maps UNTAGGED frames to a Class of Service Name.
        properties:
            mapType:
                description: The Field that indicates F = C_TAG_PCP.
                type: string
                enum:
                    - "C_TAG_PCP"
            map_M:
                description:  >-
                    This maps each of the possible C-tag PCP values (0-7) and Untagged
                    to a specific CoS Name.
                type: array 
                minItems: 9
                maxItems: 9
                uniqueItems: TRUE
                items:
                    $ref: "#/definitions/CosUniPcpMapEntry"
            l2cp_P:
                description: This specifies the CoS Name for L2CPs carried over the OVC.
                type: array 
                minItems: 0
                uniqueItems: TRUE
                items:
                    $ref: "#/definitions/CosL2cp"
    CosUniPcpMapEntry:
        type: object
        description:  >-
            2-tuple {PCP, CoSName} that maps a PCP value (or Untagged)
            to a CoS Name.
        properties:
            pcpVal:
                description: A PCP value from 0 to 7 or UNTAGGED
                type: string
                enum:
                    - "0"
                    - "1"
                    - "2"
                    - "3"
                    - "4"
                    - "5"
                    - "6"
                    - "7"
                    - "UNTAGGED"
            pcpCosName:
                description: A CoS Name or DISCARD
                # See additional validation notes in the Schema Guide
                type: string
    CosFromStagPcp:
        type: object
        description:  >-
            Ingress CoS is specified as {F,M,P}. This is when F=S_TAG_PCP.
            This maps each of the 8 PCP values in the S-tag to a Class of Service
            Name.
        properties:
            mapType:
                description: The Field that indicates F = S_TAG_PCP.
                type: string
                enum:
                    - "S_TAG_PCP"
            map_M:
                description: A list of 8 PCP values and their associated CoS Names
                type: array 
                minItems: 8
                maxItems: 8
                uniqueItems: TRUE
                items:
                    $ref: "#/definitions/CosEnniPcpMapEntry"
            l2cp_P:
                description: This specifies the CoS Name for L2CPs carried over the OVC.
                # See additional validation notes in the Schema Guide
                type: array 
                minItems: 0
                uniqueItems: TRUE
                items:
                    $ref: "#/definitions/CosL2cp"
    CosEnniPcpMapEntry:
        type: object
        description: 2-tuple {PCP, CoSName} that maps a CoS Name or DISCARD to a PCP.
        properties:
            pcpVal:
                $ref: "carrierEthernetTypes.yaml#/definitions/PcpValue"
            pcpCosName:
                type: string
    CosFromDscp:
        type: object
        description:  >-
            Ingress CoS is specified as {F,M,P}. This is when F=DSCP. This
            maps groups of DSCP values (independently for ipV4 and ipV6) to
            a Class of Service. It also provides a Class of Service mapping
            for DSCP values that are not specified and for frames that do not
            contain IP Packets.
        properties:
            mapType:
                description: The Field that indicates F = DSCP.
                type: string
                enum:
                    - "DSCP"
            map_M:
                description:  >-
                    This maps DSCP values to CoS Names for each of IPv4 and IPv6
                    and also to non-IP packets.
                # A particular DSCP value can appear in at most one entry for each of  IPv4 and IPv6 in dscpValueCosList
                $ref: "#/definitions/CosDscpMap"
            l2cp_P:
                description: This specifies the CoS Names for L2CPs carried over the EVC/OVC.
                type: array 
                minItems: 0
                uniqueItems: TRUE
                items:
                    $ref: "#/definitions/CosL2cp"
    CosDscpMap:
        type: object
        description:  >-
            This is a list of DSCP to CoS Name Entries followed by items
            for Not an IP Packet and All Other Values.
        properties:
            dscpValueCoSList:
                description:  >-
                    This is a list of DSCP to CoS Map Entries: {ipv4DSCPs, ipv6DSCPs,
                    CoSName}
                # See additional validation notes in the Schema Guide
                type: array 
                minItems: 0
                uniqueItems: TRUE
                items:
                    $ref: "#/definitions/CosDscpMapEntry"
            otherIPv4:
                description:  >-
                    This is the CoS Name for IPv4 packets with DSCP values other
                    than those listed.
                type: string
            otherIPv6:
                description:  >-
                    This is the CoS Name for IPv6 packets with DSCP values other
                    than those listed.
                type: string
            notIP:
                description:  >-
                    This is the CoS Name for packets that are not IP packets when
                    CoS is determined from DSCP
                type: string
    CosDscpMapEntry:
        type: object
        description: This is a 3-tuple {ipv4list, ipv6list, cosName}
        properties:
            ipv4List:
                description: List of IPv4 DSCP values
                $ref: "#/definitions/DscpValues"
            ipv6List:
                description: List of IPv6 DSCP values
                $ref: "#/definitions/DscpValues"
            cosName:
                type: string
    DscpValues:
        type: object
        description: A list of 6 bit values
        properties:
            dscpValues:
                description: A list of unique 6-bit (0-63) values
                type: array 
                minItems: 1
                uniqueItems: TRUE
                items:
                    type: integer
                    minimum: 0
                    maximum: 63
    CosL2cp:
        type: object
        description: 2-tuple {L2CP Ident, CoS Name}
        properties:
            l2cpIdentifier:
                description: MEF 45.1 sec. 8.2 - Protocol Identifier
                $ref: "carrierEthernetL2cp.yaml#/definitions/L2cpProtocol"
            l2cpCosName:
                description: CoS Name String to associate with the L2CP
                type: string

